
Inclinometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008844  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a20  08008958  08008958  00018958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a378  0800a378  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  0800a378  0800a378  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a378  0800a378  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800a380  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f0  20000278  0800a5f8  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  0800a5f8  00021368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d751  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002225  00000000  00000000  0002da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b31  00000000  00000000  00030ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f76  00000000  00000000  00031601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d37  00000000  00000000  0004a577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7af  00000000  00000000  0005b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005044  00000000  00000000  000e8a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000edaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800893c 	.word	0x0800893c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800893c 	.word	0x0800893c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <HAL_TIM_PeriodElapsedCallback>:
float filtroComplementar(float gyro, float accel, float dt, float alpha);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){//ENDEREÇO DE HTIM COMO PARAMETRO
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){ 	//IRA LER O MEMBRO DA ESTRUTURA APONTADO PELO PONTEIRO PASSADO COMO ARGUMENTO (*htim/nome da estrutura) DA FUNC CALL BACK
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d140      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x94>
		cont[0]++;							/*FUNÇÃO DE TRATAMENTO DE INTERRUPÇÃO POR OVERFLOW TIMER3*/ /*Instance É A FLAG QUE INDICA QUAL TIMER GEROU A INTERRUPÇÃO*/
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010ec:	801a      	strh	r2, [r3, #0]
		cont[1]++;							/*DELAYS POR INTERRUPÇÃO - CONTADORES*/
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010f0:	885b      	ldrh	r3, [r3, #2]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010f8:	805a      	strh	r2, [r3, #2]
		cont[2]++;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001104:	809a      	strh	r2, [r3, #4]
		if(cont[0]>=4 && init){
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d912      	bls.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x64>
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00e      	beq.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x64>
			captura_dados();
 8001116:	f000 f88b 	bl	8001230 <captura_dados>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800111a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001120:	f001 f89a 	bl	8002258 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LPCB_GPIO_Port, LPCB_Pin);
 8001124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001128:	4814      	ldr	r0, [pc, #80]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800112a:	f001 f895 	bl	8002258 <HAL_GPIO_TogglePin>
			cont[0] = 0;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
		}
		if(cont[1] >= 250 && init){
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	2bf9      	cmp	r3, #249	; 0xf9
 800113a:	d906      	bls.n	800114a <HAL_TIM_PeriodElapsedCallback+0x7a>
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_TIM_PeriodElapsedCallback+0x7a>
			/*HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
			HAL_GPIO_TogglePin(LPCB_GPIO_Port, LPCB_Pin);*/
			cont[1]=0;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001146:	2200      	movs	r2, #0
 8001148:	805a      	strh	r2, [r3, #2]
		}
		if(cont[2]>=100 && init){
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800114c:	889b      	ldrh	r3, [r3, #4]
 800114e:	2b63      	cmp	r3, #99	; 0x63
 8001150:	d908      	bls.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x94>
			dados_conv();
 800115a:	f000 f9a1 	bl	80014a0 <dados_conv>
			cont[2] = 0;
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	809a      	strh	r2, [r3, #4]
		}
	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40000400 	.word	0x40000400
 8001170:	20000920 	.word	0x20000920
 8001174:	20000948 	.word	0x20000948
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40011000 	.word	0x40011000

08001180 <initdisp>:
void initdisp(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	OLED_Clear(0);
 8001184:	2000      	movs	r0, #0
 8001186:	f003 fc3b 	bl	8004a00 <OLED_Clear>
	OLED_DrawXBM(0 , 0, logov2);
 800118a:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <initdisp+0x24>)
 800118c:	2100      	movs	r1, #0
 800118e:	2000      	movs	r0, #0
 8001190:	f003 fc49 	bl	8004a26 <OLED_DrawXBM>
	OLED_UpdateScreen();
 8001194:	f003 fe54 	bl	8004e40 <OLED_UpdateScreen>
	HAL_Delay(2500);
 8001198:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800119c:	f000 fd8e 	bl	8001cbc <HAL_Delay>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08009b94 	.word	0x08009b94

080011a8 <media_movel>:
float media_movel(float novo_valor, float *buffer, int *index, float *soma){/*Um filtro de média móvel simples pode ser usado para suavizar os dados brutos e reduzir o ruído. Este filtro calcula a média de um número fixo de medidas recentes.*/
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	//static float soma = 0;					//*O uso do static faz com que a variável mantenha seu valor entre as chamadas da função.*//

	*soma += novo_valor - buffer[*index];	//*Atualizamos a soma adicionando o novo valor medido e subtraindo o valor mais antigo do buffer (aquele no índice atual)*//
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681c      	ldr	r4, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff fcb1 	bl	8000b30 <__aeabi_fsub>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fcae 	bl	8000b34 <__addsf3>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	601a      	str	r2, [r3, #0]
	buffer[*index] = novo_valor;			//*Atualizamos o buffer na posição atual (*index) com o novo valor medido.*//
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	601a      	str	r2, [r3, #0]
	*index = (*index + 1) % NUM_MEDIDAS;	//*Atualizamos o índice para apontar para a próxima posição no buffer, garantindo que ele circule dentro do tamanho do buffer definido por NUM_MEDIDAS. *//
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <media_movel+0x80>)
 80011f6:	fb83 1302 	smull	r1, r3, r3, r2
 80011fa:	4413      	add	r3, r2
 80011fc:	1159      	asrs	r1, r3, #5
 80011fe:	17d3      	asrs	r3, r2, #31
 8001200:	1ac9      	subs	r1, r1, r3
 8001202:	460b      	mov	r3, r1
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	1ad1      	subs	r1, r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6019      	str	r1, [r3, #0]
	//*Usamos o operador % (módulo) para garantir que o índice permaneça dentro dos limites do buffer.*//
	return *soma / NUM_MEDIDAS;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4905      	ldr	r1, [pc, #20]	; (800122c <media_movel+0x84>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe48 	bl	8000eac <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	88888889 	.word	0x88888889
 800122c:	42700000 	.word	0x42700000

08001230 <captura_dados>:
void captura_dados(void){ //*CAPTURA OS DADOS DE ACELERAÇÃO E GIROSCOPIO BRUTOS E APLICA A MEDIA MOVEL *//
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	while (MPU6050_Init(&hi2c1) == 1);
 8001234:	bf00      	nop
 8001236:	4844      	ldr	r0, [pc, #272]	; (8001348 <captura_dados+0x118>)
 8001238:	f003 fe74 	bl	8004f24 <MPU6050_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d0f9      	beq.n	8001236 <captura_dados+0x6>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001242:	4942      	ldr	r1, [pc, #264]	; (800134c <captura_dados+0x11c>)
 8001244:	4840      	ldr	r0, [pc, #256]	; (8001348 <captura_dados+0x118>)
 8001246:	f003 fed3 	bl	8004ff0 <MPU6050_Read_Accel>
	X_DataAC = MPU6050.Ax; //----->
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <captura_dados+0x11c>)
 800124c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc18 	bl	8000a88 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <captura_dados+0x120>)
 800125c:	6013      	str	r3, [r2, #0]
	Y_DataAC = MPU6050.Ay; //----->
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <captura_dados+0x11c>)
 8001260:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fc0e 	bl	8000a88 <__aeabi_d2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4a39      	ldr	r2, [pc, #228]	; (8001354 <captura_dados+0x124>)
 8001270:	6013      	str	r3, [r2, #0]
	Z_DataAC = MPU6050.Az; //----->
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <captura_dados+0x11c>)
 8001274:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fc04 	bl	8000a88 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <captura_dados+0x128>)
 8001284:	6013      	str	r3, [r2, #0]
	X_MedAC = media_movel(X_DataAC, mediamovelXAC, &indexbuffXAC, &somaXAC);
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <captura_dados+0x120>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <captura_dados+0x12c>)
 800128c:	4a34      	ldr	r2, [pc, #208]	; (8001360 <captura_dados+0x130>)
 800128e:	4935      	ldr	r1, [pc, #212]	; (8001364 <captura_dados+0x134>)
 8001290:	f7ff ff8a 	bl	80011a8 <media_movel>
 8001294:	4603      	mov	r3, r0
 8001296:	4a34      	ldr	r2, [pc, #208]	; (8001368 <captura_dados+0x138>)
 8001298:	6013      	str	r3, [r2, #0]
	Y_MedAC = media_movel(Y_DataAC, mediamovelYAC, &indexbuffYAC, &somaYAC);
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <captura_dados+0x124>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <captura_dados+0x13c>)
 80012a0:	4a33      	ldr	r2, [pc, #204]	; (8001370 <captura_dados+0x140>)
 80012a2:	4934      	ldr	r1, [pc, #208]	; (8001374 <captura_dados+0x144>)
 80012a4:	f7ff ff80 	bl	80011a8 <media_movel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <captura_dados+0x148>)
 80012ac:	6013      	str	r3, [r2, #0]
	Z_MedAC = media_movel(Z_DataAC, mediamovelZAC, &indexbuffZAC, &somaZAC);
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <captura_dados+0x128>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <captura_dados+0x14c>)
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <captura_dados+0x150>)
 80012b6:	4933      	ldr	r1, [pc, #204]	; (8001384 <captura_dados+0x154>)
 80012b8:	f7ff ff76 	bl	80011a8 <media_movel>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a32      	ldr	r2, [pc, #200]	; (8001388 <captura_dados+0x158>)
 80012c0:	6013      	str	r3, [r2, #0]
	MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 80012c2:	4922      	ldr	r1, [pc, #136]	; (800134c <captura_dados+0x11c>)
 80012c4:	4820      	ldr	r0, [pc, #128]	; (8001348 <captura_dados+0x118>)
 80012c6:	f003 ff03 	bl	80050d0 <MPU6050_Read_Gyro>
	X_DataGY = MPU6050.Gx; //----->
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <captura_dados+0x11c>)
 80012cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbd8 	bl	8000a88 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a2c      	ldr	r2, [pc, #176]	; (800138c <captura_dados+0x15c>)
 80012dc:	6013      	str	r3, [r2, #0]
	Y_DataGY = MPU6050.Gy; //----->
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <captura_dados+0x11c>)
 80012e0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fbce 	bl	8000a88 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <captura_dados+0x160>)
 80012f0:	6013      	str	r3, [r2, #0]
	Z_DataGY = MPU6050.Gz; //----->
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <captura_dados+0x11c>)
 80012f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fbc4 	bl	8000a88 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <captura_dados+0x164>)
 8001304:	6013      	str	r3, [r2, #0]
	X_MedGY = media_movel(X_DataGY, mediamovelXGY, &indexbuffXGY, &somaXGY);
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <captura_dados+0x15c>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <captura_dados+0x168>)
 800130c:	4a23      	ldr	r2, [pc, #140]	; (800139c <captura_dados+0x16c>)
 800130e:	4924      	ldr	r1, [pc, #144]	; (80013a0 <captura_dados+0x170>)
 8001310:	f7ff ff4a 	bl	80011a8 <media_movel>
 8001314:	4603      	mov	r3, r0
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <captura_dados+0x174>)
 8001318:	6013      	str	r3, [r2, #0]
	Y_MedGY = media_movel(Y_DataGY, mediamovelYGY, &indexbuffYGY, &somaYGY);
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <captura_dados+0x160>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <captura_dados+0x178>)
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <captura_dados+0x17c>)
 8001322:	4923      	ldr	r1, [pc, #140]	; (80013b0 <captura_dados+0x180>)
 8001324:	f7ff ff40 	bl	80011a8 <media_movel>
 8001328:	4603      	mov	r3, r0
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <captura_dados+0x184>)
 800132c:	6013      	str	r3, [r2, #0]
	Z_MedGY = media_movel(Z_DataGY, mediamovelZGY, &indexbuffZGY, &somaZGY);
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <captura_dados+0x164>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <captura_dados+0x188>)
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <captura_dados+0x18c>)
 8001336:	4922      	ldr	r1, [pc, #136]	; (80013c0 <captura_dados+0x190>)
 8001338:	f7ff ff36 	bl	80011a8 <media_movel>
 800133c:	4603      	mov	r3, r0
 800133e:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <captura_dados+0x194>)
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000294 	.word	0x20000294
 800134c:	200009a0 	.word	0x200009a0
 8001350:	200008d0 	.word	0x200008d0
 8001354:	200008d4 	.word	0x200008d4
 8001358:	200008d8 	.word	0x200008d8
 800135c:	200008e8 	.word	0x200008e8
 8001360:	20000930 	.word	0x20000930
 8001364:	20000330 	.word	0x20000330
 8001368:	20000900 	.word	0x20000900
 800136c:	200008ec 	.word	0x200008ec
 8001370:	20000934 	.word	0x20000934
 8001374:	20000420 	.word	0x20000420
 8001378:	20000904 	.word	0x20000904
 800137c:	200008f0 	.word	0x200008f0
 8001380:	20000938 	.word	0x20000938
 8001384:	20000510 	.word	0x20000510
 8001388:	20000908 	.word	0x20000908
 800138c:	200008dc 	.word	0x200008dc
 8001390:	200008e0 	.word	0x200008e0
 8001394:	200008e4 	.word	0x200008e4
 8001398:	200008f4 	.word	0x200008f4
 800139c:	2000093c 	.word	0x2000093c
 80013a0:	20000600 	.word	0x20000600
 80013a4:	2000090c 	.word	0x2000090c
 80013a8:	200008f8 	.word	0x200008f8
 80013ac:	20000940 	.word	0x20000940
 80013b0:	200006f0 	.word	0x200006f0
 80013b4:	20000910 	.word	0x20000910
 80013b8:	200008fc 	.word	0x200008fc
 80013bc:	20000944 	.word	0x20000944
 80013c0:	200007e0 	.word	0x200007e0
 80013c4:	20000914 	.word	0x20000914

080013c8 <roll_angle>:
float roll_angle(float acc_x, float acc_y, float acc_z) { //CALCULA O ANGULO COM OS VALORES FILTRADOS PELA MEDIA MOVEL
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	return atan2(acc_y, acc_z) * RAD_TO_DEG;
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f7ff f827 	bl	8000428 <__aeabi_f2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f822 	bl	8000428 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f006 ff4a 	bl	8008284 <atan2>
 80013f0:	a307      	add	r3, pc, #28	; (adr r3, 8001410 <roll_angle+0x48>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f86f 	bl	80004d8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb41 	bl	8000a88 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	1af05a77 	.word	0x1af05a77
 8001414:	404ca5dc 	.word	0x404ca5dc

08001418 <pitch_angle>:
float pitch_angle(float acc_x, float acc_y, float acc_z) {//CALCULA O ANGULO COM OS VALORES FILTRADOS PELA MEDIA MOVEL
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	return atan2(-acc_x, sqrt(acc_y * acc_y + acc_z * acc_z)) * RAD_TO_DEG;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fffc 	bl	8000428 <__aeabi_f2d>
 8001430:	4604      	mov	r4, r0
 8001432:	460d      	mov	r5, r1
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f7ff fc84 	bl	8000d44 <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	461e      	mov	r6, r3
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc7e 	bl	8000d44 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4630      	mov	r0, r6
 800144e:	f7ff fb71 	bl	8000b34 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffe7 	bl	8000428 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f006 ff11 	bl	8008288 <sqrt>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f006 ff09 	bl	8008284 <atan2>
 8001472:	a309      	add	r3, pc, #36	; (adr r3, 8001498 <pitch_angle+0x80>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f82e 	bl	80004d8 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb00 	bl	8000a88 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	1af05a77 	.word	0x1af05a77
 800149c:	404ca5dc 	.word	0x404ca5dc

080014a0 <dados_conv>:
void dados_conv(void){
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af02      	add	r7, sp, #8
	roll = roll_angle(X_MedAC, Y_MedAC, Z_MedAC);
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <dados_conv+0xe0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a36      	ldr	r2, [pc, #216]	; (8001584 <dados_conv+0xe4>)
 80014ac:	6811      	ldr	r1, [r2, #0]
 80014ae:	4a36      	ldr	r2, [pc, #216]	; (8001588 <dados_conv+0xe8>)
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff88 	bl	80013c8 <roll_angle>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a34      	ldr	r2, [pc, #208]	; (800158c <dados_conv+0xec>)
 80014bc:	6013      	str	r3, [r2, #0]
	pitch = pitch_angle(X_MedAC, Y_MedAC, Z_MedAC);
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <dados_conv+0xe0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a30      	ldr	r2, [pc, #192]	; (8001584 <dados_conv+0xe4>)
 80014c4:	6811      	ldr	r1, [r2, #0]
 80014c6:	4a30      	ldr	r2, [pc, #192]	; (8001588 <dados_conv+0xe8>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffa4 	bl	8001418 <pitch_angle>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <dados_conv+0xf0>)
 80014d4:	6013      	str	r3, [r2, #0]
	kalman_calc(X_MedGY, Y_MedGY, roll, pitch, &MPU6050);
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <dados_conv+0xf4>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <dados_conv+0xf8>)
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <dados_conv+0xec>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <dados_conv+0xf0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4c2d      	ldr	r4, [pc, #180]	; (800159c <dados_conv+0xfc>)
 80014e8:	9400      	str	r4, [sp, #0]
 80014ea:	f003 fe61 	bl	80051b0 <kalman_calc>
	sprintf(eixox,"Eixo x: %.1f*", MPU6050.KalmanAngleX);
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <dados_conv+0xfc>)
 80014f0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80014f4:	492a      	ldr	r1, [pc, #168]	; (80015a0 <dados_conv+0x100>)
 80014f6:	482b      	ldr	r0, [pc, #172]	; (80015a4 <dados_conv+0x104>)
 80014f8:	f004 fd76 	bl	8005fe8 <siprintf>
	sprintf(eixoy,"Eixo y: %.1f*", MPU6050.KalmanAngleY);
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <dados_conv+0xfc>)
 80014fe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001502:	4929      	ldr	r1, [pc, #164]	; (80015a8 <dados_conv+0x108>)
 8001504:	4829      	ldr	r0, [pc, #164]	; (80015ac <dados_conv+0x10c>)
 8001506:	f004 fd6f 	bl	8005fe8 <siprintf>
	sprintf(eixoR,"ROLL x: %.1f°", roll);
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <dados_conv+0xec>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff8a 	bl	8000428 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4925      	ldr	r1, [pc, #148]	; (80015b0 <dados_conv+0x110>)
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <dados_conv+0x114>)
 800151c:	f004 fd64 	bl	8005fe8 <siprintf>
	sprintf(eixoP,"PITCH y: %.1f°", pitch);
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <dados_conv+0xf0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <dados_conv+0x118>)
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <dados_conv+0x11c>)
 8001532:	f004 fd59 	bl	8005fe8 <siprintf>
	OLED_Clear(0);
 8001536:	2000      	movs	r0, #0
 8001538:	f003 fa62 	bl	8004a00 <OLED_Clear>
	FontSet(Lucida_12);
 800153c:	4820      	ldr	r0, [pc, #128]	; (80015c0 <dados_conv+0x120>)
 800153e:	f003 fcc5 	bl	8004ecc <FontSet>
	OLED_DrawStr(eixox, 1, 1, 1);
 8001542:	2301      	movs	r3, #1
 8001544:	2201      	movs	r2, #1
 8001546:	2101      	movs	r1, #1
 8001548:	4816      	ldr	r0, [pc, #88]	; (80015a4 <dados_conv+0x104>)
 800154a:	f003 fc11 	bl	8004d70 <OLED_DrawStr>
	OLED_DrawStr(eixoy, 1, 18, 1);
 800154e:	2301      	movs	r3, #1
 8001550:	2212      	movs	r2, #18
 8001552:	2101      	movs	r1, #1
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <dados_conv+0x10c>)
 8001556:	f003 fc0b 	bl	8004d70 <OLED_DrawStr>
	OLED_DrawStr(eixoR, 1, 35, 1);
 800155a:	2301      	movs	r3, #1
 800155c:	2223      	movs	r2, #35	; 0x23
 800155e:	2101      	movs	r1, #1
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <dados_conv+0x114>)
 8001562:	f003 fc05 	bl	8004d70 <OLED_DrawStr>
	OLED_DrawStr(eixoP, 1, 50, 1);
 8001566:	2301      	movs	r3, #1
 8001568:	2232      	movs	r2, #50	; 0x32
 800156a:	2101      	movs	r1, #1
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <dados_conv+0x11c>)
 800156e:	f003 fbff 	bl	8004d70 <OLED_DrawStr>
	OLED_UpdateScreen();
 8001572:	f003 fc65 	bl	8004e40 <OLED_UpdateScreen>
}
 8001576:	bf00      	nop
 8001578:	3704      	adds	r7, #4
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	20000900 	.word	0x20000900
 8001584:	20000904 	.word	0x20000904
 8001588:	20000908 	.word	0x20000908
 800158c:	20000918 	.word	0x20000918
 8001590:	2000091c 	.word	0x2000091c
 8001594:	2000090c 	.word	0x2000090c
 8001598:	20000910 	.word	0x20000910
 800159c:	200009a0 	.word	0x200009a0
 80015a0:	08008958 	.word	0x08008958
 80015a4:	2000094c 	.word	0x2000094c
 80015a8:	08008968 	.word	0x08008968
 80015ac:	20000960 	.word	0x20000960
 80015b0:	08008978 	.word	0x08008978
 80015b4:	20000974 	.word	0x20000974
 80015b8:	08008988 	.word	0x08008988
 80015bc:	20000988 	.word	0x20000988
 80015c0:	080089c4 	.word	0x080089c4

080015c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015c8:	f000 fb16 	bl	8001bf8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015cc:	f000 f82a 	bl	8001624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015d0:	f000 f8ea 	bl	80017a8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80015d4:	f000 f86c 	bl	80016b0 <MX_I2C1_Init>
	MX_TIM3_Init();
 80015d8:	f000 f898 	bl	800170c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3); //INCIA TIMER3 COM INTERRUPÇÃO NO OVERFLO
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <main+0x54>)
 80015de:	f002 fda9 	bl	8004134 <HAL_TIM_Base_Start_IT>
	while (MPU6050_Init(&hi2c1) == 1);
 80015e2:	bf00      	nop
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <main+0x58>)
 80015e6:	f003 fc9d 	bl	8004f24 <MPU6050_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d0f9      	beq.n	80015e4 <main+0x20>
	OLED_Init(&hi2c1); //INICIANDO DISPLAY PELA I2C
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <main+0x58>)
 80015f2:	f003 f99d 	bl	8004930 <OLED_Init>
	/*------------------------------------------------------*/
	OLED_Clear(0);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f003 fa02 	bl	8004a00 <OLED_Clear>
	OLED_UpdateScreen();
 80015fc:	f003 fc20 	bl	8004e40 <OLED_UpdateScreen>
	initdisp();
 8001600:	f7ff fdbe 	bl	8001180 <initdisp>
	OLED_Clear(0);
 8001604:	2000      	movs	r0, #0
 8001606:	f003 f9fb 	bl	8004a00 <OLED_Clear>
	OLED_UpdateScreen();
 800160a:	f003 fc19 	bl	8004e40 <OLED_UpdateScreen>
	init = 1;
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <main+0x5c>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001614:	e7fe      	b.n	8001614 <main+0x50>
 8001616:	bf00      	nop
 8001618:	200002e8 	.word	0x200002e8
 800161c:	20000294 	.word	0x20000294
 8001620:	20000948 	.word	0x20000948

08001624 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b090      	sub	sp, #64	; 0x40
 8001628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2228      	movs	r2, #40	; 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fd3b 	bl	80060ae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001646:	2301      	movs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	2302      	movs	r3, #2
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001662:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f915 	bl	800389c <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8001678:	f000 f904 	bl	8001884 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2102      	movs	r1, #2
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fb82 	bl	8003da0 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80016a2:	f000 f8ef 	bl	8001884 <Error_Handler>
	}
}
 80016a6:	bf00      	nop
 80016a8:	3740      	adds	r7, #64	; 0x40
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f000 fdcd 	bl	800228c <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80016f8:	f000 f8c4 	bl	8001884 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000294 	.word	0x20000294
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM3_Init+0x94>)
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <MX_TIM3_Init+0x98>)
 800172c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 287;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001730:	f240 121f 	movw	r2, #287	; 0x11f
 8001734:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 249;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM3_Init+0x94>)
 800173e:	22f9      	movs	r2, #249	; 0xf9
 8001740:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM3_Init+0x94>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001750:	f002 fca0 	bl	8004094 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800175a:	f000 f893 	bl	8001884 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM3_Init+0x94>)
 800176c:	f002 fe3c 	bl	80043e8 <HAL_TIM_ConfigClockSource>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8001776:	f000 f885 	bl	8001884 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001788:	f003 f812 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8001792:	f000 f877 	bl	8001884 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002e8 	.word	0x200002e8
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a27      	ldr	r2, [pc, #156]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_GPIO_Init+0xd0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <MX_GPIO_Init+0xd0>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_GPIO_Init+0xd0>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LPCB_GPIO_Port, LPCB_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4816      	ldr	r0, [pc, #88]	; (800187c <MX_GPIO_Init+0xd4>)
 8001824:	f000 fd00 	bl	8002228 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_GPIO_Init+0xd8>)
 8001830:	f000 fcfa 	bl	8002228 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LPCB_Pin */
	GPIO_InitStruct.Pin = LPCB_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800183a:	2311      	movs	r3, #17
 800183c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LPCB_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <MX_GPIO_Init+0xd4>)
 800184e:	f000 fb67 	bl	8001f20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD1_Pin */
	GPIO_InitStruct.Pin = LD1_Pin;
 8001852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001856:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001858:	2311      	movs	r3, #17
 800185a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_GPIO_Init+0xd8>)
 800186c:	f000 fb58 	bl	8001f20 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	40011000 	.word	0x40011000
 8001880:	40010c00 	.word	0x40010c00

08001884 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <HAL_MspInit+0x5c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_MspInit+0x5c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x60>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_MspInit+0x60>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0x70>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d123      	bne.n	800195c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_I2C_MspInit+0x74>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001930:	2312      	movs	r3, #18
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480b      	ldr	r0, [pc, #44]	; (800196c <HAL_I2C_MspInit+0x78>)
 8001940:	f000 faee 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_I2C_MspInit+0x74>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_I2C_MspInit+0x74>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010c00 	.word	0x40010c00

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_TIM_Base_MspInit+0x44>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d113      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	201d      	movs	r0, #29
 80019a0:	f000 fa87 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019a4:	201d      	movs	r0, #29
 80019a6:	f000 faa0 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40021000 	.word	0x40021000

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f93f 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM3_IRQHandler+0x10>)
 8001a12:	f002 fbe1 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002e8 	.word	0x200002e8

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <_kill>:

int _kill(int pid, int sig)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a38:	f004 fb8c 	bl	8006154 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2216      	movs	r2, #22
 8001a40:	601a      	str	r2, [r3, #0]
  return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_exit>:

void _exit (int status)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a56:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffe7 	bl	8001a2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a60:	e7fe      	b.n	8001a60 <_exit+0x12>

08001a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e00a      	b.n	8001a8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a74:	f3af 8000 	nop.w
 8001a78:	4601      	mov	r1, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbf0      	blt.n	8001a74 <_read+0x12>
  }

  return len;
 8001a92:	687b      	ldr	r3, [r7, #4]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e009      	b.n	8001ac2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf1      	blt.n	8001aae <_write+0x12>
  }
  return len;
 8001aca:	687b      	ldr	r3, [r7, #4]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_close>:

int _close(int file)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
  return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <_isatty>:

int _isatty(int file)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f004 faf6 	bl	8006154 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20005000 	.word	0x20005000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200009f8 	.word	0x200009f8
 8001b9c:	20001368 	.word	0x20001368

08001ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bac:	f7ff fff8 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bb2:	490c      	ldr	r1, [pc, #48]	; (8001be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc8:	4c09      	ldr	r4, [pc, #36]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f004 fac3 	bl	8006160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff fcf3 	bl	80015c4 <main>
  bx lr
 8001bde:	4770      	bx	lr
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001be8:	0800a380 	.word	0x0800a380
  ldr r2, =_sbss
 8001bec:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001bf0:	20001368 	.word	0x20001368

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f947 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fe3c 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f95f 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f927 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x1c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200009fc 	.word	0x200009fc

08001ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_GetTick+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	200009fc 	.word	0x200009fc

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff fff0 	bl	8001ca8 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff ffe0 	bl	8001ca8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <__NVIC_EnableIRQ+0x34>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff2d 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff42 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff35 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b08b      	sub	sp, #44	; 0x2c
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f32:	e169      	b.n	8002208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f34:	2201      	movs	r2, #1
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8158 	bne.w	8002202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a9a      	ldr	r2, [pc, #616]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d05e      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f5c:	4a98      	ldr	r2, [pc, #608]	; (80021c0 <HAL_GPIO_Init+0x2a0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d875      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f62:	4a98      	ldr	r2, [pc, #608]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d058      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f68:	4a96      	ldr	r2, [pc, #600]	; (80021c4 <HAL_GPIO_Init+0x2a4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d86f      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f6e:	4a96      	ldr	r2, [pc, #600]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d052      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f74:	4a94      	ldr	r2, [pc, #592]	; (80021c8 <HAL_GPIO_Init+0x2a8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d869      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f7a:	4a94      	ldr	r2, [pc, #592]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04c      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f80:	4a92      	ldr	r2, [pc, #584]	; (80021cc <HAL_GPIO_Init+0x2ac>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d863      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f86:	4a92      	ldr	r2, [pc, #584]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d046      	beq.n	800201a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a90      	ldr	r2, [pc, #576]	; (80021d0 <HAL_GPIO_Init+0x2b0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d85d      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d82a      	bhi.n	8001fec <HAL_GPIO_Init+0xcc>
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d859      	bhi.n	800204e <HAL_GPIO_Init+0x12e>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_GPIO_Init+0x80>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	0800201b 	.word	0x0800201b
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08002007 	.word	0x08002007
 8001fac:	08002049 	.word	0x08002049
 8001fb0:	0800204f 	.word	0x0800204f
 8001fb4:	0800204f 	.word	0x0800204f
 8001fb8:	0800204f 	.word	0x0800204f
 8001fbc:	0800204f 	.word	0x0800204f
 8001fc0:	0800204f 	.word	0x0800204f
 8001fc4:	0800204f 	.word	0x0800204f
 8001fc8:	0800204f 	.word	0x0800204f
 8001fcc:	0800204f 	.word	0x0800204f
 8001fd0:	0800204f 	.word	0x0800204f
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	0800204f 	.word	0x0800204f
 8001fdc:	0800204f 	.word	0x0800204f
 8001fe0:	0800204f 	.word	0x0800204f
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002011 	.word	0x08002011
 8001fec:	4a79      	ldr	r2, [pc, #484]	; (80021d4 <HAL_GPIO_Init+0x2b4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ff2:	e02c      	b.n	800204e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e029      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e024      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	3308      	adds	r3, #8
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e01f      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	330c      	adds	r3, #12
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	e01a      	b.n	8002050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002022:	2304      	movs	r3, #4
 8002024:	623b      	str	r3, [r7, #32]
          break;
 8002026:	e013      	b.n	8002050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	611a      	str	r2, [r3, #16]
          break;
 800203a:	e009      	b.n	8002050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	615a      	str	r2, [r3, #20]
          break;
 8002046:	e003      	b.n	8002050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x130>
          break;
 800204e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d801      	bhi.n	800205a <HAL_GPIO_Init+0x13a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	e001      	b.n	800205e <HAL_GPIO_Init+0x13e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2bff      	cmp	r3, #255	; 0xff
 8002064:	d802      	bhi.n	800206c <HAL_GPIO_Init+0x14c>
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x152>
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3b08      	subs	r3, #8
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	210f      	movs	r1, #15
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	401a      	ands	r2, r3
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80b1 	beq.w	8002202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020a0:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_GPIO_Init+0x2b8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_GPIO_Init+0x2b8>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_GPIO_Init+0x2b8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b8:	4a48      	ldr	r2, [pc, #288]	; (80021dc <HAL_GPIO_Init+0x2bc>)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <HAL_GPIO_Init+0x2c0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_GPIO_Init+0x1ec>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3f      	ldr	r2, [pc, #252]	; (80021e4 <HAL_GPIO_Init+0x2c4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00d      	beq.n	8002108 <HAL_GPIO_Init+0x1e8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <HAL_GPIO_Init+0x2c8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <HAL_GPIO_Init+0x1e4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3d      	ldr	r2, [pc, #244]	; (80021ec <HAL_GPIO_Init+0x2cc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_GPIO_Init+0x1e0>
 80020fc:	2303      	movs	r3, #3
 80020fe:	e006      	b.n	800210e <HAL_GPIO_Init+0x1ee>
 8002100:	2304      	movs	r3, #4
 8002102:	e004      	b.n	800210e <HAL_GPIO_Init+0x1ee>
 8002104:	2302      	movs	r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_Init+0x1ee>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_GPIO_Init+0x1ee>
 800210c:	2300      	movs	r3, #0
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	4093      	lsls	r3, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211e:	492f      	ldr	r1, [pc, #188]	; (80021dc <HAL_GPIO_Init+0x2bc>)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	492c      	ldr	r1, [pc, #176]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	43db      	mvns	r3, r3
 800214e:	4928      	ldr	r1, [pc, #160]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002150:	4013      	ands	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	491e      	ldr	r1, [pc, #120]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002178:	4013      	ands	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4918      	ldr	r1, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4914      	ldr	r1, [pc, #80]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d021      	beq.n	80021f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e021      	b.n	8002202 <HAL_GPIO_Init+0x2e2>
 80021be:	bf00      	nop
 80021c0:	10320000 	.word	0x10320000
 80021c4:	10310000 	.word	0x10310000
 80021c8:	10220000 	.word	0x10220000
 80021cc:	10210000 	.word	0x10210000
 80021d0:	10120000 	.word	0x10120000
 80021d4:	10110000 	.word	0x10110000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40010800 	.word	0x40010800
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40011400 	.word	0x40011400
 80021f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_GPIO_Init+0x304>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4909      	ldr	r1, [pc, #36]	; (8002224 <HAL_GPIO_Init+0x304>)
 80021fe:	4013      	ands	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	3301      	adds	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	f47f ae8e 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	372c      	adds	r7, #44	; 0x2c
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40010400 	.word	0x40010400

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43d9      	mvns	r1, r3
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e12b      	b.n	80024f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fb1e 	bl	80018f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f0:	f001 fe9e 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 80022f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a81      	ldr	r2, [pc, #516]	; (8002500 <HAL_I2C_Init+0x274>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d807      	bhi.n	8002310 <HAL_I2C_Init+0x84>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a80      	ldr	r2, [pc, #512]	; (8002504 <HAL_I2C_Init+0x278>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e006      	b.n	800231e <HAL_I2C_Init+0x92>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a7d      	ldr	r2, [pc, #500]	; (8002508 <HAL_I2C_Init+0x27c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0e7      	b.n	80024f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a78      	ldr	r2, [pc, #480]	; (800250c <HAL_I2C_Init+0x280>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9b      	lsrs	r3, r3, #18
 8002330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a6a      	ldr	r2, [pc, #424]	; (8002500 <HAL_I2C_Init+0x274>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d802      	bhi.n	8002360 <HAL_I2C_Init+0xd4>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	e009      	b.n	8002374 <HAL_I2C_Init+0xe8>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_I2C_Init+0x284>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	3301      	adds	r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	495c      	ldr	r1, [pc, #368]	; (8002500 <HAL_I2C_Init+0x274>)
 8002390:	428b      	cmp	r3, r1
 8002392:	d819      	bhi.n	80023c8 <HAL_I2C_Init+0x13c>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e59      	subs	r1, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a2:	1c59      	adds	r1, r3, #1
 80023a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a8:	400b      	ands	r3, r1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_I2C_Init+0x138>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e59      	subs	r1, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	e051      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 80023c4:	2304      	movs	r3, #4
 80023c6:	e04f      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d111      	bne.n	80023f4 <HAL_I2C_Init+0x168>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e012      	b.n	800241a <HAL_I2C_Init+0x18e>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	0099      	lsls	r1, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Init+0x196>
 800241e:	2301      	movs	r3, #1
 8002420:	e022      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_I2C_Init+0x1bc>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e58      	subs	r0, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	440b      	add	r3, r1
 8002438:	fbb0 f3f3 	udiv	r3, r0, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Init+0x1dc>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e58      	subs	r0, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	0099      	lsls	r1, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	6809      	ldr	r1, [r1, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6911      	ldr	r1, [r2, #16]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	000186a0 	.word	0x000186a0
 8002504:	001e847f 	.word	0x001e847f
 8002508:	003d08ff 	.word	0x003d08ff
 800250c:	431bde83 	.word	0x431bde83
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	460b      	mov	r3, r1
 8002522:	817b      	strh	r3, [r7, #10]
 8002524:	4613      	mov	r3, r2
 8002526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fbbe 	bl	8001ca8 <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	f040 80e0 	bne.w	80026fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2319      	movs	r3, #25
 8002542:	2201      	movs	r2, #1
 8002544:	4970      	ldr	r1, [pc, #448]	; (8002708 <HAL_I2C_Master_Transmit+0x1f4>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 ff72 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	e0d3      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x50>
 8002560:	2302      	movs	r3, #2
 8002562:	e0cc      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d007      	beq.n	800258a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2210      	movs	r2, #16
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	893a      	ldrh	r2, [r7, #8]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_I2C_Master_Transmit+0x1f8>)
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fd2c 	bl	8003030 <I2C_MasterRequestWrite>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08d      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025f8:	e066      	b.n	80026c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f001 f830 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b04      	cmp	r3, #4
 8002610:	d107      	bne.n	8002622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06b      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b04      	cmp	r3, #4
 8002662:	d11b      	bne.n	800269c <HAL_I2C_Master_Transmit+0x188>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	d017      	beq.n	800269c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6a39      	ldr	r1, [r7, #32]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f001 f827 	bl	80036f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e01a      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d194      	bne.n	80025fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	00100002 	.word	0x00100002
 800270c:	ffff0000 	.word	0xffff0000

08002710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800272a:	f7ff fabd 	bl	8001ca8 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	f040 80d9 	bne.w	80028f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2319      	movs	r3, #25
 8002744:	2201      	movs	r2, #1
 8002746:	496d      	ldr	r1, [pc, #436]	; (80028fc <HAL_I2C_Mem_Write+0x1ec>)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fe71 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
 8002756:	e0cc      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_I2C_Mem_Write+0x56>
 8002762:	2302      	movs	r3, #2
 8002764:	e0c5      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d007      	beq.n	800278c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_I2C_Mem_Write+0x1f0>)
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ce:	88f8      	ldrh	r0, [r7, #6]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4603      	mov	r3, r0
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fca8 	bl	8003134 <I2C_RequestMemoryWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d052      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e081      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 ff36 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b04      	cmp	r3, #4
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06b      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11b      	bne.n	8002890 <HAL_I2C_Mem_Write+0x180>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1aa      	bne.n	80027ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 ff29 	bl	80036f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e016      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	00100002 	.word	0x00100002
 8002900:	ffff0000 	.word	0xffff0000

08002904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002922:	f7ff f9c1 	bl	8001ca8 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	f040 8244 	bne.w	8002dbe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2319      	movs	r3, #25
 800293c:	2201      	movs	r2, #1
 800293e:	4982      	ldr	r1, [pc, #520]	; (8002b48 <HAL_I2C_Mem_Read+0x244>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fd75 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
 800294e:	e237      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_I2C_Mem_Read+0x5a>
 800295a:	2302      	movs	r3, #2
 800295c:	e230      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2222      	movs	r2, #34	; 0x22
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a62      	ldr	r2, [pc, #392]	; (8002b4c <HAL_I2C_Mem_Read+0x248>)
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c6:	88f8      	ldrh	r0, [r7, #6]
 80029c8:	893a      	ldrh	r2, [r7, #8]
 80029ca:	8979      	ldrh	r1, [r7, #10]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4603      	mov	r3, r0
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fc42 	bl	8003260 <I2C_RequestMemoryRead>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1ec      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d113      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e1c0      	b.n	8002d98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d11e      	bne.n	8002a5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2e:	b672      	cpsid	i
}
 8002a30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a58:	b662      	cpsie	i
}
 8002a5a:	e035      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11e      	bne.n	8002aa2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
}
 8002a76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a9e:	b662      	cpsie	i
}
 8002aa0:	e012      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ac8:	e166      	b.n	8002d98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	f200 811f 	bhi.w	8002d12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d123      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fe4f 	bl	8003784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e167      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b22:	e139      	b.n	8002d98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d152      	bne.n	8002bd2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	2200      	movs	r2, #0
 8002b34:	4906      	ldr	r1, [pc, #24]	; (8002b50 <HAL_I2C_Mem_Read+0x24c>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fc7a 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e13c      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
 8002b46:	bf00      	nop
 8002b48:	00100002 	.word	0x00100002
 8002b4c:	ffff0000 	.word	0xffff0000
 8002b50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b54:	b672      	cpsid	i
}
 8002b56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9a:	b662      	cpsie	i
}
 8002b9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd0:	e0e2      	b.n	8002d98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2200      	movs	r2, #0
 8002bda:	497b      	ldr	r1, [pc, #492]	; (8002dc8 <HAL_I2C_Mem_Read+0x4c4>)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fc27 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0e9      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c32:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_I2C_Mem_Read+0x4c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	4a65      	ldr	r2, [pc, #404]	; (8002dd0 <HAL_I2C_Mem_Read+0x4cc>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0a1a      	lsrs	r2, r3, #8
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00da      	lsls	r2, r3, #3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d118      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7a:	b662      	cpsie	i
}
 8002c7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e09a      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d1d9      	bne.n	8002c4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cda:	b662      	cpsie	i
}
 8002cdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d10:	e042      	b.n	8002d98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fd34 	bl	8003784 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e04c      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d118      	bne.n	8002d98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f ae94 	bne.w	8002aca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010004 	.word	0x00010004
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	14f8b589 	.word	0x14f8b589

08002dd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7fe ff60 	bl	8001ca8 <HAL_GetTick>
 8002de8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 8111 	bne.w	800301e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	4988      	ldr	r1, [pc, #544]	; (8003028 <HAL_I2C_IsDeviceReady+0x254>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fb12 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e104      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_I2C_IsDeviceReady+0x50>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0fd      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d007      	beq.n	8002e4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2224      	movs	r2, #36	; 0x24
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a70      	ldr	r2, [pc, #448]	; (800302c <HAL_I2C_IsDeviceReady+0x258>)
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fad0 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea4:	d103      	bne.n	8002eae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0b6      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fef1 	bl	8001ca8 <HAL_GetTick>
 8002ec6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ef6:	e025      	b.n	8002f44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7fe fed6 	bl	8001ca8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <HAL_I2C_IsDeviceReady+0x13a>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d103      	bne.n	8002f16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2ba0      	cmp	r3, #160	; 0xa0
 8002f4e:	d005      	beq.n	8002f5c <HAL_I2C_IsDeviceReady+0x188>
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_I2C_IsDeviceReady+0x188>
 8002f56:	7dbb      	ldrb	r3, [r7, #22]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0cd      	beq.n	8002ef8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d129      	bne.n	8002fc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2319      	movs	r3, #25
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4921      	ldr	r1, [pc, #132]	; (8003028 <HAL_I2C_IsDeviceReady+0x254>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa44 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e036      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e02c      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2319      	movs	r3, #25
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	490f      	ldr	r1, [pc, #60]	; (8003028 <HAL_I2C_IsDeviceReady+0x254>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa20 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e012      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	f4ff af32 	bcc.w	8002e6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	00100002 	.word	0x00100002
 800302c:	ffff0000 	.word	0xffff0000

08003030 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d006      	beq.n	800305a <I2C_MasterRequestWrite+0x2a>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d003      	beq.n	800305a <I2C_MasterRequestWrite+0x2a>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003058:	d108      	bne.n	800306c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e00b      	b.n	8003084 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	2b12      	cmp	r3, #18
 8003072:	d107      	bne.n	8003084 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003082:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f9cd 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	d103      	bne.n	80030b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e035      	b.n	8003124 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c0:	d108      	bne.n	80030d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d0:	611a      	str	r2, [r3, #16]
 80030d2:	e01b      	b.n	800310c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	11db      	asrs	r3, r3, #7
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0306 	and.w	r3, r3, #6
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f063 030f 	orn	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <I2C_MasterRequestWrite+0xfc>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa16 	bl	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e010      	b.n	8003124 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4907      	ldr	r1, [pc, #28]	; (8003130 <I2C_MasterRequestWrite+0x100>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa06 	bl	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	00010008 	.word	0x00010008
 8003130:	00010002 	.word	0x00010002

08003134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2200      	movs	r2, #0
 8003166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f960 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d103      	bne.n	800318e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e05f      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	492d      	ldr	r1, [pc, #180]	; (800325c <I2C_RequestMemoryWrite+0x128>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f9bb 	bl	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e04c      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa46 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d107      	bne.n	80031f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02b      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	e021      	b.n	8003250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa20 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e005      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003246:	893b      	ldrh	r3, [r7, #8]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	00010002 	.word	0x00010002

08003260 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	4603      	mov	r3, r0
 8003270:	817b      	strh	r3, [r7, #10]
 8003272:	460b      	mov	r3, r1
 8003274:	813b      	strh	r3, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8c2 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d103      	bne.n	80032ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0aa      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	4952      	ldr	r1, [pc, #328]	; (800342c <I2C_RequestMemoryRead+0x1cc>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f91d 	bl	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e097      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f9a8 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e076      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e021      	b.n	800338c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f982 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e050      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f967 	bl	8003664 <I2C_WaitOnTXEFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d107      	bne.n	80033b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e035      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f82b 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d103      	bne.n	80033f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e013      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6a3a      	ldr	r2, [r7, #32]
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <I2C_RequestMemoryRead+0x1cc>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f886 	bl	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00010002 	.word	0x00010002

08003430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003440:	e048      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d044      	beq.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fc2d 	bl	8001ca8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d139      	bne.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10d      	bne.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x56>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	e00c      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	43da      	mvns	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d116      	bne.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e023      	b.n	800351c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10d      	bne.n	80034fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	e00c      	b.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	429a      	cmp	r2, r3
 8003518:	d093      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003532:	e071      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d123      	bne.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e067      	b.n	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d041      	beq.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fe fb88 	bl	8001ca8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d136      	bne.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10c      	bne.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e00b      	b.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e021      	b.n	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10c      	bne.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e00b      	b.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f af6d 	bne.w	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003670:	e034      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8e3 	bl	800383e <I2C_IsAcknowledgeFailed>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e034      	b.n	80036ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d028      	beq.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe fb0d 	bl	8001ca8 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d016      	beq.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d1c3      	bne.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003700:	e034      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f89b 	bl	800383e <I2C_IsAcknowledgeFailed>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e034      	b.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d028      	beq.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe fac5 	bl	8001ca8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11d      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d016      	beq.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d1c3      	bne.n	8003702 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003790:	e049      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d119      	bne.n	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0210 	mvn.w	r2, #16
 80037a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e030      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fe fa68 	bl	8001ca8 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d016      	beq.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e007      	b.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d1ae      	bne.n	8003792 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d11b      	bne.n	800388e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800385e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
	...

0800389c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e272      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8087 	beq.w	80039ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038bc:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d00c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d112      	bne.n	80038fa <HAL_RCC_OscConfig+0x5e>
 80038d4:	4b8c      	ldr	r3, [pc, #560]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d10b      	bne.n	80038fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e2:	4b89      	ldr	r3, [pc, #548]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d06c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x12c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d168      	bne.n	80039c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e24c      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x76>
 8003904:	4b80      	ldr	r3, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a7f      	ldr	r2, [pc, #508]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e02e      	b.n	8003970 <HAL_RCC_OscConfig+0xd4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x98>
 800391a:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a77      	ldr	r2, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800392c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xd4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0xbc>
 800393e:	4b72      	ldr	r3, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a71      	ldr	r2, [pc, #452]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xd4>
 8003958:	4b6b      	ldr	r3, [pc, #428]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6a      	ldr	r2, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b68      	ldr	r3, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a67      	ldr	r2, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fe f996 	bl	8001ca8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe f992 	bl	8001ca8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e200      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b5d      	ldr	r3, [pc, #372]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xe4>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe f982 	bl	8001ca8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe f97e 	bl	8001ca8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1ec      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x10c>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d063      	beq.n	8003a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d6:	4b4c      	ldr	r3, [pc, #304]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039e2:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x18c>
 80039ee:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x176>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1c0      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4939      	ldr	r1, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e03a      	b.n	8003a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fe f937 	bl	8001ca8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a3e:	f7fe f933 	bl	8001ca8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1a1      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4927      	ldr	r1, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
 8003a70:	e015      	b.n	8003a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe f916 	bl	8001ca8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a80:	f7fe f912 	bl	8001ca8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e180      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03a      	beq.n	8003b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe f8f6 	bl	8001ca8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe f8f2 	bl	8001ca8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e160      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f000 faba 	bl	8004058 <RCC_Delay>
 8003ae4:	e01c      	b.n	8003b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fe f8dc 	bl	8001ca8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af2:	e00f      	b.n	8003b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe f8d8 	bl	8001ca8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d908      	bls.n	8003b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e146      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	42420000 	.word	0x42420000
 8003b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e9      	bne.n	8003af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80a6 	beq.w	8003c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4a87      	ldr	r2, [pc, #540]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	61d3      	str	r3, [r2, #28]
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <HAL_RCC_OscConfig+0x4c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b7f      	ldr	r3, [pc, #508]	; (8003d64 <HAL_RCC_OscConfig+0x4c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7e      	ldr	r2, [pc, #504]	; (8003d64 <HAL_RCC_OscConfig+0x4c8>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe f899 	bl	8001ca8 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe f895 	bl	8001ca8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b64      	cmp	r3, #100	; 0x64
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e103      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <HAL_RCC_OscConfig+0x4c8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x312>
 8003ba0:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6213      	str	r3, [r2, #32]
 8003bac:	e02d      	b.n	8003c0a <HAL_RCC_OscConfig+0x36e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x334>
 8003bb6:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a69      	ldr	r2, [pc, #420]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6213      	str	r3, [r2, #32]
 8003bc2:	4b67      	ldr	r3, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a66      	ldr	r2, [pc, #408]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	e01c      	b.n	8003c0a <HAL_RCC_OscConfig+0x36e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x356>
 8003bd8:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a60      	ldr	r2, [pc, #384]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4a5d      	ldr	r2, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6213      	str	r3, [r2, #32]
 8003bf0:	e00b      	b.n	8003c0a <HAL_RCC_OscConfig+0x36e>
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a5a      	ldr	r2, [pc, #360]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6213      	str	r3, [r2, #32]
 8003bfe:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fe f849 	bl	8001ca8 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fe f845 	bl	8001ca8 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0b1      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ee      	beq.n	8003c1a <HAL_RCC_OscConfig+0x37e>
 8003c3c:	e014      	b.n	8003c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe f833 	bl	8001ca8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe f82f 	bl	8001ca8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e09b      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ee      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4a3b      	ldr	r2, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d061      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d146      	bne.n	8003d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c98:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe f803 	bl	8001ca8 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fd ffff 	bl	8001ca8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e06d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4921      	ldr	r1, [pc, #132]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a19      	ldr	r1, [r3, #32]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	491b      	ldr	r1, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd ffd3 	bl	8001ca8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd ffcf 	bl	8001ca8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x46a>
 8003d24:	e035      	b.n	8003d92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd ffbc 	bl	8001ca8 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd ffb8 	bl	8001ca8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e026      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x498>
 8003d52:	e01e      	b.n	8003d92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e019      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_OscConfig+0x500>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0d0      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d910      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	4965      	ldr	r1, [pc, #404]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b63      	ldr	r3, [pc, #396]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0b8      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d020      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a58      	ldr	r2, [pc, #352]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e14:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a52      	ldr	r2, [pc, #328]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	494d      	ldr	r1, [pc, #308]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d040      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d115      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e07f      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e073      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06b      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7e:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f023 0203 	bic.w	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4936      	ldr	r1, [pc, #216]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e90:	f7fd ff0a 	bl	8001ca8 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fd ff06 	bl	8001ca8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e053      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 020c 	and.w	r2, r3, #12
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1eb      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d210      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0207 	bic.w	r2, r3, #7
 8003ed6:	4922      	ldr	r1, [pc, #136]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e032      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4916      	ldr	r1, [pc, #88]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	490e      	ldr	r1, [pc, #56]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f2e:	f000 f821 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	490a      	ldr	r1, [pc, #40]	; (8003f68 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	5ccb      	ldrb	r3, [r1, r3]
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_RCC_ClockConfig+0x1cc>)
 8003f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1d0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd fe68 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022000 	.word	0x40022000
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08008998 	.word	0x08008998
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	20000004 	.word	0x20000004

08003f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x36>
 8003fa2:	e027      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa6:	613b      	str	r3, [r7, #16]
      break;
 8003fa8:	e027      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	0c5b      	lsrs	r3, r3, #17
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <HAL_RCC_GetSysClockFreq+0x98>)
 8003fd6:	fb03 f202 	mul.w	r2, r3, r2
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e004      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fe8:	fb02 f303 	mul.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	613b      	str	r3, [r7, #16]
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ff6:	613b      	str	r3, [r7, #16]
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	693b      	ldr	r3, [r7, #16]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	007a1200 	.word	0x007a1200
 8004010:	080089b0 	.word	0x080089b0
 8004014:	080089c0 	.word	0x080089c0
 8004018:	003d0900 	.word	0x003d0900

0800401c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <HAL_RCC_GetHCLKFreq+0x10>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004034:	f7ff fff2 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4903      	ldr	r1, [pc, #12]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	080089a8 	.word	0x080089a8

08004058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <RCC_Delay+0x34>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <RCC_Delay+0x38>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004074:	bf00      	nop
  }
  while (Delay --);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f9      	bne.n	8004074 <RCC_Delay+0x1c>
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	20000000 	.word	0x20000000
 8004090:	10624dd3 	.word	0x10624dd3

08004094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e041      	b.n	800412a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fc58 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 fa74 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d001      	beq.n	800414c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e03a      	b.n	80041c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIM_Base_Start_IT+0x98>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004176:	d009      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x58>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d010      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e007      	b.n	80041c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9b4 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a7 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9b6 	bl	800459a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f98a 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f97d 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f98c 	bl	800459a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f960 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f953 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f962 	bl	800459a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f936 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f929 	bl	8004576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f938 	bl	800459a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc feba 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa7b 	bl	800487e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8fc 	bl	80045ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0220 	mvn.w	r2, #32
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa46 	bl	800486c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_ConfigClockSource+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e0b4      	b.n	800456e <HAL_TIM_ConfigClockSource+0x186>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	d03e      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xd4>
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004442:	f200 8087 	bhi.w	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444a:	f000 8086 	beq.w	800455a <HAL_TIM_ConfigClockSource+0x172>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004452:	d87f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d01a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xa6>
 8004458:	2b70      	cmp	r3, #112	; 0x70
 800445a:	d87b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d050      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x11a>
 8004460:	2b60      	cmp	r3, #96	; 0x60
 8004462:	d877      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b50      	cmp	r3, #80	; 0x50
 8004466:	d03c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004468:	2b50      	cmp	r3, #80	; 0x50
 800446a:	d873      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d058      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x13a>
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d86f      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b30      	cmp	r3, #48	; 0x30
 8004476:	d064      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004478:	2b30      	cmp	r3, #48	; 0x30
 800447a:	d86b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d060      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b20      	cmp	r3, #32
 8004482:	d867      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05c      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	2b10      	cmp	r3, #16
 800448a:	d05a      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	e062      	b.n	8004554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800449e:	f000 f968 	bl	8004772 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	609a      	str	r2, [r3, #8]
      break;
 80044ba:	e04f      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044cc:	f000 f951 	bl	8004772 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044de:	609a      	str	r2, [r3, #8]
      break;
 80044e0:	e03c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 f8c8 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2150      	movs	r1, #80	; 0x50
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f91f 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004500:	e02c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800450e:	461a      	mov	r2, r3
 8004510:	f000 f8e6 	bl	80046e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2160      	movs	r1, #96	; 0x60
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f90f 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004520:	e01c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f8a8 	bl	8004684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2140      	movs	r1, #64	; 0x40
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f8ff 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004540:	e00c      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f000 f8f6 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8004552:	e003      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e000      	b.n	800455c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800455a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
	...

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a29      	ldr	r2, [pc, #164]	; (8004678 <TIM_Base_SetConfig+0xb8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <TIM_Base_SetConfig+0x30>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d007      	beq.n	80045f0 <TIM_Base_SetConfig+0x30>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a26      	ldr	r2, [pc, #152]	; (800467c <TIM_Base_SetConfig+0xbc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0x30>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <TIM_Base_SetConfig+0xb8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x62>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x62>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <TIM_Base_SetConfig+0xbc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x62>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <TIM_Base_SetConfig+0xb8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800

08004684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	031b      	lsls	r3, r3, #12
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	021a      	lsls	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4313      	orrs	r3, r2
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e046      	b.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d009      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10c      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800

0800486c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <OLED_ClearBuffer>:
static uint8_t oled_buffer[2048];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	81fb      	strh	r3, [r7, #14]
 800489e:	e006      	b.n	80048ae <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 80048a0:	89fb      	ldrh	r3, [r7, #14]
 80048a2:	4908      	ldr	r1, [pc, #32]	; (80048c4 <OLED_ClearBuffer+0x34>)
 80048a4:	79fa      	ldrb	r2, [r7, #7]
 80048a6:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 80048a8:	89fb      	ldrh	r3, [r7, #14]
 80048aa:	3301      	adds	r3, #1
 80048ac:	81fb      	strh	r3, [r7, #14]
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b4:	d3f4      	bcc.n	80048a0 <OLED_ClearBuffer+0x10>
	}
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000a04 	.word	0x20000a04

080048c8 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 80048d2:	2300      	movs	r3, #0
 80048d4:	733b      	strb	r3, [r7, #12]
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <OLED_SendCommand+0x30>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f107 020c 	add.w	r2, r7, #12
 80048e2:	230a      	movs	r3, #10
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2302      	movs	r3, #2
 80048e8:	2178      	movs	r1, #120	; 0x78
 80048ea:	f7fd fe13 	bl	8002514 <HAL_I2C_Master_Transmit>
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20001204 	.word	0x20001204

080048fc <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	733b      	strb	r3, [r7, #12]
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <OLED_SendData+0x30>)
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	f107 020c 	add.w	r2, r7, #12
 8004916:	230a      	movs	r3, #10
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2302      	movs	r3, #2
 800491c:	2178      	movs	r1, #120	; 0x78
 800491e:	f7fd fdf9 	bl	8002514 <HAL_I2C_Master_Transmit>
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20001204 	.word	0x20001204

08004930 <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8004938:	4a30      	ldr	r2, [pc, #192]	; (80049fc <OLED_Init+0xcc>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <OLED_Init+0xcc>)
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	2364      	movs	r3, #100	; 0x64
 8004944:	220a      	movs	r2, #10
 8004946:	2178      	movs	r1, #120	; 0x78
 8004948:	f7fe fa44 	bl	8002dd4 <HAL_I2C_IsDeviceReady>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <OLED_Init+0x26>
	{
		return 0;
 8004952:	2300      	movs	r3, #0
 8004954:	e04e      	b.n	80049f4 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8004956:	20ae      	movs	r0, #174	; 0xae
 8004958:	f7ff ffb6 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 800495c:	20d5      	movs	r0, #213	; 0xd5
 800495e:	f7ff ffb3 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 8004962:	2080      	movs	r0, #128	; 0x80
 8004964:	f7ff ffb0 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 8004968:	20a8      	movs	r0, #168	; 0xa8
 800496a:	f7ff ffad 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 800496e:	203f      	movs	r0, #63	; 0x3f
 8004970:	f7ff ffaa 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 8004974:	20d3      	movs	r0, #211	; 0xd3
 8004976:	f7ff ffa7 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 800497a:	2000      	movs	r0, #0
 800497c:	f7ff ffa4 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 8004980:	2040      	movs	r0, #64	; 0x40
 8004982:	f7ff ffa1 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8004986:	208d      	movs	r0, #141	; 0x8d
 8004988:	f7ff ff9e 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 800498c:	2014      	movs	r0, #20
 800498e:	f7ff ff9b 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 8004992:	2020      	movs	r0, #32
 8004994:	f7ff ff98 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8004998:	2000      	movs	r0, #0
 800499a:	f7ff ff95 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 800499e:	20a1      	movs	r0, #161	; 0xa1
 80049a0:	f7ff ff92 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 80049a4:	20c8      	movs	r0, #200	; 0xc8
 80049a6:	f7ff ff8f 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 80049aa:	20da      	movs	r0, #218	; 0xda
 80049ac:	f7ff ff8c 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 80049b0:	2012      	movs	r0, #18
 80049b2:	f7ff ff89 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 80049b6:	2081      	movs	r0, #129	; 0x81
 80049b8:	f7ff ff86 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 80049bc:	20ff      	movs	r0, #255	; 0xff
 80049be:	f7ff ff83 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 80049c2:	20d9      	movs	r0, #217	; 0xd9
 80049c4:	f7ff ff80 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 80049c8:	20f1      	movs	r0, #241	; 0xf1
 80049ca:	f7ff ff7d 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 80049ce:	20db      	movs	r0, #219	; 0xdb
 80049d0:	f7ff ff7a 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 80049d4:	2040      	movs	r0, #64	; 0x40
 80049d6:	f7ff ff77 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 80049da:	20a4      	movs	r0, #164	; 0xa4
 80049dc:	f7ff ff74 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 80049e0:	20a6      	movs	r0, #166	; 0xa6
 80049e2:	f7ff ff71 	bl	80048c8 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 80049e6:	20af      	movs	r0, #175	; 0xaf
 80049e8:	f7ff ff6e 	bl	80048c8 <OLED_SendCommand>

	OLED_Clear(0);
 80049ec:	2000      	movs	r0, #0
 80049ee:	f000 f807 	bl	8004a00 <OLED_Clear>
	
	return 1;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20001204 	.word	0x20001204

08004a00 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <OLED_Clear+0x18>
 8004a10:	20ff      	movs	r0, #255	; 0xff
 8004a12:	f7ff ff3d 	bl	8004890 <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 8004a16:	e002      	b.n	8004a1e <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7ff ff39 	bl	8004890 <OLED_ClearBuffer>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <OLED_DrawXBM>:
		}
	}
}

void OLED_DrawXBM(int16_t xMove, int16_t yMove, const uint8_t *xbm)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	603a      	str	r2, [r7, #0]
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	460b      	mov	r3, r1
 8004a34:	80bb      	strh	r3, [r7, #4]
	int16_t width = xbm[0];
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	823b      	strh	r3, [r7, #16]
	int16_t height = xbm[1];
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	81fb      	strh	r3, [r7, #14]

	int16_t widthInXbm = (width + 7) / 8;
 8004a44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da00      	bge.n	8004a50 <OLED_DrawXBM+0x2a>
 8004a4e:	3307      	adds	r3, #7
 8004a50:	10db      	asrs	r3, r3, #3
 8004a52:	81bb      	strh	r3, [r7, #12]
	uint8_t data = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
	
	for (int16_t y = 0; y < height; y++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	82bb      	strh	r3, [r7, #20]
 8004a5c:	e045      	b.n	8004aea <OLED_DrawXBM+0xc4>
	{
		for (int16_t x = 0; x < width; x++ )
 8004a5e:	2300      	movs	r3, #0
 8004a60:	827b      	strh	r3, [r7, #18]
 8004a62:	e036      	b.n	8004ad2 <OLED_DrawXBM+0xac>
		{
			if (x & 0x7)	data >>= 1;									// Move a bit
 8004a64:	8a7b      	ldrh	r3, [r7, #18]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <OLED_DrawXBM+0x50>
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
 8004a74:	e013      	b.n	8004a9e <OLED_DrawXBM+0x78>
			else			data = xbm[(x / 8) + y * widthInXbm + 2]; 	// Read new data every 8 bit
 8004a76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da00      	bge.n	8004a80 <OLED_DrawXBM+0x5a>
 8004a7e:	3307      	adds	r3, #7
 8004a80:	10db      	asrs	r3, r3, #3
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	440b      	add	r3, r1
 8004a94:	3302      	adds	r3, #2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	75fb      	strb	r3, [r7, #23]

			if (data & 0x01)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <OLED_DrawXBM+0xa0>
			{
				OLED_DrawPixel(xMove + x, yMove + y);					// if there is a bit draw it
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	8a7b      	ldrh	r3, [r7, #18]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	b2d8      	uxtb	r0, r3
 8004ab4:	88bb      	ldrh	r3, [r7, #4]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	8abb      	ldrh	r3, [r7, #20]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f000 f86f 	bl	8004ba4 <OLED_DrawPixel>
		for (int16_t x = 0; x < width; x++ )
 8004ac6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3301      	adds	r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	827b      	strh	r3, [r7, #18]
 8004ad2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004ad6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	dbc2      	blt.n	8004a64 <OLED_DrawXBM+0x3e>
	for (int16_t y = 0; y < height; y++)
 8004ade:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	82bb      	strh	r3, [r7, #20]
 8004aea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	dbb3      	blt.n	8004a5e <OLED_DrawXBM+0x38>
			}
		}
	}
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	71bb      	strb	r3, [r7, #6]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db3d      	blt.n	8004b96 <OLED_DrawPixelStatus+0x96>
 8004b1a:	79bb      	ldrb	r3, [r7, #6]
 8004b1c:	2b3f      	cmp	r3, #63	; 0x3f
 8004b1e:	d83a      	bhi.n	8004b96 <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8004b20:	797b      	ldrb	r3, [r7, #5]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01a      	beq.n	8004b5c <OLED_DrawPixelStatus+0x5c>
 8004b26:	79fa      	ldrb	r2, [r7, #7]
 8004b28:	79bb      	ldrb	r3, [r7, #6]
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	b2d8      	uxtb	r0, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	01db      	lsls	r3, r3, #7
 8004b32:	4413      	add	r3, r2
 8004b34:	4a1a      	ldr	r2, [pc, #104]	; (8004ba0 <OLED_DrawPixelStatus+0xa0>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	b25a      	sxtb	r2, r3
 8004b3a:	79bb      	ldrb	r3, [r7, #6]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b259      	sxtb	r1, r3
 8004b4c:	79fa      	ldrb	r2, [r7, #7]
 8004b4e:	4603      	mov	r3, r0
 8004b50:	01db      	lsls	r3, r3, #7
 8004b52:	4413      	add	r3, r2
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <OLED_DrawPixelStatus+0xa0>)
 8004b58:	54d1      	strb	r1, [r2, r3]
 8004b5a:	e01d      	b.n	8004b98 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 8004b5c:	79fa      	ldrb	r2, [r7, #7]
 8004b5e:	79bb      	ldrb	r3, [r7, #6]
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	b2d8      	uxtb	r0, r3
 8004b64:	4603      	mov	r3, r0
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4413      	add	r3, r2
 8004b6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <OLED_DrawPixelStatus+0xa0>)
 8004b6c:	5cd3      	ldrb	r3, [r2, r3]
 8004b6e:	b25a      	sxtb	r2, r3
 8004b70:	79bb      	ldrb	r3, [r7, #6]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	2101      	movs	r1, #1
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	4013      	ands	r3, r2
 8004b84:	b259      	sxtb	r1, r3
 8004b86:	79fa      	ldrb	r2, [r7, #7]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	01db      	lsls	r3, r3, #7
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b2c9      	uxtb	r1, r1
 8004b90:	4a03      	ldr	r2, [pc, #12]	; (8004ba0 <OLED_DrawPixelStatus+0xa0>)
 8004b92:	54d1      	strb	r1, [r2, r3]
 8004b94:	e000      	b.n	8004b98 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8004b96:	bf00      	nop
}
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	20000a04 	.word	0x20000a04

08004ba4 <OLED_DrawPixel>:

void OLED_DrawPixel(uint8_t pos_x, uint8_t pos_y)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	460a      	mov	r2, r1
 8004bae:	71fb      	strb	r3, [r7, #7]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71bb      	strb	r3, [r7, #6]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db1d      	blt.n	8004bf8 <OLED_DrawPixel+0x54>
 8004bbc:	79bb      	ldrb	r3, [r7, #6]
 8004bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8004bc0:	d81a      	bhi.n	8004bf8 <OLED_DrawPixel+0x54>
	
	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8004bc2:	79fa      	ldrb	r2, [r7, #7]
 8004bc4:	79bb      	ldrb	r3, [r7, #6]
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	b2d8      	uxtb	r0, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	01db      	lsls	r3, r3, #7
 8004bce:	4413      	add	r3, r2
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <OLED_DrawPixel+0x60>)
 8004bd2:	5cd3      	ldrb	r3, [r2, r3]
 8004bd4:	b25a      	sxtb	r2, r3
 8004bd6:	79bb      	ldrb	r3, [r7, #6]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b259      	sxtb	r1, r3
 8004be8:	79fa      	ldrb	r2, [r7, #7]
 8004bea:	4603      	mov	r3, r0
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	4413      	add	r3, r2
 8004bf0:	b2c9      	uxtb	r1, r1
 8004bf2:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <OLED_DrawPixel+0x60>)
 8004bf4:	54d1      	strb	r1, [r2, r3]
 8004bf6:	e000      	b.n	8004bfa <OLED_DrawPixel+0x56>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8004bf8:	bf00      	nop
}
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000a04 	.word	0x20000a04

08004c08 <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fb fa9d 	bl	8000150 <strlen>
 8004c16:	4603      	mov	r3, r0
 8004c18:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73bb      	strb	r3, [r7, #14]
 8004c22:	e01a      	b.n	8004c5a <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <OLED_GetWidthStr+0x64>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <OLED_GetWidthStr+0x64>)
 8004c2a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <OLED_GetWidthStr+0x64>)
 8004c38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c3c:	1ac3      	subs	r3, r0, r3
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	3304      	adds	r3, #4
 8004c44:	4413      	add	r3, r2
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 8004c4e:	7bbb      	ldrb	r3, [r7, #14]
 8004c50:	3301      	adds	r3, #1
 8004c52:	73bb      	strb	r3, [r7, #14]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3301      	adds	r3, #1
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	7bba      	ldrb	r2, [r7, #14]
 8004c5c:	7b7b      	ldrb	r3, [r7, #13]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3e0      	bcc.n	8004c24 <OLED_GetWidthStr+0x1c>
	}

	return len;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20001208 	.word	0x20001208

08004c70 <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4623      	mov	r3, r4
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	4603      	mov	r3, r0
 8004c84:	71bb      	strb	r3, [r7, #6]
 8004c86:	460b      	mov	r3, r1
 8004c88:	717b      	strb	r3, [r7, #5]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004c94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4933      	ldr	r1, [pc, #204]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004c9e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8004ca2:	1a5b      	subs	r3, r3, r1
 8004ca4:	fb00 f303 	mul.w	r3, r0, r3
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4413      	add	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e050      	b.n	8004d56 <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73bb      	strb	r3, [r7, #14]
 8004cb8:	e044      	b.n	8004d44 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	08db      	lsrs	r3, r3, #3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	4929      	ldr	r1, [pc, #164]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004cc6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8004cca:	3901      	subs	r1, #1
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4926      	ldr	r1, [pc, #152]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004cd2:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8004cd6:	fb93 f3f1 	sdiv	r3, r3, r1
 8004cda:	4413      	add	r3, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	fa42 f303 	asr.w	r3, r2, r3
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d011      	beq.n	8004d1c <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8004cf8:	79ba      	ldrb	r2, [r7, #6]
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b2d8      	uxtb	r0, r3
 8004d00:	797a      	ldrb	r2, [r7, #5]
 8004d02:	7bbb      	ldrb	r3, [r7, #14]
 8004d04:	4413      	add	r3, r2
 8004d06:	b2d9      	uxtb	r1, r3
 8004d08:	793b      	ldrb	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	f7ff fef3 	bl	8004b00 <OLED_DrawPixelStatus>
 8004d1a:	e010      	b.n	8004d3e <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 8004d1c:	79ba      	ldrb	r2, [r7, #6]
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	4413      	add	r3, r2
 8004d22:	b2d8      	uxtb	r0, r3
 8004d24:	797a      	ldrb	r2, [r7, #5]
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2d9      	uxtb	r1, r3
 8004d2c:	793b      	ldrb	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f7ff fee1 	bl	8004b00 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 8004d3e:	7bbb      	ldrb	r3, [r7, #14]
 8004d40:	3301      	adds	r3, #1
 8004d42:	73bb      	strb	r3, [r7, #14]
 8004d44:	7bbb      	ldrb	r3, [r7, #14]
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <OLED_DrawChar+0xfc>)
 8004d48:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	dbb4      	blt.n	8004cba <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	3301      	adds	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d3a9      	bcc.n	8004cb4 <OLED_DrawChar+0x44>
		}
	}
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20001208 	.word	0x20001208

08004d70 <OLED_DrawStr>:

	OLED_DrawStr(buf, x, y, mode);
}

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	70fb      	strb	r3, [r7, #3]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70bb      	strb	r3, [r7, #2]
 8004d86:	4613      	mov	r3, r2
 8004d88:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb f9e0 	bl	8000150 <strlen>
 8004d90:	4603      	mov	r3, r0
 8004d92:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2bfe      	cmp	r3, #254	; 0xfe
 8004d9c:	d106      	bne.n	8004dac <OLED_DrawStr+0x3c>
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff ff32 	bl	8004c08 <OLED_GetWidthStr>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004daa:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2bff      	cmp	r3, #255	; 0xff
 8004db0:	d109      	bne.n	8004dc6 <OLED_DrawStr+0x56>
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff28 	bl	8004c08 <OLED_GetWidthStr>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004dbe:	0fda      	lsrs	r2, r3, #31
 8004dc0:	4413      	add	r3, r2
 8004dc2:	105b      	asrs	r3, r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 8004dc6:	78bb      	ldrb	r3, [r7, #2]
 8004dc8:	2bff      	cmp	r3, #255	; 0xff
 8004dca:	d108      	bne.n	8004dde <OLED_DrawStr+0x6e>
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <OLED_DrawStr+0xcc>)
 8004dce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004dd2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004dd6:	0fda      	lsrs	r2, r3, #31
 8004dd8:	4413      	add	r3, r2
 8004dda:	105b      	asrs	r3, r3, #1
 8004ddc:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	73bb      	strb	r3, [r7, #14]
 8004de2:	e021      	b.n	8004e28 <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7818      	ldrb	r0, [r3, #0]
 8004de8:	787b      	ldrb	r3, [r7, #1]
 8004dea:	78ba      	ldrb	r2, [r7, #2]
 8004dec:	7bf9      	ldrb	r1, [r7, #15]
 8004dee:	f7ff ff3f 	bl	8004c70 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <OLED_DrawStr+0xcc>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <OLED_DrawStr+0xcc>)
 8004df8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <OLED_DrawStr+0xcc>)
 8004e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e0a:	1ac3      	subs	r3, r0, r3
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	3304      	adds	r3, #4
 8004e12:	4413      	add	r3, r2
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	4413      	add	r3, r2
 8004e1a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	73bb      	strb	r3, [r7, #14]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3301      	adds	r3, #1
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	7bba      	ldrb	r2, [r7, #14]
 8004e2a:	7b7b      	ldrb	r3, [r7, #13]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3d9      	bcc.n	8004de4 <OLED_DrawStr+0x74>
	}
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20001208 	.word	0x20001208

08004e40 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	71fb      	strb	r3, [r7, #7]
 8004e4a:	e032      	b.n	8004eb2 <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <OLED_UpdateScreen+0x84>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fd36 	bl	80048c8 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <OLED_UpdateScreen+0x84>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f043 0310 	orr.w	r3, r3, #16
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fd2c 	bl	80048c8 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fd25 	bl	80048c8 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	80bb      	strh	r3, [r7, #4]
 8004e82:	e00f      	b.n	8004ea4 <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	01da      	lsls	r2, r3, #7
 8004e88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ec8 <OLED_UpdateScreen+0x88>)
 8004e90:	5cd3      	ldrb	r3, [r2, r3]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fd32 	bl	80048fc <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8004e98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	80bb      	strh	r3, [r7, #4]
 8004ea4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eaa:	ddeb      	ble.n	8004e84 <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	71fb      	strb	r3, [r7, #7]
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	2b07      	cmp	r3, #7
 8004eb6:	d9c9      	bls.n	8004e4c <OLED_UpdateScreen+0xc>
		}
	}
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000a00 	.word	0x20000a00
 8004ec8:	20000a04 	.word	0x20000a04

08004ecc <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	Font.font = new_font;
 8004ed4:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <FontSet+0x54>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6013      	str	r3, [r2, #0]
	Font.width = (int16_t)fontbyte(0); //*LARGURA DA FONTE*//
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <FontSet+0x54>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <FontSet+0x54>)
 8004ee4:	809a      	strh	r2, [r3, #4]
	Font.height = (int16_t)fontbyte(1);//*ALTURA DA FONNTE*//
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <FontSet+0x54>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	b21a      	sxth	r2, r3
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <FontSet+0x54>)
 8004ef2:	80da      	strh	r2, [r3, #6]
	Font.offset = (int16_t)fontbyte(2);/*PRIMEIRA LINHA DO VETOR É REFERENTE A QUAL POSIÇÃO DA TABELA ASC?*/
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <FontSet+0x54>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b21a      	sxth	r2, r3
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <FontSet+0x54>)
 8004f00:	811a      	strh	r2, [r3, #8]
	Font.numchars = (int16_t)fontbyte(3);	/*NUMERO DE COMPONENTES NUMA LINHA DO VETOR*/
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <FontSet+0x54>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3303      	adds	r3, #3
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b21a      	sxth	r2, r3
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <FontSet+0x54>)
 8004f0e:	815a      	strh	r2, [r3, #10]
	Font.inverted = NORMAL;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <FontSet+0x54>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	731a      	strb	r2, [r3, #12]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20001208 	.word	0x20001208

08004f24 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af04      	add	r7, sp, #16
 8004f2a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8004f2c:	2364      	movs	r3, #100	; 0x64
 8004f2e:	9302      	str	r3, [sp, #8]
 8004f30:	2301      	movs	r3, #1
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	f107 030f 	add.w	r3, r7, #15
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	2275      	movs	r2, #117	; 0x75
 8004f3e:	21d0      	movs	r1, #208	; 0xd0
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fd fcdf 	bl	8002904 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b68      	cmp	r3, #104	; 0x68
 8004f4a:	d14c      	bne.n	8004fe6 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0X05; //CLOCK COM REFERENCIA EXTERNA DE 19,2MHZ
 8004f4c:	2305      	movs	r3, #5
 8004f4e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004f50:	2364      	movs	r3, #100	; 0x64
 8004f52:	9302      	str	r3, [sp, #8]
 8004f54:	2301      	movs	r3, #1
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	f107 030e 	add.w	r3, r7, #14
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	226b      	movs	r2, #107	; 0x6b
 8004f62:	21d0      	movs	r1, #208	; 0xd0
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fd fbd3 	bl	8002710 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x09; //TAXA DE AMOSTRAGEM;
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8004f6e:	2364      	movs	r3, #100	; 0x64
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	2301      	movs	r3, #1
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	f107 030e 	add.w	r3, r7, #14
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2219      	movs	r2, #25
 8004f80:	21d0      	movs	r1, #208	; 0xd0
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd fbc4 	bl	8002710 <HAL_I2C_Mem_Write>

        Data = 0X02; //CORTE DO FILTRO PASSA BAIXA
 8004f88:	2302      	movs	r3, #2
 8004f8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, MPU6050_RA_CONFIG, 1, &Data, 1, i2c_timeout);
 8004f8c:	2364      	movs	r3, #100	; 0x64
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	2301      	movs	r3, #1
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	f107 030e 	add.w	r3, r7, #14
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	221a      	movs	r2, #26
 8004f9e:	21d0      	movs	r1, #208	; 0xd0
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fbb5 	bl	8002710 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004faa:	2364      	movs	r3, #100	; 0x64
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	f107 030e 	add.w	r3, r7, #14
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	221c      	movs	r2, #28
 8004fbc:	21d0      	movs	r1, #208	; 0xd0
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fd fba6 	bl	8002710 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004fc8:	2364      	movs	r3, #100	; 0x64
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	f107 030e 	add.w	r3, r7, #14
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	221b      	movs	r2, #27
 8004fda:	21d0      	movs	r1, #208	; 0xd0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fd fb97 	bl	8002710 <HAL_I2C_Mem_Write>
        return 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <MPU6050_Init+0xc4>
    }
    return 1;
 8004fe6:	2301      	movs	r3, #1
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <MPU6050_Read_Accel>:
void MPU6050_Calibration(){

}

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af04      	add	r7, sp, #16
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8004ffa:	2364      	movs	r3, #100	; 0x64
 8004ffc:	9302      	str	r3, [sp, #8]
 8004ffe:	2306      	movs	r3, #6
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	f107 0308 	add.w	r3, r7, #8
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2301      	movs	r3, #1
 800500a:	223b      	movs	r2, #59	; 0x3b
 800500c:	21d0      	movs	r1, #208	; 0xd0
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fd fc78 	bl	8002904 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8005014:	7a3b      	ldrb	r3, [r7, #8]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	b21a      	sxth	r2, r3
 800501a:	7a7b      	ldrb	r3, [r7, #9]
 800501c:	b21b      	sxth	r3, r3
 800501e:	4313      	orrs	r3, r2
 8005020:	b21a      	sxth	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8005026:	7abb      	ldrb	r3, [r7, #10]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b21a      	sxth	r2, r3
 800502c:	7afb      	ldrb	r3, [r7, #11]
 800502e:	b21b      	sxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b21a      	sxth	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8005038:	7b3b      	ldrb	r3, [r7, #12]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b21a      	sxth	r2, r3
 800503e:	7b7b      	ldrb	r3, [r7, #13]
 8005040:	b21b      	sxth	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b21a      	sxth	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_ACCE_SENS_2;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fe23 	bl	8000c9c <__aeabi_i2f>
 8005056:	4603      	mov	r3, r0
 8005058:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800505c:	4618      	mov	r0, r3
 800505e:	f7fb ff25 	bl	8000eac <__aeabi_fdiv>
 8005062:	4603      	mov	r3, r0
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb f9df 	bl	8000428 <__aeabi_f2d>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_ACCE_SENS_2;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb fe0e 	bl	8000c9c <__aeabi_i2f>
 8005080:	4603      	mov	r3, r0
 8005082:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb ff10 	bl	8000eac <__aeabi_fdiv>
 800508c:	4603      	mov	r3, r0
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb f9ca 	bl	8000428 <__aeabi_f2d>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb f9ad 	bl	8000404 <__aeabi_i2d>
 80050aa:	a307      	add	r3, pc, #28	; (adr r3, 80050c8 <MPU6050_Read_Accel+0xd8>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb fb3c 	bl	800072c <__aeabi_ddiv>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	00000000 	.word	0x00000000
 80050cc:	40cc2900 	.word	0x40cc2900

080050d0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af04      	add	r7, sp, #16
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80050da:	2364      	movs	r3, #100	; 0x64
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	2306      	movs	r3, #6
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2301      	movs	r3, #1
 80050ea:	2243      	movs	r2, #67	; 0x43
 80050ec:	21d0      	movs	r1, #208	; 0xd0
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fd fc08 	bl	8002904 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80050f4:	7a3b      	ldrb	r3, [r7, #8]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	b21a      	sxth	r2, r3
 80050fa:	7a7b      	ldrb	r3, [r7, #9]
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b21a      	sxth	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8005106:	7abb      	ldrb	r3, [r7, #10]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	b21a      	sxth	r2, r3
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	b21b      	sxth	r3, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	b21a      	sxth	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8005118:	7b3b      	ldrb	r3, [r7, #12]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	b21a      	sxth	r2, r3
 800511e:	7b7b      	ldrb	r3, [r7, #13]
 8005120:	b21b      	sxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	b21a      	sxth	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	849a      	strh	r2, [r3, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_GYRO_SENS_250;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005130:	4618      	mov	r0, r3
 8005132:	f7fb fdb3 	bl	8000c9c <__aeabi_i2f>
 8005136:	4603      	mov	r3, r0
 8005138:	491c      	ldr	r1, [pc, #112]	; (80051ac <MPU6050_Read_Gyro+0xdc>)
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb feb6 	bl	8000eac <__aeabi_fdiv>
 8005140:	4603      	mov	r3, r0
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb f970 	bl	8000428 <__aeabi_f2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_GYRO_SENS_250;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb fd9f 	bl	8000c9c <__aeabi_i2f>
 800515e:	4603      	mov	r3, r0
 8005160:	4912      	ldr	r1, [pc, #72]	; (80051ac <MPU6050_Read_Gyro+0xdc>)
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fea2 	bl	8000eac <__aeabi_fdiv>
 8005168:	4603      	mov	r3, r0
 800516a:	4618      	mov	r0, r3
 800516c:	f7fb f95c 	bl	8000428 <__aeabi_f2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_GYRO_SENS_250;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb fd8b 	bl	8000c9c <__aeabi_i2f>
 8005186:	4603      	mov	r3, r0
 8005188:	4908      	ldr	r1, [pc, #32]	; (80051ac <MPU6050_Read_Gyro+0xdc>)
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fe8e 	bl	8000eac <__aeabi_fdiv>
 8005190:	4603      	mov	r3, r0
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb f948 	bl	8000428 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	43030000 	.word	0x43030000

080051b0 <kalman_calc>:
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
        DataStruct->Gx = -DataStruct->Gx;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}
void kalman_calc(float GyroX, float GyroY, float roll, float pitch, MPU6050_t *DataStruct){
 80051b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051b4:	b08a      	sub	sp, #40	; 0x28
 80051b6:	af04      	add	r7, sp, #16
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	603b      	str	r3, [r7, #0]
    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80051c0:	f7fc fd72 	bl	8001ca8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <kalman_calc+0x130>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb f909 	bl	80003e4 <__aeabi_ui2d>
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <kalman_calc+0x134>)
 80051d8:	f7fb faa8 	bl	800072c <__aeabi_ddiv>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timer = HAL_GetTick();
 80051e4:	f7fc fd60 	bl	8001ca8 <HAL_GetTick>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <kalman_calc+0x130>)
 80051ec:	6013      	str	r3, [r2, #0]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80051ee:	493e      	ldr	r1, [pc, #248]	; (80052e8 <kalman_calc+0x138>)
 80051f0:	6838      	ldr	r0, [r7, #0]
 80051f2:	f7fb ff45 	bl	8001080 <__aeabi_fcmplt>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <kalman_calc+0x62>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <kalman_calc+0x13c>)
 8005208:	f7fb fbf6 	bl	80009f8 <__aeabi_dcmpgt>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d111      	bne.n	8005236 <kalman_calc+0x86>
 8005212:	4937      	ldr	r1, [pc, #220]	; (80052f0 <kalman_calc+0x140>)
 8005214:	6838      	ldr	r0, [r7, #0]
 8005216:	f7fb ff51 	bl	80010bc <__aeabi_fcmpgt>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01b      	beq.n	8005258 <kalman_calc+0xa8>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <kalman_calc+0x144>)
 800522c:	f7fb fbc6 	bl	80009bc <__aeabi_dcmplt>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <kalman_calc+0xa8>
        KalmanY.angle = pitch;
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f7fb f8f6 	bl	8000428 <__aeabi_f2d>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	492d      	ldr	r1, [pc, #180]	; (80052f8 <kalman_calc+0x148>)
 8005242:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8005246:	6838      	ldr	r0, [r7, #0]
 8005248:	f7fb f8ee 	bl	8000428 <__aeabi_f2d>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005252:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005256:	e017      	b.n	8005288 <kalman_calc+0xd8>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, GyroY, dt);
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f7fb f8e5 	bl	8000428 <__aeabi_f2d>
 800525e:	4680      	mov	r8, r0
 8005260:	4689      	mov	r9, r1
 8005262:	68b8      	ldr	r0, [r7, #8]
 8005264:	f7fb f8e0 	bl	8000428 <__aeabi_f2d>
 8005268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800526c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005270:	e9cd 0100 	strd	r0, r1, [sp]
 8005274:	4642      	mov	r2, r8
 8005276:	464b      	mov	r3, r9
 8005278:	481f      	ldr	r0, [pc, #124]	; (80052f8 <kalman_calc+0x148>)
 800527a:	f000 f841 	bl	8005300 <Kalman_getAngle>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005284:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800528e:	4614      	mov	r4, r2
 8005290:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <kalman_calc+0x13c>)
 800529a:	4620      	mov	r0, r4
 800529c:	4629      	mov	r1, r5
 800529e:	f7fb fbab 	bl	80009f8 <__aeabi_dcmpgt>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
    	GyroX = GyroX;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, GyroY, dt);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fb f8be 	bl	8000428 <__aeabi_f2d>
 80052ac:	4604      	mov	r4, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	68b8      	ldr	r0, [r7, #8]
 80052b2:	f7fb f8b9 	bl	8000428 <__aeabi_f2d>
 80052b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052be:	e9cd 0100 	strd	r0, r1, [sp]
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	480d      	ldr	r0, [pc, #52]	; (80052fc <kalman_calc+0x14c>)
 80052c8:	f000 f81a 	bl	8005300 <Kalman_getAngle>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 80052d6:	bf00      	nop
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052e0:	20001218 	.word	0x20001218
 80052e4:	408f4000 	.word	0x408f4000
 80052e8:	c2b40000 	.word	0xc2b40000
 80052ec:	40568000 	.word	0x40568000
 80052f0:	42b40000 	.word	0x42b40000
 80052f4:	c0568000 	.word	0xc0568000
 80052f8:	20000058 	.word	0x20000058
 80052fc:	20000010 	.word	0x20000010

08005300 <Kalman_getAngle>:
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005312:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005316:	f7fa ff27 	bl	8000168 <__aeabi_dsub>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800532c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005330:	f7fb f8d2 	bl	80004d8 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4620      	mov	r0, r4
 800533a:	4629      	mov	r1, r5
 800533c:	f7fa ff16 	bl	800016c <__adddf3>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005356:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800535a:	f7fb f8bd 	bl	80004d8 <__aeabi_dmul>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800536c:	f7fa fefc 	bl	8000168 <__aeabi_dsub>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800537e:	f7fa fef3 	bl	8000168 <__aeabi_dsub>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fa feec 	bl	800016c <__adddf3>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053a0:	f7fb f89a 	bl	80004d8 <__aeabi_dmul>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4620      	mov	r0, r4
 80053aa:	4629      	mov	r1, r5
 80053ac:	f7fa fede 	bl	800016c <__adddf3>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80053c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053ca:	f7fb f885 	bl	80004d8 <__aeabi_dmul>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fa fec7 	bl	8000168 <__aeabi_dsub>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80053f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80053f4:	f7fb f870 	bl	80004d8 <__aeabi_dmul>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa feb2 	bl	8000168 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800541a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800541e:	f7fb f85b 	bl	80004d8 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4620      	mov	r0, r4
 8005428:	4629      	mov	r1, r5
 800542a:	f7fa fe9f 	bl	800016c <__adddf3>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005444:	f7fa fe92 	bl	800016c <__adddf3>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005456:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800545a:	f7fb f967 	bl	800072c <__aeabi_ddiv>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800546c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005470:	f7fb f95c 	bl	800072c <__aeabi_ddiv>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005486:	f7fa fe6f 	bl	8000168 <__aeabi_dsub>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800549c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054a0:	f7fb f81a 	bl	80004d8 <__aeabi_dmul>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fa fe5e 	bl	800016c <__adddf3>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80054c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054c8:	f7fb f806 	bl	80004d8 <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	f7fa fe4a 	bl	800016c <__adddf3>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80054e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80054f2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80054fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005504:	f7fa ffe8 	bl	80004d8 <__aeabi_dmul>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa fe2a 	bl	8000168 <__aeabi_dsub>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005524:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005528:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	f7fa fe16 	bl	8000168 <__aeabi_dsub>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800554c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005554:	f7fa ffc0 	bl	80004d8 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fa fe02 	bl	8000168 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005578:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557c:	f7fa ffac 	bl	80004d8 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4620      	mov	r0, r4
 8005586:	4629      	mov	r1, r5
 8005588:	f7fa fdee 	bl	8000168 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	68f9      	ldr	r1, [r7, #12]
 8005592:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	3748      	adds	r7, #72	; 0x48
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bdb0      	pop	{r4, r5, r7, pc}

080055a6 <__cvt>:
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	461f      	mov	r7, r3
 80055ae:	bfbb      	ittet	lt
 80055b0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80055b4:	461f      	movlt	r7, r3
 80055b6:	2300      	movge	r3, #0
 80055b8:	232d      	movlt	r3, #45	; 0x2d
 80055ba:	b088      	sub	sp, #32
 80055bc:	4614      	mov	r4, r2
 80055be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055c2:	7013      	strb	r3, [r2, #0]
 80055c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055c6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80055ca:	f023 0820 	bic.w	r8, r3, #32
 80055ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055d2:	d005      	beq.n	80055e0 <__cvt+0x3a>
 80055d4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055d8:	d100      	bne.n	80055dc <__cvt+0x36>
 80055da:	3501      	adds	r5, #1
 80055dc:	2302      	movs	r3, #2
 80055de:	e000      	b.n	80055e2 <__cvt+0x3c>
 80055e0:	2303      	movs	r3, #3
 80055e2:	aa07      	add	r2, sp, #28
 80055e4:	9204      	str	r2, [sp, #16]
 80055e6:	aa06      	add	r2, sp, #24
 80055e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055ec:	e9cd 3500 	strd	r3, r5, [sp]
 80055f0:	4622      	mov	r2, r4
 80055f2:	463b      	mov	r3, r7
 80055f4:	f000 fe74 	bl	80062e0 <_dtoa_r>
 80055f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055fc:	4606      	mov	r6, r0
 80055fe:	d102      	bne.n	8005606 <__cvt+0x60>
 8005600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005602:	07db      	lsls	r3, r3, #31
 8005604:	d522      	bpl.n	800564c <__cvt+0xa6>
 8005606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800560a:	eb06 0905 	add.w	r9, r6, r5
 800560e:	d110      	bne.n	8005632 <__cvt+0x8c>
 8005610:	7833      	ldrb	r3, [r6, #0]
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d10a      	bne.n	800562c <__cvt+0x86>
 8005616:	2200      	movs	r2, #0
 8005618:	2300      	movs	r3, #0
 800561a:	4620      	mov	r0, r4
 800561c:	4639      	mov	r1, r7
 800561e:	f7fb f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8005622:	b918      	cbnz	r0, 800562c <__cvt+0x86>
 8005624:	f1c5 0501 	rsb	r5, r5, #1
 8005628:	f8ca 5000 	str.w	r5, [sl]
 800562c:	f8da 3000 	ldr.w	r3, [sl]
 8005630:	4499      	add	r9, r3
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	4620      	mov	r0, r4
 8005638:	4639      	mov	r1, r7
 800563a:	f7fb f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800563e:	b108      	cbz	r0, 8005644 <__cvt+0x9e>
 8005640:	f8cd 901c 	str.w	r9, [sp, #28]
 8005644:	2230      	movs	r2, #48	; 0x30
 8005646:	9b07      	ldr	r3, [sp, #28]
 8005648:	454b      	cmp	r3, r9
 800564a:	d307      	bcc.n	800565c <__cvt+0xb6>
 800564c:	4630      	mov	r0, r6
 800564e:	9b07      	ldr	r3, [sp, #28]
 8005650:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005652:	1b9b      	subs	r3, r3, r6
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	b008      	add	sp, #32
 8005658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565c:	1c59      	adds	r1, r3, #1
 800565e:	9107      	str	r1, [sp, #28]
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e7f0      	b.n	8005646 <__cvt+0xa0>

08005664 <__exponent>:
 8005664:	4603      	mov	r3, r0
 8005666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005668:	2900      	cmp	r1, #0
 800566a:	f803 2b02 	strb.w	r2, [r3], #2
 800566e:	bfb6      	itet	lt
 8005670:	222d      	movlt	r2, #45	; 0x2d
 8005672:	222b      	movge	r2, #43	; 0x2b
 8005674:	4249      	neglt	r1, r1
 8005676:	2909      	cmp	r1, #9
 8005678:	7042      	strb	r2, [r0, #1]
 800567a:	dd2a      	ble.n	80056d2 <__exponent+0x6e>
 800567c:	f10d 0207 	add.w	r2, sp, #7
 8005680:	4617      	mov	r7, r2
 8005682:	260a      	movs	r6, #10
 8005684:	fb91 f5f6 	sdiv	r5, r1, r6
 8005688:	4694      	mov	ip, r2
 800568a:	fb06 1415 	mls	r4, r6, r5, r1
 800568e:	3430      	adds	r4, #48	; 0x30
 8005690:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005694:	460c      	mov	r4, r1
 8005696:	2c63      	cmp	r4, #99	; 0x63
 8005698:	4629      	mov	r1, r5
 800569a:	f102 32ff 	add.w	r2, r2, #4294967295
 800569e:	dcf1      	bgt.n	8005684 <__exponent+0x20>
 80056a0:	3130      	adds	r1, #48	; 0x30
 80056a2:	f1ac 0402 	sub.w	r4, ip, #2
 80056a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056aa:	4622      	mov	r2, r4
 80056ac:	1c41      	adds	r1, r0, #1
 80056ae:	42ba      	cmp	r2, r7
 80056b0:	d30a      	bcc.n	80056c8 <__exponent+0x64>
 80056b2:	f10d 0209 	add.w	r2, sp, #9
 80056b6:	eba2 020c 	sub.w	r2, r2, ip
 80056ba:	42bc      	cmp	r4, r7
 80056bc:	bf88      	it	hi
 80056be:	2200      	movhi	r2, #0
 80056c0:	4413      	add	r3, r2
 80056c2:	1a18      	subs	r0, r3, r0
 80056c4:	b003      	add	sp, #12
 80056c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056cc:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056d0:	e7ed      	b.n	80056ae <__exponent+0x4a>
 80056d2:	2330      	movs	r3, #48	; 0x30
 80056d4:	3130      	adds	r1, #48	; 0x30
 80056d6:	7083      	strb	r3, [r0, #2]
 80056d8:	70c1      	strb	r1, [r0, #3]
 80056da:	1d03      	adds	r3, r0, #4
 80056dc:	e7f1      	b.n	80056c2 <__exponent+0x5e>
	...

080056e0 <_printf_float>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	b091      	sub	sp, #68	; 0x44
 80056e6:	460c      	mov	r4, r1
 80056e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80056ec:	4616      	mov	r6, r2
 80056ee:	461f      	mov	r7, r3
 80056f0:	4605      	mov	r5, r0
 80056f2:	f000 fce5 	bl	80060c0 <_localeconv_r>
 80056f6:	6803      	ldr	r3, [r0, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	9309      	str	r3, [sp, #36]	; 0x24
 80056fc:	f7fa fd28 	bl	8000150 <strlen>
 8005700:	2300      	movs	r3, #0
 8005702:	930e      	str	r3, [sp, #56]	; 0x38
 8005704:	f8d8 3000 	ldr.w	r3, [r8]
 8005708:	900a      	str	r0, [sp, #40]	; 0x28
 800570a:	3307      	adds	r3, #7
 800570c:	f023 0307 	bic.w	r3, r3, #7
 8005710:	f103 0208 	add.w	r2, r3, #8
 8005714:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005718:	f8d4 b000 	ldr.w	fp, [r4]
 800571c:	f8c8 2000 	str.w	r2, [r8]
 8005720:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005724:	4652      	mov	r2, sl
 8005726:	4643      	mov	r3, r8
 8005728:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800572c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005730:	930b      	str	r3, [sp, #44]	; 0x2c
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	4650      	mov	r0, sl
 8005738:	4b9c      	ldr	r3, [pc, #624]	; (80059ac <_printf_float+0x2cc>)
 800573a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800573c:	f7fb f966 	bl	8000a0c <__aeabi_dcmpun>
 8005740:	bb70      	cbnz	r0, 80057a0 <_printf_float+0xc0>
 8005742:	f04f 32ff 	mov.w	r2, #4294967295
 8005746:	4650      	mov	r0, sl
 8005748:	4b98      	ldr	r3, [pc, #608]	; (80059ac <_printf_float+0x2cc>)
 800574a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800574c:	f7fb f940 	bl	80009d0 <__aeabi_dcmple>
 8005750:	bb30      	cbnz	r0, 80057a0 <_printf_float+0xc0>
 8005752:	2200      	movs	r2, #0
 8005754:	2300      	movs	r3, #0
 8005756:	4650      	mov	r0, sl
 8005758:	4641      	mov	r1, r8
 800575a:	f7fb f92f 	bl	80009bc <__aeabi_dcmplt>
 800575e:	b110      	cbz	r0, 8005766 <_printf_float+0x86>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005766:	4a92      	ldr	r2, [pc, #584]	; (80059b0 <_printf_float+0x2d0>)
 8005768:	4b92      	ldr	r3, [pc, #584]	; (80059b4 <_printf_float+0x2d4>)
 800576a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800576e:	bf94      	ite	ls
 8005770:	4690      	movls	r8, r2
 8005772:	4698      	movhi	r8, r3
 8005774:	2303      	movs	r3, #3
 8005776:	f04f 0a00 	mov.w	sl, #0
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	f02b 0304 	bic.w	r3, fp, #4
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	4633      	mov	r3, r6
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	9700      	str	r7, [sp, #0]
 800578a:	aa0f      	add	r2, sp, #60	; 0x3c
 800578c:	f000 f9d6 	bl	8005b3c <_printf_common>
 8005790:	3001      	adds	r0, #1
 8005792:	f040 8090 	bne.w	80058b6 <_printf_float+0x1d6>
 8005796:	f04f 30ff 	mov.w	r0, #4294967295
 800579a:	b011      	add	sp, #68	; 0x44
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	4652      	mov	r2, sl
 80057a2:	4643      	mov	r3, r8
 80057a4:	4650      	mov	r0, sl
 80057a6:	4641      	mov	r1, r8
 80057a8:	f7fb f930 	bl	8000a0c <__aeabi_dcmpun>
 80057ac:	b148      	cbz	r0, 80057c2 <_printf_float+0xe2>
 80057ae:	f1b8 0f00 	cmp.w	r8, #0
 80057b2:	bfb8      	it	lt
 80057b4:	232d      	movlt	r3, #45	; 0x2d
 80057b6:	4a80      	ldr	r2, [pc, #512]	; (80059b8 <_printf_float+0x2d8>)
 80057b8:	bfb8      	it	lt
 80057ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057be:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <_printf_float+0x2dc>)
 80057c0:	e7d3      	b.n	800576a <_printf_float+0x8a>
 80057c2:	6863      	ldr	r3, [r4, #4]
 80057c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	d142      	bne.n	8005852 <_printf_float+0x172>
 80057cc:	2306      	movs	r3, #6
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	9206      	str	r2, [sp, #24]
 80057d4:	aa0e      	add	r2, sp, #56	; 0x38
 80057d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80057da:	aa0d      	add	r2, sp, #52	; 0x34
 80057dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80057e0:	9203      	str	r2, [sp, #12]
 80057e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80057e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	4652      	mov	r2, sl
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4628      	mov	r0, r5
 80057f4:	4643      	mov	r3, r8
 80057f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80057f8:	f7ff fed5 	bl	80055a6 <__cvt>
 80057fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057fe:	4680      	mov	r8, r0
 8005800:	2947      	cmp	r1, #71	; 0x47
 8005802:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005804:	d108      	bne.n	8005818 <_printf_float+0x138>
 8005806:	1cc8      	adds	r0, r1, #3
 8005808:	db02      	blt.n	8005810 <_printf_float+0x130>
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	4299      	cmp	r1, r3
 800580e:	dd40      	ble.n	8005892 <_printf_float+0x1b2>
 8005810:	f1a9 0902 	sub.w	r9, r9, #2
 8005814:	fa5f f989 	uxtb.w	r9, r9
 8005818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800581c:	d81f      	bhi.n	800585e <_printf_float+0x17e>
 800581e:	464a      	mov	r2, r9
 8005820:	3901      	subs	r1, #1
 8005822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005826:	910d      	str	r1, [sp, #52]	; 0x34
 8005828:	f7ff ff1c 	bl	8005664 <__exponent>
 800582c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800582e:	4682      	mov	sl, r0
 8005830:	1813      	adds	r3, r2, r0
 8005832:	2a01      	cmp	r2, #1
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	dc02      	bgt.n	800583e <_printf_float+0x15e>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	07d2      	lsls	r2, r2, #31
 800583c:	d501      	bpl.n	8005842 <_printf_float+0x162>
 800583e:	3301      	adds	r3, #1
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005846:	2b00      	cmp	r3, #0
 8005848:	d09b      	beq.n	8005782 <_printf_float+0xa2>
 800584a:	232d      	movs	r3, #45	; 0x2d
 800584c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005850:	e797      	b.n	8005782 <_printf_float+0xa2>
 8005852:	2947      	cmp	r1, #71	; 0x47
 8005854:	d1bc      	bne.n	80057d0 <_printf_float+0xf0>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ba      	bne.n	80057d0 <_printf_float+0xf0>
 800585a:	2301      	movs	r3, #1
 800585c:	e7b7      	b.n	80057ce <_printf_float+0xee>
 800585e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005862:	d118      	bne.n	8005896 <_printf_float+0x1b6>
 8005864:	2900      	cmp	r1, #0
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	dd0b      	ble.n	8005882 <_printf_float+0x1a2>
 800586a:	6121      	str	r1, [r4, #16]
 800586c:	b913      	cbnz	r3, 8005874 <_printf_float+0x194>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	07d0      	lsls	r0, r2, #31
 8005872:	d502      	bpl.n	800587a <_printf_float+0x19a>
 8005874:	3301      	adds	r3, #1
 8005876:	440b      	add	r3, r1
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	f04f 0a00 	mov.w	sl, #0
 800587e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005880:	e7df      	b.n	8005842 <_printf_float+0x162>
 8005882:	b913      	cbnz	r3, 800588a <_printf_float+0x1aa>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	07d2      	lsls	r2, r2, #31
 8005888:	d501      	bpl.n	800588e <_printf_float+0x1ae>
 800588a:	3302      	adds	r3, #2
 800588c:	e7f4      	b.n	8005878 <_printf_float+0x198>
 800588e:	2301      	movs	r3, #1
 8005890:	e7f2      	b.n	8005878 <_printf_float+0x198>
 8005892:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005898:	4299      	cmp	r1, r3
 800589a:	db05      	blt.n	80058a8 <_printf_float+0x1c8>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	6121      	str	r1, [r4, #16]
 80058a0:	07d8      	lsls	r0, r3, #31
 80058a2:	d5ea      	bpl.n	800587a <_printf_float+0x19a>
 80058a4:	1c4b      	adds	r3, r1, #1
 80058a6:	e7e7      	b.n	8005878 <_printf_float+0x198>
 80058a8:	2900      	cmp	r1, #0
 80058aa:	bfcc      	ite	gt
 80058ac:	2201      	movgt	r2, #1
 80058ae:	f1c1 0202 	rsble	r2, r1, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	e7e0      	b.n	8005878 <_printf_float+0x198>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	055a      	lsls	r2, r3, #21
 80058ba:	d407      	bmi.n	80058cc <_printf_float+0x1ec>
 80058bc:	6923      	ldr	r3, [r4, #16]
 80058be:	4642      	mov	r2, r8
 80058c0:	4631      	mov	r1, r6
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b8      	blx	r7
 80058c6:	3001      	adds	r0, #1
 80058c8:	d12b      	bne.n	8005922 <_printf_float+0x242>
 80058ca:	e764      	b.n	8005796 <_printf_float+0xb6>
 80058cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058d0:	f240 80dd 	bls.w	8005a8e <_printf_float+0x3ae>
 80058d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d033      	beq.n	800594c <_printf_float+0x26c>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	4a35      	ldr	r2, [pc, #212]	; (80059c0 <_printf_float+0x2e0>)
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f af51 	beq.w	8005796 <_printf_float+0xb6>
 80058f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058f8:	429a      	cmp	r2, r3
 80058fa:	db02      	blt.n	8005902 <_printf_float+0x222>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	07d8      	lsls	r0, r3, #31
 8005900:	d50f      	bpl.n	8005922 <_printf_float+0x242>
 8005902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	f43f af42 	beq.w	8005796 <_printf_float+0xb6>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	f104 091a 	add.w	r9, r4, #26
 800591a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800591c:	3b01      	subs	r3, #1
 800591e:	4543      	cmp	r3, r8
 8005920:	dc09      	bgt.n	8005936 <_printf_float+0x256>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	079b      	lsls	r3, r3, #30
 8005926:	f100 8104 	bmi.w	8005b32 <_printf_float+0x452>
 800592a:	68e0      	ldr	r0, [r4, #12]
 800592c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800592e:	4298      	cmp	r0, r3
 8005930:	bfb8      	it	lt
 8005932:	4618      	movlt	r0, r3
 8005934:	e731      	b.n	800579a <_printf_float+0xba>
 8005936:	2301      	movs	r3, #1
 8005938:	464a      	mov	r2, r9
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f af28 	beq.w	8005796 <_printf_float+0xb6>
 8005946:	f108 0801 	add.w	r8, r8, #1
 800594a:	e7e6      	b.n	800591a <_printf_float+0x23a>
 800594c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800594e:	2b00      	cmp	r3, #0
 8005950:	dc38      	bgt.n	80059c4 <_printf_float+0x2e4>
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <_printf_float+0x2e0>)
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f af1a 	beq.w	8005796 <_printf_float+0xb6>
 8005962:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005966:	4313      	orrs	r3, r2
 8005968:	d102      	bne.n	8005970 <_printf_float+0x290>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	07d9      	lsls	r1, r3, #31
 800596e:	d5d8      	bpl.n	8005922 <_printf_float+0x242>
 8005970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af0b 	beq.w	8005796 <_printf_float+0xb6>
 8005980:	f04f 0900 	mov.w	r9, #0
 8005984:	f104 0a1a 	add.w	sl, r4, #26
 8005988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800598a:	425b      	negs	r3, r3
 800598c:	454b      	cmp	r3, r9
 800598e:	dc01      	bgt.n	8005994 <_printf_float+0x2b4>
 8005990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005992:	e794      	b.n	80058be <_printf_float+0x1de>
 8005994:	2301      	movs	r3, #1
 8005996:	4652      	mov	r2, sl
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f aef9 	beq.w	8005796 <_printf_float+0xb6>
 80059a4:	f109 0901 	add.w	r9, r9, #1
 80059a8:	e7ee      	b.n	8005988 <_printf_float+0x2a8>
 80059aa:	bf00      	nop
 80059ac:	7fefffff 	.word	0x7fefffff
 80059b0:	08009f96 	.word	0x08009f96
 80059b4:	08009f9a 	.word	0x08009f9a
 80059b8:	08009f9e 	.word	0x08009f9e
 80059bc:	08009fa2 	.word	0x08009fa2
 80059c0:	08009fa6 	.word	0x08009fa6
 80059c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bfa8      	it	ge
 80059cc:	461a      	movge	r2, r3
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	4691      	mov	r9, r2
 80059d2:	dc37      	bgt.n	8005a44 <_printf_float+0x364>
 80059d4:	f04f 0b00 	mov.w	fp, #0
 80059d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059dc:	f104 021a 	add.w	r2, r4, #26
 80059e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059e4:	ebaa 0309 	sub.w	r3, sl, r9
 80059e8:	455b      	cmp	r3, fp
 80059ea:	dc33      	bgt.n	8005a54 <_printf_float+0x374>
 80059ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059f0:	429a      	cmp	r2, r3
 80059f2:	db3b      	blt.n	8005a6c <_printf_float+0x38c>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07da      	lsls	r2, r3, #31
 80059f8:	d438      	bmi.n	8005a6c <_printf_float+0x38c>
 80059fa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80059fe:	eba2 0903 	sub.w	r9, r2, r3
 8005a02:	eba2 020a 	sub.w	r2, r2, sl
 8005a06:	4591      	cmp	r9, r2
 8005a08:	bfa8      	it	ge
 8005a0a:	4691      	movge	r9, r2
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dc34      	bgt.n	8005a7c <_printf_float+0x39c>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a1a:	f104 0a1a 	add.w	sl, r4, #26
 8005a1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	eba3 0309 	sub.w	r3, r3, r9
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	f77f af7a 	ble.w	8005922 <_printf_float+0x242>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f43f aeac 	beq.w	8005796 <_printf_float+0xb6>
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	e7ec      	b.n	8005a1e <_printf_float+0x33e>
 8005a44:	4613      	mov	r3, r2
 8005a46:	4631      	mov	r1, r6
 8005a48:	4642      	mov	r2, r8
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d1c0      	bne.n	80059d4 <_printf_float+0x2f4>
 8005a52:	e6a0      	b.n	8005796 <_printf_float+0xb6>
 8005a54:	2301      	movs	r3, #1
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae99 	beq.w	8005796 <_printf_float+0xb6>
 8005a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a66:	f10b 0b01 	add.w	fp, fp, #1
 8005a6a:	e7b9      	b.n	80059e0 <_printf_float+0x300>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b8      	blx	r7
 8005a76:	3001      	adds	r0, #1
 8005a78:	d1bf      	bne.n	80059fa <_printf_float+0x31a>
 8005a7a:	e68c      	b.n	8005796 <_printf_float+0xb6>
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	eb08 020a 	add.w	r2, r8, sl
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d1c2      	bne.n	8005a12 <_printf_float+0x332>
 8005a8c:	e683      	b.n	8005796 <_printf_float+0xb6>
 8005a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a90:	2a01      	cmp	r2, #1
 8005a92:	dc01      	bgt.n	8005a98 <_printf_float+0x3b8>
 8005a94:	07db      	lsls	r3, r3, #31
 8005a96:	d539      	bpl.n	8005b0c <_printf_float+0x42c>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f ae77 	beq.w	8005796 <_printf_float+0xb6>
 8005aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f ae6f 	beq.w	8005796 <_printf_float+0xb6>
 8005ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005ac4:	f7fa ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac8:	b9d8      	cbnz	r0, 8005b02 <_printf_float+0x422>
 8005aca:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ace:	f108 0201 	add.w	r2, r8, #1
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d10e      	bne.n	8005afa <_printf_float+0x41a>
 8005adc:	e65b      	b.n	8005796 <_printf_float+0xb6>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	464a      	mov	r2, r9
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f ae54 	beq.w	8005796 <_printf_float+0xb6>
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4543      	cmp	r3, r8
 8005af8:	dcf1      	bgt.n	8005ade <_printf_float+0x3fe>
 8005afa:	4653      	mov	r3, sl
 8005afc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b00:	e6de      	b.n	80058c0 <_printf_float+0x1e0>
 8005b02:	f04f 0800 	mov.w	r8, #0
 8005b06:	f104 091a 	add.w	r9, r4, #26
 8005b0a:	e7f2      	b.n	8005af2 <_printf_float+0x412>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4642      	mov	r2, r8
 8005b10:	e7df      	b.n	8005ad2 <_printf_float+0x3f2>
 8005b12:	2301      	movs	r3, #1
 8005b14:	464a      	mov	r2, r9
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f ae3a 	beq.w	8005796 <_printf_float+0xb6>
 8005b22:	f108 0801 	add.w	r8, r8, #1
 8005b26:	68e3      	ldr	r3, [r4, #12]
 8005b28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b2a:	1a5b      	subs	r3, r3, r1
 8005b2c:	4543      	cmp	r3, r8
 8005b2e:	dcf0      	bgt.n	8005b12 <_printf_float+0x432>
 8005b30:	e6fb      	b.n	800592a <_printf_float+0x24a>
 8005b32:	f04f 0800 	mov.w	r8, #0
 8005b36:	f104 0919 	add.w	r9, r4, #25
 8005b3a:	e7f4      	b.n	8005b26 <_printf_float+0x446>

08005b3c <_printf_common>:
 8005b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	4616      	mov	r6, r2
 8005b42:	4699      	mov	r9, r3
 8005b44:	688a      	ldr	r2, [r1, #8]
 8005b46:	690b      	ldr	r3, [r1, #16]
 8005b48:	4607      	mov	r7, r0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bfb8      	it	lt
 8005b4e:	4613      	movlt	r3, r2
 8005b50:	6033      	str	r3, [r6, #0]
 8005b52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b56:	460c      	mov	r4, r1
 8005b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b5c:	b10a      	cbz	r2, 8005b62 <_printf_common+0x26>
 8005b5e:	3301      	adds	r3, #1
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	0699      	lsls	r1, r3, #26
 8005b66:	bf42      	ittt	mi
 8005b68:	6833      	ldrmi	r3, [r6, #0]
 8005b6a:	3302      	addmi	r3, #2
 8005b6c:	6033      	strmi	r3, [r6, #0]
 8005b6e:	6825      	ldr	r5, [r4, #0]
 8005b70:	f015 0506 	ands.w	r5, r5, #6
 8005b74:	d106      	bne.n	8005b84 <_printf_common+0x48>
 8005b76:	f104 0a19 	add.w	sl, r4, #25
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	6832      	ldr	r2, [r6, #0]
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dc2b      	bgt.n	8005bdc <_printf_common+0xa0>
 8005b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b88:	1e13      	subs	r3, r2, #0
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	bf18      	it	ne
 8005b8e:	2301      	movne	r3, #1
 8005b90:	0692      	lsls	r2, r2, #26
 8005b92:	d430      	bmi.n	8005bf6 <_printf_common+0xba>
 8005b94:	4649      	mov	r1, r9
 8005b96:	4638      	mov	r0, r7
 8005b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b9c:	47c0      	blx	r8
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d023      	beq.n	8005bea <_printf_common+0xae>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	f003 0306 	and.w	r3, r3, #6
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	bf14      	ite	ne
 8005bae:	2500      	movne	r5, #0
 8005bb0:	6833      	ldreq	r3, [r6, #0]
 8005bb2:	f04f 0600 	mov.w	r6, #0
 8005bb6:	bf08      	it	eq
 8005bb8:	68e5      	ldreq	r5, [r4, #12]
 8005bba:	f104 041a 	add.w	r4, r4, #26
 8005bbe:	bf08      	it	eq
 8005bc0:	1aed      	subeq	r5, r5, r3
 8005bc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005bc6:	bf08      	it	eq
 8005bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bfc4      	itt	gt
 8005bd0:	1a9b      	subgt	r3, r3, r2
 8005bd2:	18ed      	addgt	r5, r5, r3
 8005bd4:	42b5      	cmp	r5, r6
 8005bd6:	d11a      	bne.n	8005c0e <_printf_common+0xd2>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e008      	b.n	8005bee <_printf_common+0xb2>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	4652      	mov	r2, sl
 8005be0:	4649      	mov	r1, r9
 8005be2:	4638      	mov	r0, r7
 8005be4:	47c0      	blx	r8
 8005be6:	3001      	adds	r0, #1
 8005be8:	d103      	bne.n	8005bf2 <_printf_common+0xb6>
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf2:	3501      	adds	r5, #1
 8005bf4:	e7c1      	b.n	8005b7a <_printf_common+0x3e>
 8005bf6:	2030      	movs	r0, #48	; 0x30
 8005bf8:	18e1      	adds	r1, r4, r3
 8005bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c04:	4422      	add	r2, r4
 8005c06:	3302      	adds	r3, #2
 8005c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c0c:	e7c2      	b.n	8005b94 <_printf_common+0x58>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4622      	mov	r2, r4
 8005c12:	4649      	mov	r1, r9
 8005c14:	4638      	mov	r0, r7
 8005c16:	47c0      	blx	r8
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d0e6      	beq.n	8005bea <_printf_common+0xae>
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7d9      	b.n	8005bd4 <_printf_common+0x98>

08005c20 <_printf_i>:
 8005c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	7e0f      	ldrb	r7, [r1, #24]
 8005c26:	4691      	mov	r9, r2
 8005c28:	2f78      	cmp	r7, #120	; 0x78
 8005c2a:	4680      	mov	r8, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	469a      	mov	sl, r3
 8005c30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c36:	d807      	bhi.n	8005c48 <_printf_i+0x28>
 8005c38:	2f62      	cmp	r7, #98	; 0x62
 8005c3a:	d80a      	bhi.n	8005c52 <_printf_i+0x32>
 8005c3c:	2f00      	cmp	r7, #0
 8005c3e:	f000 80d5 	beq.w	8005dec <_printf_i+0x1cc>
 8005c42:	2f58      	cmp	r7, #88	; 0x58
 8005c44:	f000 80c1 	beq.w	8005dca <_printf_i+0x1aa>
 8005c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c50:	e03a      	b.n	8005cc8 <_printf_i+0xa8>
 8005c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c56:	2b15      	cmp	r3, #21
 8005c58:	d8f6      	bhi.n	8005c48 <_printf_i+0x28>
 8005c5a:	a101      	add	r1, pc, #4	; (adr r1, 8005c60 <_printf_i+0x40>)
 8005c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c60:	08005cb9 	.word	0x08005cb9
 8005c64:	08005ccd 	.word	0x08005ccd
 8005c68:	08005c49 	.word	0x08005c49
 8005c6c:	08005c49 	.word	0x08005c49
 8005c70:	08005c49 	.word	0x08005c49
 8005c74:	08005c49 	.word	0x08005c49
 8005c78:	08005ccd 	.word	0x08005ccd
 8005c7c:	08005c49 	.word	0x08005c49
 8005c80:	08005c49 	.word	0x08005c49
 8005c84:	08005c49 	.word	0x08005c49
 8005c88:	08005c49 	.word	0x08005c49
 8005c8c:	08005dd3 	.word	0x08005dd3
 8005c90:	08005cf9 	.word	0x08005cf9
 8005c94:	08005d8d 	.word	0x08005d8d
 8005c98:	08005c49 	.word	0x08005c49
 8005c9c:	08005c49 	.word	0x08005c49
 8005ca0:	08005df5 	.word	0x08005df5
 8005ca4:	08005c49 	.word	0x08005c49
 8005ca8:	08005cf9 	.word	0x08005cf9
 8005cac:	08005c49 	.word	0x08005c49
 8005cb0:	08005c49 	.word	0x08005c49
 8005cb4:	08005d95 	.word	0x08005d95
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	1d1a      	adds	r2, r3, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	602a      	str	r2, [r5, #0]
 8005cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0a0      	b.n	8005e0e <_printf_i+0x1ee>
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	682b      	ldr	r3, [r5, #0]
 8005cd0:	0607      	lsls	r7, r0, #24
 8005cd2:	f103 0104 	add.w	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	d501      	bpl.n	8005cde <_printf_i+0xbe>
 8005cda:	681e      	ldr	r6, [r3, #0]
 8005cdc:	e003      	b.n	8005ce6 <_printf_i+0xc6>
 8005cde:	0646      	lsls	r6, r0, #25
 8005ce0:	d5fb      	bpl.n	8005cda <_printf_i+0xba>
 8005ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	da03      	bge.n	8005cf2 <_printf_i+0xd2>
 8005cea:	232d      	movs	r3, #45	; 0x2d
 8005cec:	4276      	negs	r6, r6
 8005cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	4859      	ldr	r0, [pc, #356]	; (8005e5c <_printf_i+0x23c>)
 8005cf6:	e012      	b.n	8005d1e <_printf_i+0xfe>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	1d19      	adds	r1, r3, #4
 8005cfe:	6029      	str	r1, [r5, #0]
 8005d00:	0605      	lsls	r5, r0, #24
 8005d02:	d501      	bpl.n	8005d08 <_printf_i+0xe8>
 8005d04:	681e      	ldr	r6, [r3, #0]
 8005d06:	e002      	b.n	8005d0e <_printf_i+0xee>
 8005d08:	0641      	lsls	r1, r0, #25
 8005d0a:	d5fb      	bpl.n	8005d04 <_printf_i+0xe4>
 8005d0c:	881e      	ldrh	r6, [r3, #0]
 8005d0e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d10:	bf0c      	ite	eq
 8005d12:	2308      	moveq	r3, #8
 8005d14:	230a      	movne	r3, #10
 8005d16:	4851      	ldr	r0, [pc, #324]	; (8005e5c <_printf_i+0x23c>)
 8005d18:	2100      	movs	r1, #0
 8005d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d1e:	6865      	ldr	r5, [r4, #4]
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	bfa8      	it	ge
 8005d24:	6821      	ldrge	r1, [r4, #0]
 8005d26:	60a5      	str	r5, [r4, #8]
 8005d28:	bfa4      	itt	ge
 8005d2a:	f021 0104 	bicge.w	r1, r1, #4
 8005d2e:	6021      	strge	r1, [r4, #0]
 8005d30:	b90e      	cbnz	r6, 8005d36 <_printf_i+0x116>
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	d04b      	beq.n	8005dce <_printf_i+0x1ae>
 8005d36:	4615      	mov	r5, r2
 8005d38:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d3c:	fb03 6711 	mls	r7, r3, r1, r6
 8005d40:	5dc7      	ldrb	r7, [r0, r7]
 8005d42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d46:	4637      	mov	r7, r6
 8005d48:	42bb      	cmp	r3, r7
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	d9f4      	bls.n	8005d38 <_printf_i+0x118>
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d10b      	bne.n	8005d6a <_printf_i+0x14a>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	07de      	lsls	r6, r3, #31
 8005d56:	d508      	bpl.n	8005d6a <_printf_i+0x14a>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6861      	ldr	r1, [r4, #4]
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	bfde      	ittt	le
 8005d60:	2330      	movle	r3, #48	; 0x30
 8005d62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d6a:	1b52      	subs	r2, r2, r5
 8005d6c:	6122      	str	r2, [r4, #16]
 8005d6e:	464b      	mov	r3, r9
 8005d70:	4621      	mov	r1, r4
 8005d72:	4640      	mov	r0, r8
 8005d74:	f8cd a000 	str.w	sl, [sp]
 8005d78:	aa03      	add	r2, sp, #12
 8005d7a:	f7ff fedf 	bl	8005b3c <_printf_common>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d14a      	bne.n	8005e18 <_printf_i+0x1f8>
 8005d82:	f04f 30ff 	mov.w	r0, #4294967295
 8005d86:	b004      	add	sp, #16
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	f043 0320 	orr.w	r3, r3, #32
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	2778      	movs	r7, #120	; 0x78
 8005d96:	4832      	ldr	r0, [pc, #200]	; (8005e60 <_printf_i+0x240>)
 8005d98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	6829      	ldr	r1, [r5, #0]
 8005da0:	061f      	lsls	r7, r3, #24
 8005da2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005da6:	d402      	bmi.n	8005dae <_printf_i+0x18e>
 8005da8:	065f      	lsls	r7, r3, #25
 8005daa:	bf48      	it	mi
 8005dac:	b2b6      	uxthmi	r6, r6
 8005dae:	07df      	lsls	r7, r3, #31
 8005db0:	bf48      	it	mi
 8005db2:	f043 0320 	orrmi.w	r3, r3, #32
 8005db6:	6029      	str	r1, [r5, #0]
 8005db8:	bf48      	it	mi
 8005dba:	6023      	strmi	r3, [r4, #0]
 8005dbc:	b91e      	cbnz	r6, 8005dc6 <_printf_i+0x1a6>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f023 0320 	bic.w	r3, r3, #32
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	e7a6      	b.n	8005d18 <_printf_i+0xf8>
 8005dca:	4824      	ldr	r0, [pc, #144]	; (8005e5c <_printf_i+0x23c>)
 8005dcc:	e7e4      	b.n	8005d98 <_printf_i+0x178>
 8005dce:	4615      	mov	r5, r2
 8005dd0:	e7bd      	b.n	8005d4e <_printf_i+0x12e>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	6826      	ldr	r6, [r4, #0]
 8005dd6:	1d18      	adds	r0, r3, #4
 8005dd8:	6961      	ldr	r1, [r4, #20]
 8005dda:	6028      	str	r0, [r5, #0]
 8005ddc:	0635      	lsls	r5, r6, #24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	d501      	bpl.n	8005de6 <_printf_i+0x1c6>
 8005de2:	6019      	str	r1, [r3, #0]
 8005de4:	e002      	b.n	8005dec <_printf_i+0x1cc>
 8005de6:	0670      	lsls	r0, r6, #25
 8005de8:	d5fb      	bpl.n	8005de2 <_printf_i+0x1c2>
 8005dea:	8019      	strh	r1, [r3, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	4615      	mov	r5, r2
 8005df0:	6123      	str	r3, [r4, #16]
 8005df2:	e7bc      	b.n	8005d6e <_printf_i+0x14e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	2100      	movs	r1, #0
 8005df8:	1d1a      	adds	r2, r3, #4
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f9d4 	bl	80061ae <memchr>
 8005e06:	b108      	cbz	r0, 8005e0c <_printf_i+0x1ec>
 8005e08:	1b40      	subs	r0, r0, r5
 8005e0a:	6060      	str	r0, [r4, #4]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	2300      	movs	r3, #0
 8005e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e16:	e7aa      	b.n	8005d6e <_printf_i+0x14e>
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	47d0      	blx	sl
 8005e22:	3001      	adds	r0, #1
 8005e24:	d0ad      	beq.n	8005d82 <_printf_i+0x162>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	079b      	lsls	r3, r3, #30
 8005e2a:	d413      	bmi.n	8005e54 <_printf_i+0x234>
 8005e2c:	68e0      	ldr	r0, [r4, #12]
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	4298      	cmp	r0, r3
 8005e32:	bfb8      	it	lt
 8005e34:	4618      	movlt	r0, r3
 8005e36:	e7a6      	b.n	8005d86 <_printf_i+0x166>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4640      	mov	r0, r8
 8005e40:	47d0      	blx	sl
 8005e42:	3001      	adds	r0, #1
 8005e44:	d09d      	beq.n	8005d82 <_printf_i+0x162>
 8005e46:	3501      	adds	r5, #1
 8005e48:	68e3      	ldr	r3, [r4, #12]
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	1a5b      	subs	r3, r3, r1
 8005e4e:	42ab      	cmp	r3, r5
 8005e50:	dcf2      	bgt.n	8005e38 <_printf_i+0x218>
 8005e52:	e7eb      	b.n	8005e2c <_printf_i+0x20c>
 8005e54:	2500      	movs	r5, #0
 8005e56:	f104 0619 	add.w	r6, r4, #25
 8005e5a:	e7f5      	b.n	8005e48 <_printf_i+0x228>
 8005e5c:	08009fa8 	.word	0x08009fa8
 8005e60:	08009fb9 	.word	0x08009fb9

08005e64 <std>:
 8005e64:	2300      	movs	r3, #0
 8005e66:	b510      	push	{r4, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e72:	6083      	str	r3, [r0, #8]
 8005e74:	8181      	strh	r1, [r0, #12]
 8005e76:	6643      	str	r3, [r0, #100]	; 0x64
 8005e78:	81c2      	strh	r2, [r0, #14]
 8005e7a:	6183      	str	r3, [r0, #24]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	2208      	movs	r2, #8
 8005e80:	305c      	adds	r0, #92	; 0x5c
 8005e82:	f000 f914 	bl	80060ae <memset>
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <std+0x58>)
 8005e88:	6224      	str	r4, [r4, #32]
 8005e8a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <std+0x5c>)
 8005e8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <std+0x60>)
 8005e92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <std+0x64>)
 8005e96:	6323      	str	r3, [r4, #48]	; 0x30
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <std+0x68>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d006      	beq.n	8005eac <std+0x48>
 8005e9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ea2:	4294      	cmp	r4, r2
 8005ea4:	d002      	beq.n	8005eac <std+0x48>
 8005ea6:	33d0      	adds	r3, #208	; 0xd0
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d105      	bne.n	8005eb8 <std+0x54>
 8005eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb4:	f000 b978 	b.w	80061a8 <__retarget_lock_init_recursive>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	08006029 	.word	0x08006029
 8005ec0:	0800604b 	.word	0x0800604b
 8005ec4:	08006083 	.word	0x08006083
 8005ec8:	080060a7 	.word	0x080060a7
 8005ecc:	2000121c 	.word	0x2000121c

08005ed0 <stdio_exit_handler>:
 8005ed0:	4a02      	ldr	r2, [pc, #8]	; (8005edc <stdio_exit_handler+0xc>)
 8005ed2:	4903      	ldr	r1, [pc, #12]	; (8005ee0 <stdio_exit_handler+0x10>)
 8005ed4:	4803      	ldr	r0, [pc, #12]	; (8005ee4 <stdio_exit_handler+0x14>)
 8005ed6:	f000 b869 	b.w	8005fac <_fwalk_sglue>
 8005eda:	bf00      	nop
 8005edc:	200000a0 	.word	0x200000a0
 8005ee0:	08007b45 	.word	0x08007b45
 8005ee4:	200000ac 	.word	0x200000ac

08005ee8 <cleanup_stdio>:
 8005ee8:	6841      	ldr	r1, [r0, #4]
 8005eea:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <cleanup_stdio+0x34>)
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	d001      	beq.n	8005ef8 <cleanup_stdio+0x10>
 8005ef4:	f001 fe26 	bl	8007b44 <_fflush_r>
 8005ef8:	68a1      	ldr	r1, [r4, #8]
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <cleanup_stdio+0x38>)
 8005efc:	4299      	cmp	r1, r3
 8005efe:	d002      	beq.n	8005f06 <cleanup_stdio+0x1e>
 8005f00:	4620      	mov	r0, r4
 8005f02:	f001 fe1f 	bl	8007b44 <_fflush_r>
 8005f06:	68e1      	ldr	r1, [r4, #12]
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <cleanup_stdio+0x3c>)
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	d004      	beq.n	8005f18 <cleanup_stdio+0x30>
 8005f0e:	4620      	mov	r0, r4
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f001 be16 	b.w	8007b44 <_fflush_r>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000121c 	.word	0x2000121c
 8005f20:	20001284 	.word	0x20001284
 8005f24:	200012ec 	.word	0x200012ec

08005f28 <global_stdio_init.part.0>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <global_stdio_init.part.0+0x30>)
 8005f2c:	4c0b      	ldr	r4, [pc, #44]	; (8005f5c <global_stdio_init.part.0+0x34>)
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <global_stdio_init.part.0+0x38>)
 8005f30:	4620      	mov	r0, r4
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2104      	movs	r1, #4
 8005f36:	2200      	movs	r2, #0
 8005f38:	f7ff ff94 	bl	8005e64 <std>
 8005f3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f40:	2201      	movs	r2, #1
 8005f42:	2109      	movs	r1, #9
 8005f44:	f7ff ff8e 	bl	8005e64 <std>
 8005f48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f52:	2112      	movs	r1, #18
 8005f54:	f7ff bf86 	b.w	8005e64 <std>
 8005f58:	20001354 	.word	0x20001354
 8005f5c:	2000121c 	.word	0x2000121c
 8005f60:	08005ed1 	.word	0x08005ed1

08005f64 <__sfp_lock_acquire>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sfp_lock_acquire+0x8>)
 8005f66:	f000 b920 	b.w	80061aa <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	2000135d 	.word	0x2000135d

08005f70 <__sfp_lock_release>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sfp_lock_release+0x8>)
 8005f72:	f000 b91b 	b.w	80061ac <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	2000135d 	.word	0x2000135d

08005f7c <__sinit>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f7ff fff0 	bl	8005f64 <__sfp_lock_acquire>
 8005f84:	6a23      	ldr	r3, [r4, #32]
 8005f86:	b11b      	cbz	r3, 8005f90 <__sinit+0x14>
 8005f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f8c:	f7ff bff0 	b.w	8005f70 <__sfp_lock_release>
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <__sinit+0x28>)
 8005f92:	6223      	str	r3, [r4, #32]
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__sinit+0x2c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f5      	bne.n	8005f88 <__sinit+0xc>
 8005f9c:	f7ff ffc4 	bl	8005f28 <global_stdio_init.part.0>
 8005fa0:	e7f2      	b.n	8005f88 <__sinit+0xc>
 8005fa2:	bf00      	nop
 8005fa4:	08005ee9 	.word	0x08005ee9
 8005fa8:	20001354 	.word	0x20001354

08005fac <_fwalk_sglue>:
 8005fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	4688      	mov	r8, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005fc0:	d505      	bpl.n	8005fce <_fwalk_sglue+0x22>
 8005fc2:	6824      	ldr	r4, [r4, #0]
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	d1f7      	bne.n	8005fb8 <_fwalk_sglue+0xc>
 8005fc8:	4630      	mov	r0, r6
 8005fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fce:	89ab      	ldrh	r3, [r5, #12]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d907      	bls.n	8005fe4 <_fwalk_sglue+0x38>
 8005fd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <_fwalk_sglue+0x38>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4638      	mov	r0, r7
 8005fe0:	47c0      	blx	r8
 8005fe2:	4306      	orrs	r6, r0
 8005fe4:	3568      	adds	r5, #104	; 0x68
 8005fe6:	e7e9      	b.n	8005fbc <_fwalk_sglue+0x10>

08005fe8 <siprintf>:
 8005fe8:	b40e      	push	{r1, r2, r3}
 8005fea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fee:	b500      	push	{lr}
 8005ff0:	b09c      	sub	sp, #112	; 0x70
 8005ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	9006      	str	r0, [sp, #24]
 8005ff8:	9107      	str	r1, [sp, #28]
 8005ffa:	9104      	str	r1, [sp, #16]
 8005ffc:	4808      	ldr	r0, [pc, #32]	; (8006020 <siprintf+0x38>)
 8005ffe:	4909      	ldr	r1, [pc, #36]	; (8006024 <siprintf+0x3c>)
 8006000:	f853 2b04 	ldr.w	r2, [r3], #4
 8006004:	9105      	str	r1, [sp, #20]
 8006006:	6800      	ldr	r0, [r0, #0]
 8006008:	a902      	add	r1, sp, #8
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	f001 fc1a 	bl	8007844 <_svfiprintf_r>
 8006010:	2200      	movs	r2, #0
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	b01c      	add	sp, #112	; 0x70
 8006018:	f85d eb04 	ldr.w	lr, [sp], #4
 800601c:	b003      	add	sp, #12
 800601e:	4770      	bx	lr
 8006020:	200000f8 	.word	0x200000f8
 8006024:	ffff0208 	.word	0xffff0208

08006028 <__sread>:
 8006028:	b510      	push	{r4, lr}
 800602a:	460c      	mov	r4, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	f000 f86c 	bl	800610c <_read_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	bfab      	itete	ge
 8006038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800603a:	89a3      	ldrhlt	r3, [r4, #12]
 800603c:	181b      	addge	r3, r3, r0
 800603e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006042:	bfac      	ite	ge
 8006044:	6563      	strge	r3, [r4, #84]	; 0x54
 8006046:	81a3      	strhlt	r3, [r4, #12]
 8006048:	bd10      	pop	{r4, pc}

0800604a <__swrite>:
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	461f      	mov	r7, r3
 8006050:	898b      	ldrh	r3, [r1, #12]
 8006052:	4605      	mov	r5, r0
 8006054:	05db      	lsls	r3, r3, #23
 8006056:	460c      	mov	r4, r1
 8006058:	4616      	mov	r6, r2
 800605a:	d505      	bpl.n	8006068 <__swrite+0x1e>
 800605c:	2302      	movs	r3, #2
 800605e:	2200      	movs	r2, #0
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f000 f840 	bl	80060e8 <_lseek_r>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	4632      	mov	r2, r6
 800606c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	4628      	mov	r0, r5
 8006074:	463b      	mov	r3, r7
 8006076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b857 	b.w	8006130 <_write_r>

08006082 <__sseek>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 f82d 	bl	80060e8 <_lseek_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	bf15      	itete	ne
 8006094:	6560      	strne	r0, [r4, #84]	; 0x54
 8006096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800609a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strheq	r3, [r4, #12]
 80060a0:	bf18      	it	ne
 80060a2:	81a3      	strhne	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__sclose>:
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 b80d 	b.w	80060c8 <_close_r>

080060ae <memset>:
 80060ae:	4603      	mov	r3, r0
 80060b0:	4402      	add	r2, r0
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d100      	bne.n	80060b8 <memset+0xa>
 80060b6:	4770      	bx	lr
 80060b8:	f803 1b01 	strb.w	r1, [r3], #1
 80060bc:	e7f9      	b.n	80060b2 <memset+0x4>
	...

080060c0 <_localeconv_r>:
 80060c0:	4800      	ldr	r0, [pc, #0]	; (80060c4 <_localeconv_r+0x4>)
 80060c2:	4770      	bx	lr
 80060c4:	200001ec 	.word	0x200001ec

080060c8 <_close_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	2300      	movs	r3, #0
 80060cc:	4d05      	ldr	r5, [pc, #20]	; (80060e4 <_close_r+0x1c>)
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb fcfe 	bl	8001ad4 <_close>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_close_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_close_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20001358 	.word	0x20001358

080060e8 <_lseek_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	2200      	movs	r2, #0
 80060f2:	4d05      	ldr	r5, [pc, #20]	; (8006108 <_lseek_r+0x20>)
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fb fd10 	bl	8001b1c <_lseek>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_lseek_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_lseek_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20001358 	.word	0x20001358

0800610c <_read_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	4611      	mov	r1, r2
 8006114:	2200      	movs	r2, #0
 8006116:	4d05      	ldr	r5, [pc, #20]	; (800612c <_read_r+0x20>)
 8006118:	602a      	str	r2, [r5, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f7fb fca1 	bl	8001a62 <_read>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_read_r+0x1e>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_read_r+0x1e>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20001358 	.word	0x20001358

08006130 <_write_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	2200      	movs	r2, #0
 800613a:	4d05      	ldr	r5, [pc, #20]	; (8006150 <_write_r+0x20>)
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fb fcac 	bl	8001a9c <_write>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_write_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_write_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20001358 	.word	0x20001358

08006154 <__errno>:
 8006154:	4b01      	ldr	r3, [pc, #4]	; (800615c <__errno+0x8>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	200000f8 	.word	0x200000f8

08006160 <__libc_init_array>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	2600      	movs	r6, #0
 8006164:	4d0c      	ldr	r5, [pc, #48]	; (8006198 <__libc_init_array+0x38>)
 8006166:	4c0d      	ldr	r4, [pc, #52]	; (800619c <__libc_init_array+0x3c>)
 8006168:	1b64      	subs	r4, r4, r5
 800616a:	10a4      	asrs	r4, r4, #2
 800616c:	42a6      	cmp	r6, r4
 800616e:	d109      	bne.n	8006184 <__libc_init_array+0x24>
 8006170:	f002 fbe4 	bl	800893c <_init>
 8006174:	2600      	movs	r6, #0
 8006176:	4d0a      	ldr	r5, [pc, #40]	; (80061a0 <__libc_init_array+0x40>)
 8006178:	4c0a      	ldr	r4, [pc, #40]	; (80061a4 <__libc_init_array+0x44>)
 800617a:	1b64      	subs	r4, r4, r5
 800617c:	10a4      	asrs	r4, r4, #2
 800617e:	42a6      	cmp	r6, r4
 8006180:	d105      	bne.n	800618e <__libc_init_array+0x2e>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f855 3b04 	ldr.w	r3, [r5], #4
 8006188:	4798      	blx	r3
 800618a:	3601      	adds	r6, #1
 800618c:	e7ee      	b.n	800616c <__libc_init_array+0xc>
 800618e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006192:	4798      	blx	r3
 8006194:	3601      	adds	r6, #1
 8006196:	e7f2      	b.n	800617e <__libc_init_array+0x1e>
 8006198:	0800a378 	.word	0x0800a378
 800619c:	0800a378 	.word	0x0800a378
 80061a0:	0800a378 	.word	0x0800a378
 80061a4:	0800a37c 	.word	0x0800a37c

080061a8 <__retarget_lock_init_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_acquire_recursive>:
 80061aa:	4770      	bx	lr

080061ac <__retarget_lock_release_recursive>:
 80061ac:	4770      	bx	lr

080061ae <memchr>:
 80061ae:	4603      	mov	r3, r0
 80061b0:	b510      	push	{r4, lr}
 80061b2:	b2c9      	uxtb	r1, r1
 80061b4:	4402      	add	r2, r0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	d101      	bne.n	80061c0 <memchr+0x12>
 80061bc:	2000      	movs	r0, #0
 80061be:	e003      	b.n	80061c8 <memchr+0x1a>
 80061c0:	7804      	ldrb	r4, [r0, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	428c      	cmp	r4, r1
 80061c6:	d1f6      	bne.n	80061b6 <memchr+0x8>
 80061c8:	bd10      	pop	{r4, pc}

080061ca <quorem>:
 80061ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ce:	6903      	ldr	r3, [r0, #16]
 80061d0:	690c      	ldr	r4, [r1, #16]
 80061d2:	4607      	mov	r7, r0
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	db7f      	blt.n	80062d8 <quorem+0x10e>
 80061d8:	3c01      	subs	r4, #1
 80061da:	f100 0514 	add.w	r5, r0, #20
 80061de:	f101 0814 	add.w	r8, r1, #20
 80061e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f0:	3301      	adds	r3, #1
 80061f2:	429a      	cmp	r2, r3
 80061f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80061f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006200:	d331      	bcc.n	8006266 <quorem+0x9c>
 8006202:	f04f 0e00 	mov.w	lr, #0
 8006206:	4640      	mov	r0, r8
 8006208:	46ac      	mov	ip, r5
 800620a:	46f2      	mov	sl, lr
 800620c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006210:	b293      	uxth	r3, r2
 8006212:	fb06 e303 	mla	r3, r6, r3, lr
 8006216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800621a:	0c1a      	lsrs	r2, r3, #16
 800621c:	b29b      	uxth	r3, r3
 800621e:	fb06 220e 	mla	r2, r6, lr, r2
 8006222:	ebaa 0303 	sub.w	r3, sl, r3
 8006226:	f8dc a000 	ldr.w	sl, [ip]
 800622a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800622e:	fa1f fa8a 	uxth.w	sl, sl
 8006232:	4453      	add	r3, sl
 8006234:	f8dc a000 	ldr.w	sl, [ip]
 8006238:	b292      	uxth	r2, r2
 800623a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800623e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006248:	4581      	cmp	r9, r0
 800624a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800624e:	f84c 3b04 	str.w	r3, [ip], #4
 8006252:	d2db      	bcs.n	800620c <quorem+0x42>
 8006254:	f855 300b 	ldr.w	r3, [r5, fp]
 8006258:	b92b      	cbnz	r3, 8006266 <quorem+0x9c>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	3b04      	subs	r3, #4
 800625e:	429d      	cmp	r5, r3
 8006260:	461a      	mov	r2, r3
 8006262:	d32d      	bcc.n	80062c0 <quorem+0xf6>
 8006264:	613c      	str	r4, [r7, #16]
 8006266:	4638      	mov	r0, r7
 8006268:	f001 f994 	bl	8007594 <__mcmp>
 800626c:	2800      	cmp	r0, #0
 800626e:	db23      	blt.n	80062b8 <quorem+0xee>
 8006270:	4629      	mov	r1, r5
 8006272:	2000      	movs	r0, #0
 8006274:	3601      	adds	r6, #1
 8006276:	f858 2b04 	ldr.w	r2, [r8], #4
 800627a:	f8d1 c000 	ldr.w	ip, [r1]
 800627e:	b293      	uxth	r3, r2
 8006280:	1ac3      	subs	r3, r0, r3
 8006282:	0c12      	lsrs	r2, r2, #16
 8006284:	fa1f f08c 	uxth.w	r0, ip
 8006288:	4403      	add	r3, r0
 800628a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800628e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006292:	b29b      	uxth	r3, r3
 8006294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006298:	45c1      	cmp	r9, r8
 800629a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800629e:	f841 3b04 	str.w	r3, [r1], #4
 80062a2:	d2e8      	bcs.n	8006276 <quorem+0xac>
 80062a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ac:	b922      	cbnz	r2, 80062b8 <quorem+0xee>
 80062ae:	3b04      	subs	r3, #4
 80062b0:	429d      	cmp	r5, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	d30a      	bcc.n	80062cc <quorem+0x102>
 80062b6:	613c      	str	r4, [r7, #16]
 80062b8:	4630      	mov	r0, r6
 80062ba:	b003      	add	sp, #12
 80062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	3b04      	subs	r3, #4
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	d1cd      	bne.n	8006264 <quorem+0x9a>
 80062c8:	3c01      	subs	r4, #1
 80062ca:	e7c8      	b.n	800625e <quorem+0x94>
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	3b04      	subs	r3, #4
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d1f0      	bne.n	80062b6 <quorem+0xec>
 80062d4:	3c01      	subs	r4, #1
 80062d6:	e7eb      	b.n	80062b0 <quorem+0xe6>
 80062d8:	2000      	movs	r0, #0
 80062da:	e7ee      	b.n	80062ba <quorem+0xf0>
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <_dtoa_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4616      	mov	r6, r2
 80062e6:	461f      	mov	r7, r3
 80062e8:	69c4      	ldr	r4, [r0, #28]
 80062ea:	b099      	sub	sp, #100	; 0x64
 80062ec:	4605      	mov	r5, r0
 80062ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062f6:	b974      	cbnz	r4, 8006316 <_dtoa_r+0x36>
 80062f8:	2010      	movs	r0, #16
 80062fa:	f000 fe1d 	bl	8006f38 <malloc>
 80062fe:	4602      	mov	r2, r0
 8006300:	61e8      	str	r0, [r5, #28]
 8006302:	b920      	cbnz	r0, 800630e <_dtoa_r+0x2e>
 8006304:	21ef      	movs	r1, #239	; 0xef
 8006306:	4bac      	ldr	r3, [pc, #688]	; (80065b8 <_dtoa_r+0x2d8>)
 8006308:	48ac      	ldr	r0, [pc, #688]	; (80065bc <_dtoa_r+0x2dc>)
 800630a:	f001 fc7b 	bl	8007c04 <__assert_func>
 800630e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006312:	6004      	str	r4, [r0, #0]
 8006314:	60c4      	str	r4, [r0, #12]
 8006316:	69eb      	ldr	r3, [r5, #28]
 8006318:	6819      	ldr	r1, [r3, #0]
 800631a:	b151      	cbz	r1, 8006332 <_dtoa_r+0x52>
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	2301      	movs	r3, #1
 8006320:	4093      	lsls	r3, r2
 8006322:	604a      	str	r2, [r1, #4]
 8006324:	608b      	str	r3, [r1, #8]
 8006326:	4628      	mov	r0, r5
 8006328:	f000 fefa 	bl	8007120 <_Bfree>
 800632c:	2200      	movs	r2, #0
 800632e:	69eb      	ldr	r3, [r5, #28]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	1e3b      	subs	r3, r7, #0
 8006334:	bfaf      	iteee	ge
 8006336:	2300      	movge	r3, #0
 8006338:	2201      	movlt	r2, #1
 800633a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800633e:	9305      	strlt	r3, [sp, #20]
 8006340:	bfa8      	it	ge
 8006342:	f8c8 3000 	strge.w	r3, [r8]
 8006346:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800634a:	4b9d      	ldr	r3, [pc, #628]	; (80065c0 <_dtoa_r+0x2e0>)
 800634c:	bfb8      	it	lt
 800634e:	f8c8 2000 	strlt.w	r2, [r8]
 8006352:	ea33 0309 	bics.w	r3, r3, r9
 8006356:	d119      	bne.n	800638c <_dtoa_r+0xac>
 8006358:	f242 730f 	movw	r3, #9999	; 0x270f
 800635c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006364:	4333      	orrs	r3, r6
 8006366:	f000 8589 	beq.w	8006e7c <_dtoa_r+0xb9c>
 800636a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800636c:	b953      	cbnz	r3, 8006384 <_dtoa_r+0xa4>
 800636e:	4b95      	ldr	r3, [pc, #596]	; (80065c4 <_dtoa_r+0x2e4>)
 8006370:	e023      	b.n	80063ba <_dtoa_r+0xda>
 8006372:	4b95      	ldr	r3, [pc, #596]	; (80065c8 <_dtoa_r+0x2e8>)
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	3308      	adds	r3, #8
 8006378:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	9803      	ldr	r0, [sp, #12]
 800637e:	b019      	add	sp, #100	; 0x64
 8006380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006384:	4b8f      	ldr	r3, [pc, #572]	; (80065c4 <_dtoa_r+0x2e4>)
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	3303      	adds	r3, #3
 800638a:	e7f5      	b.n	8006378 <_dtoa_r+0x98>
 800638c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006390:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006398:	2200      	movs	r2, #0
 800639a:	2300      	movs	r3, #0
 800639c:	f7fa fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80063a0:	4680      	mov	r8, r0
 80063a2:	b160      	cbz	r0, 80063be <_dtoa_r+0xde>
 80063a4:	2301      	movs	r3, #1
 80063a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8562 	beq.w	8006e76 <_dtoa_r+0xb96>
 80063b2:	4b86      	ldr	r3, [pc, #536]	; (80065cc <_dtoa_r+0x2ec>)
 80063b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	e7de      	b.n	800637c <_dtoa_r+0x9c>
 80063be:	ab16      	add	r3, sp, #88	; 0x58
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	ab17      	add	r3, sp, #92	; 0x5c
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4628      	mov	r0, r5
 80063c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063cc:	f001 f98a 	bl	80076e4 <__d2b>
 80063d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063d4:	4682      	mov	sl, r0
 80063d6:	2c00      	cmp	r4, #0
 80063d8:	d07e      	beq.n	80064d8 <_dtoa_r+0x1f8>
 80063da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063f4:	4619      	mov	r1, r3
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b75      	ldr	r3, [pc, #468]	; (80065d0 <_dtoa_r+0x2f0>)
 80063fa:	f7f9 feb5 	bl	8000168 <__aeabi_dsub>
 80063fe:	a368      	add	r3, pc, #416	; (adr r3, 80065a0 <_dtoa_r+0x2c0>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f7fa f868 	bl	80004d8 <__aeabi_dmul>
 8006408:	a367      	add	r3, pc, #412	; (adr r3, 80065a8 <_dtoa_r+0x2c8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 fead 	bl	800016c <__adddf3>
 8006412:	4606      	mov	r6, r0
 8006414:	4620      	mov	r0, r4
 8006416:	460f      	mov	r7, r1
 8006418:	f7f9 fff4 	bl	8000404 <__aeabi_i2d>
 800641c:	a364      	add	r3, pc, #400	; (adr r3, 80065b0 <_dtoa_r+0x2d0>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7fa f859 	bl	80004d8 <__aeabi_dmul>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	f7f9 fe9d 	bl	800016c <__adddf3>
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	f7fa faff 	bl	8000a38 <__aeabi_d2iz>
 800643a:	2200      	movs	r2, #0
 800643c:	4683      	mov	fp, r0
 800643e:	2300      	movs	r3, #0
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7fa faba 	bl	80009bc <__aeabi_dcmplt>
 8006448:	b148      	cbz	r0, 800645e <_dtoa_r+0x17e>
 800644a:	4658      	mov	r0, fp
 800644c:	f7f9 ffda 	bl	8000404 <__aeabi_i2d>
 8006450:	4632      	mov	r2, r6
 8006452:	463b      	mov	r3, r7
 8006454:	f7fa faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8006458:	b908      	cbnz	r0, 800645e <_dtoa_r+0x17e>
 800645a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800645e:	f1bb 0f16 	cmp.w	fp, #22
 8006462:	d857      	bhi.n	8006514 <_dtoa_r+0x234>
 8006464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006468:	4b5a      	ldr	r3, [pc, #360]	; (80065d4 <_dtoa_r+0x2f4>)
 800646a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7fa faa3 	bl	80009bc <__aeabi_dcmplt>
 8006476:	2800      	cmp	r0, #0
 8006478:	d04e      	beq.n	8006518 <_dtoa_r+0x238>
 800647a:	2300      	movs	r3, #0
 800647c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006480:	930f      	str	r3, [sp, #60]	; 0x3c
 8006482:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006484:	1b1b      	subs	r3, r3, r4
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	bf46      	itte	mi
 800648a:	f1c3 0901 	rsbmi	r9, r3, #1
 800648e:	2300      	movmi	r3, #0
 8006490:	f04f 0900 	movpl.w	r9, #0
 8006494:	9209      	str	r2, [sp, #36]	; 0x24
 8006496:	bf48      	it	mi
 8006498:	9309      	strmi	r3, [sp, #36]	; 0x24
 800649a:	f1bb 0f00 	cmp.w	fp, #0
 800649e:	db3d      	blt.n	800651c <_dtoa_r+0x23c>
 80064a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80064a6:	445b      	add	r3, fp
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	2300      	movs	r3, #0
 80064ac:	930a      	str	r3, [sp, #40]	; 0x28
 80064ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b0:	2b09      	cmp	r3, #9
 80064b2:	d867      	bhi.n	8006584 <_dtoa_r+0x2a4>
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	bfc4      	itt	gt
 80064b8:	3b04      	subgt	r3, #4
 80064ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064be:	bfc8      	it	gt
 80064c0:	2400      	movgt	r4, #0
 80064c2:	f1a3 0302 	sub.w	r3, r3, #2
 80064c6:	bfd8      	it	le
 80064c8:	2401      	movle	r4, #1
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	f200 8086 	bhi.w	80065dc <_dtoa_r+0x2fc>
 80064d0:	e8df f003 	tbb	[pc, r3]
 80064d4:	5637392c 	.word	0x5637392c
 80064d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064dc:	441c      	add	r4, r3
 80064de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	bfc1      	itttt	gt
 80064e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064ea:	fa09 f903 	lslgt.w	r9, r9, r3
 80064ee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80064f2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064f6:	bfd6      	itet	le
 80064f8:	f1c3 0320 	rsble	r3, r3, #32
 80064fc:	ea49 0003 	orrgt.w	r0, r9, r3
 8006500:	fa06 f003 	lslle.w	r0, r6, r3
 8006504:	f7f9 ff6e 	bl	80003e4 <__aeabi_ui2d>
 8006508:	2201      	movs	r2, #1
 800650a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800650e:	3c01      	subs	r4, #1
 8006510:	9213      	str	r2, [sp, #76]	; 0x4c
 8006512:	e76f      	b.n	80063f4 <_dtoa_r+0x114>
 8006514:	2301      	movs	r3, #1
 8006516:	e7b3      	b.n	8006480 <_dtoa_r+0x1a0>
 8006518:	900f      	str	r0, [sp, #60]	; 0x3c
 800651a:	e7b2      	b.n	8006482 <_dtoa_r+0x1a2>
 800651c:	f1cb 0300 	rsb	r3, fp, #0
 8006520:	930a      	str	r3, [sp, #40]	; 0x28
 8006522:	2300      	movs	r3, #0
 8006524:	eba9 090b 	sub.w	r9, r9, fp
 8006528:	930e      	str	r3, [sp, #56]	; 0x38
 800652a:	e7c0      	b.n	80064ae <_dtoa_r+0x1ce>
 800652c:	2300      	movs	r3, #0
 800652e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006532:	2b00      	cmp	r3, #0
 8006534:	dc55      	bgt.n	80065e2 <_dtoa_r+0x302>
 8006536:	2301      	movs	r3, #1
 8006538:	461a      	mov	r2, r3
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	9308      	str	r3, [sp, #32]
 800653e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006540:	e00b      	b.n	800655a <_dtoa_r+0x27a>
 8006542:	2301      	movs	r3, #1
 8006544:	e7f3      	b.n	800652e <_dtoa_r+0x24e>
 8006546:	2300      	movs	r3, #0
 8006548:	930b      	str	r3, [sp, #44]	; 0x2c
 800654a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800654c:	445b      	add	r3, fp
 800654e:	9306      	str	r3, [sp, #24]
 8006550:	3301      	adds	r3, #1
 8006552:	2b01      	cmp	r3, #1
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	bfb8      	it	lt
 8006558:	2301      	movlt	r3, #1
 800655a:	2100      	movs	r1, #0
 800655c:	2204      	movs	r2, #4
 800655e:	69e8      	ldr	r0, [r5, #28]
 8006560:	f102 0614 	add.w	r6, r2, #20
 8006564:	429e      	cmp	r6, r3
 8006566:	d940      	bls.n	80065ea <_dtoa_r+0x30a>
 8006568:	6041      	str	r1, [r0, #4]
 800656a:	4628      	mov	r0, r5
 800656c:	f000 fd98 	bl	80070a0 <_Balloc>
 8006570:	9003      	str	r0, [sp, #12]
 8006572:	2800      	cmp	r0, #0
 8006574:	d13c      	bne.n	80065f0 <_dtoa_r+0x310>
 8006576:	4602      	mov	r2, r0
 8006578:	f240 11af 	movw	r1, #431	; 0x1af
 800657c:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <_dtoa_r+0x2f8>)
 800657e:	e6c3      	b.n	8006308 <_dtoa_r+0x28>
 8006580:	2301      	movs	r3, #1
 8006582:	e7e1      	b.n	8006548 <_dtoa_r+0x268>
 8006584:	2401      	movs	r4, #1
 8006586:	2300      	movs	r3, #0
 8006588:	940b      	str	r4, [sp, #44]	; 0x2c
 800658a:	9322      	str	r3, [sp, #136]	; 0x88
 800658c:	f04f 33ff 	mov.w	r3, #4294967295
 8006590:	2200      	movs	r2, #0
 8006592:	9306      	str	r3, [sp, #24]
 8006594:	9308      	str	r3, [sp, #32]
 8006596:	2312      	movs	r3, #18
 8006598:	e7d1      	b.n	800653e <_dtoa_r+0x25e>
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w
 80065a0:	636f4361 	.word	0x636f4361
 80065a4:	3fd287a7 	.word	0x3fd287a7
 80065a8:	8b60c8b3 	.word	0x8b60c8b3
 80065ac:	3fc68a28 	.word	0x3fc68a28
 80065b0:	509f79fb 	.word	0x509f79fb
 80065b4:	3fd34413 	.word	0x3fd34413
 80065b8:	08009fd7 	.word	0x08009fd7
 80065bc:	08009fee 	.word	0x08009fee
 80065c0:	7ff00000 	.word	0x7ff00000
 80065c4:	08009fd3 	.word	0x08009fd3
 80065c8:	08009fca 	.word	0x08009fca
 80065cc:	08009fa7 	.word	0x08009fa7
 80065d0:	3ff80000 	.word	0x3ff80000
 80065d4:	0800a0d8 	.word	0x0800a0d8
 80065d8:	0800a046 	.word	0x0800a046
 80065dc:	2301      	movs	r3, #1
 80065de:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e0:	e7d4      	b.n	800658c <_dtoa_r+0x2ac>
 80065e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065e4:	9306      	str	r3, [sp, #24]
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	e7b7      	b.n	800655a <_dtoa_r+0x27a>
 80065ea:	3101      	adds	r1, #1
 80065ec:	0052      	lsls	r2, r2, #1
 80065ee:	e7b7      	b.n	8006560 <_dtoa_r+0x280>
 80065f0:	69eb      	ldr	r3, [r5, #28]
 80065f2:	9a03      	ldr	r2, [sp, #12]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	9b08      	ldr	r3, [sp, #32]
 80065f8:	2b0e      	cmp	r3, #14
 80065fa:	f200 80a8 	bhi.w	800674e <_dtoa_r+0x46e>
 80065fe:	2c00      	cmp	r4, #0
 8006600:	f000 80a5 	beq.w	800674e <_dtoa_r+0x46e>
 8006604:	f1bb 0f00 	cmp.w	fp, #0
 8006608:	dd34      	ble.n	8006674 <_dtoa_r+0x394>
 800660a:	4b9a      	ldr	r3, [pc, #616]	; (8006874 <_dtoa_r+0x594>)
 800660c:	f00b 020f 	and.w	r2, fp, #15
 8006610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006614:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800661c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006620:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006624:	d016      	beq.n	8006654 <_dtoa_r+0x374>
 8006626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800662a:	4b93      	ldr	r3, [pc, #588]	; (8006878 <_dtoa_r+0x598>)
 800662c:	2703      	movs	r7, #3
 800662e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006632:	f7fa f87b 	bl	800072c <__aeabi_ddiv>
 8006636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800663a:	f004 040f 	and.w	r4, r4, #15
 800663e:	4e8e      	ldr	r6, [pc, #568]	; (8006878 <_dtoa_r+0x598>)
 8006640:	b954      	cbnz	r4, 8006658 <_dtoa_r+0x378>
 8006642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800664a:	f7fa f86f 	bl	800072c <__aeabi_ddiv>
 800664e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006652:	e029      	b.n	80066a8 <_dtoa_r+0x3c8>
 8006654:	2702      	movs	r7, #2
 8006656:	e7f2      	b.n	800663e <_dtoa_r+0x35e>
 8006658:	07e1      	lsls	r1, r4, #31
 800665a:	d508      	bpl.n	800666e <_dtoa_r+0x38e>
 800665c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006660:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006664:	f7f9 ff38 	bl	80004d8 <__aeabi_dmul>
 8006668:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800666c:	3701      	adds	r7, #1
 800666e:	1064      	asrs	r4, r4, #1
 8006670:	3608      	adds	r6, #8
 8006672:	e7e5      	b.n	8006640 <_dtoa_r+0x360>
 8006674:	f000 80a5 	beq.w	80067c2 <_dtoa_r+0x4e2>
 8006678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800667c:	f1cb 0400 	rsb	r4, fp, #0
 8006680:	4b7c      	ldr	r3, [pc, #496]	; (8006874 <_dtoa_r+0x594>)
 8006682:	f004 020f 	and.w	r2, r4, #15
 8006686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 ff23 	bl	80004d8 <__aeabi_dmul>
 8006692:	2702      	movs	r7, #2
 8006694:	2300      	movs	r3, #0
 8006696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800669a:	4e77      	ldr	r6, [pc, #476]	; (8006878 <_dtoa_r+0x598>)
 800669c:	1124      	asrs	r4, r4, #4
 800669e:	2c00      	cmp	r4, #0
 80066a0:	f040 8084 	bne.w	80067ac <_dtoa_r+0x4cc>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1d2      	bne.n	800664e <_dtoa_r+0x36e>
 80066a8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8087 	beq.w	80067c6 <_dtoa_r+0x4e6>
 80066b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066bc:	2200      	movs	r2, #0
 80066be:	4b6f      	ldr	r3, [pc, #444]	; (800687c <_dtoa_r+0x59c>)
 80066c0:	f7fa f97c 	bl	80009bc <__aeabi_dcmplt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d07e      	beq.n	80067c6 <_dtoa_r+0x4e6>
 80066c8:	9b08      	ldr	r3, [sp, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d07b      	beq.n	80067c6 <_dtoa_r+0x4e6>
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd38      	ble.n	8006746 <_dtoa_r+0x466>
 80066d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066d8:	2200      	movs	r2, #0
 80066da:	4b69      	ldr	r3, [pc, #420]	; (8006880 <_dtoa_r+0x5a0>)
 80066dc:	f7f9 fefc 	bl	80004d8 <__aeabi_dmul>
 80066e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e4:	9c06      	ldr	r4, [sp, #24]
 80066e6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80066ea:	3701      	adds	r7, #1
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7f9 fe89 	bl	8000404 <__aeabi_i2d>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	2200      	movs	r2, #0
 80066fc:	4b61      	ldr	r3, [pc, #388]	; (8006884 <_dtoa_r+0x5a4>)
 80066fe:	f7f9 fd35 	bl	800016c <__adddf3>
 8006702:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800670a:	9611      	str	r6, [sp, #68]	; 0x44
 800670c:	2c00      	cmp	r4, #0
 800670e:	d15d      	bne.n	80067cc <_dtoa_r+0x4ec>
 8006710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006714:	2200      	movs	r2, #0
 8006716:	4b5c      	ldr	r3, [pc, #368]	; (8006888 <_dtoa_r+0x5a8>)
 8006718:	f7f9 fd26 	bl	8000168 <__aeabi_dsub>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006724:	4633      	mov	r3, r6
 8006726:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006728:	f7fa f966 	bl	80009f8 <__aeabi_dcmpgt>
 800672c:	2800      	cmp	r0, #0
 800672e:	f040 8295 	bne.w	8006c5c <_dtoa_r+0x97c>
 8006732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006738:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800673c:	f7fa f93e 	bl	80009bc <__aeabi_dcmplt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 8289 	bne.w	8006c58 <_dtoa_r+0x978>
 8006746:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800674a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800674e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f2c0 8151 	blt.w	80069f8 <_dtoa_r+0x718>
 8006756:	f1bb 0f0e 	cmp.w	fp, #14
 800675a:	f300 814d 	bgt.w	80069f8 <_dtoa_r+0x718>
 800675e:	4b45      	ldr	r3, [pc, #276]	; (8006874 <_dtoa_r+0x594>)
 8006760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006764:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006768:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800676c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800676e:	2b00      	cmp	r3, #0
 8006770:	f280 80da 	bge.w	8006928 <_dtoa_r+0x648>
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f300 80d6 	bgt.w	8006928 <_dtoa_r+0x648>
 800677c:	f040 826b 	bne.w	8006c56 <_dtoa_r+0x976>
 8006780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006784:	2200      	movs	r2, #0
 8006786:	4b40      	ldr	r3, [pc, #256]	; (8006888 <_dtoa_r+0x5a8>)
 8006788:	f7f9 fea6 	bl	80004d8 <__aeabi_dmul>
 800678c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006790:	f7fa f928 	bl	80009e4 <__aeabi_dcmpge>
 8006794:	9c08      	ldr	r4, [sp, #32]
 8006796:	4626      	mov	r6, r4
 8006798:	2800      	cmp	r0, #0
 800679a:	f040 8241 	bne.w	8006c20 <_dtoa_r+0x940>
 800679e:	2331      	movs	r3, #49	; 0x31
 80067a0:	9f03      	ldr	r7, [sp, #12]
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	f807 3b01 	strb.w	r3, [r7], #1
 80067aa:	e23d      	b.n	8006c28 <_dtoa_r+0x948>
 80067ac:	07e2      	lsls	r2, r4, #31
 80067ae:	d505      	bpl.n	80067bc <_dtoa_r+0x4dc>
 80067b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067b4:	f7f9 fe90 	bl	80004d8 <__aeabi_dmul>
 80067b8:	2301      	movs	r3, #1
 80067ba:	3701      	adds	r7, #1
 80067bc:	1064      	asrs	r4, r4, #1
 80067be:	3608      	adds	r6, #8
 80067c0:	e76d      	b.n	800669e <_dtoa_r+0x3be>
 80067c2:	2702      	movs	r7, #2
 80067c4:	e770      	b.n	80066a8 <_dtoa_r+0x3c8>
 80067c6:	46d8      	mov	r8, fp
 80067c8:	9c08      	ldr	r4, [sp, #32]
 80067ca:	e78f      	b.n	80066ec <_dtoa_r+0x40c>
 80067cc:	9903      	ldr	r1, [sp, #12]
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <_dtoa_r+0x594>)
 80067d0:	4421      	add	r1, r4
 80067d2:	9112      	str	r1, [sp, #72]	; 0x48
 80067d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067da:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d054      	beq.n	8006890 <_dtoa_r+0x5b0>
 80067e6:	2000      	movs	r0, #0
 80067e8:	4928      	ldr	r1, [pc, #160]	; (800688c <_dtoa_r+0x5ac>)
 80067ea:	f7f9 ff9f 	bl	800072c <__aeabi_ddiv>
 80067ee:	463b      	mov	r3, r7
 80067f0:	4632      	mov	r2, r6
 80067f2:	f7f9 fcb9 	bl	8000168 <__aeabi_dsub>
 80067f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067fa:	9f03      	ldr	r7, [sp, #12]
 80067fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006800:	f7fa f91a 	bl	8000a38 <__aeabi_d2iz>
 8006804:	4604      	mov	r4, r0
 8006806:	f7f9 fdfd 	bl	8000404 <__aeabi_i2d>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006812:	f7f9 fca9 	bl	8000168 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	3430      	adds	r4, #48	; 0x30
 800681c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006820:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006824:	f807 4b01 	strb.w	r4, [r7], #1
 8006828:	f7fa f8c8 	bl	80009bc <__aeabi_dcmplt>
 800682c:	2800      	cmp	r0, #0
 800682e:	d173      	bne.n	8006918 <_dtoa_r+0x638>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	2000      	movs	r0, #0
 8006836:	4911      	ldr	r1, [pc, #68]	; (800687c <_dtoa_r+0x59c>)
 8006838:	f7f9 fc96 	bl	8000168 <__aeabi_dsub>
 800683c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006840:	f7fa f8bc 	bl	80009bc <__aeabi_dcmplt>
 8006844:	2800      	cmp	r0, #0
 8006846:	f040 80b6 	bne.w	80069b6 <_dtoa_r+0x6d6>
 800684a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800684c:	429f      	cmp	r7, r3
 800684e:	f43f af7a 	beq.w	8006746 <_dtoa_r+0x466>
 8006852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006856:	2200      	movs	r2, #0
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <_dtoa_r+0x5a0>)
 800685a:	f7f9 fe3d 	bl	80004d8 <__aeabi_dmul>
 800685e:	2200      	movs	r2, #0
 8006860:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <_dtoa_r+0x5a0>)
 800686a:	f7f9 fe35 	bl	80004d8 <__aeabi_dmul>
 800686e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006872:	e7c3      	b.n	80067fc <_dtoa_r+0x51c>
 8006874:	0800a0d8 	.word	0x0800a0d8
 8006878:	0800a0b0 	.word	0x0800a0b0
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	40240000 	.word	0x40240000
 8006884:	401c0000 	.word	0x401c0000
 8006888:	40140000 	.word	0x40140000
 800688c:	3fe00000 	.word	0x3fe00000
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fe20 	bl	80004d8 <__aeabi_dmul>
 8006898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800689a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800689e:	9c03      	ldr	r4, [sp, #12]
 80068a0:	9314      	str	r3, [sp, #80]	; 0x50
 80068a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a6:	f7fa f8c7 	bl	8000a38 <__aeabi_d2iz>
 80068aa:	9015      	str	r0, [sp, #84]	; 0x54
 80068ac:	f7f9 fdaa 	bl	8000404 <__aeabi_i2d>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068be:	4606      	mov	r6, r0
 80068c0:	3330      	adds	r3, #48	; 0x30
 80068c2:	f804 3b01 	strb.w	r3, [r4], #1
 80068c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c8:	460f      	mov	r7, r1
 80068ca:	429c      	cmp	r4, r3
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	d124      	bne.n	800691c <_dtoa_r+0x63c>
 80068d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068d6:	4baf      	ldr	r3, [pc, #700]	; (8006b94 <_dtoa_r+0x8b4>)
 80068d8:	f7f9 fc48 	bl	800016c <__adddf3>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f888 	bl	80009f8 <__aeabi_dcmpgt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d163      	bne.n	80069b4 <_dtoa_r+0x6d4>
 80068ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068f0:	2000      	movs	r0, #0
 80068f2:	49a8      	ldr	r1, [pc, #672]	; (8006b94 <_dtoa_r+0x8b4>)
 80068f4:	f7f9 fc38 	bl	8000168 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7fa f85c 	bl	80009bc <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f43f af1e 	beq.w	8006746 <_dtoa_r+0x466>
 800690a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800690c:	1e7b      	subs	r3, r7, #1
 800690e:	9314      	str	r3, [sp, #80]	; 0x50
 8006910:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d0f8      	beq.n	800690a <_dtoa_r+0x62a>
 8006918:	46c3      	mov	fp, r8
 800691a:	e03b      	b.n	8006994 <_dtoa_r+0x6b4>
 800691c:	4b9e      	ldr	r3, [pc, #632]	; (8006b98 <_dtoa_r+0x8b8>)
 800691e:	f7f9 fddb 	bl	80004d8 <__aeabi_dmul>
 8006922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006926:	e7bc      	b.n	80068a2 <_dtoa_r+0x5c2>
 8006928:	9f03      	ldr	r7, [sp, #12]
 800692a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800692e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fef9 	bl	800072c <__aeabi_ddiv>
 800693a:	f7fa f87d 	bl	8000a38 <__aeabi_d2iz>
 800693e:	4604      	mov	r4, r0
 8006940:	f7f9 fd60 	bl	8000404 <__aeabi_i2d>
 8006944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006948:	f7f9 fdc6 	bl	80004d8 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7f9 fc08 	bl	8000168 <__aeabi_dsub>
 8006958:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800695c:	f807 6b01 	strb.w	r6, [r7], #1
 8006960:	9e03      	ldr	r6, [sp, #12]
 8006962:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006966:	1bbe      	subs	r6, r7, r6
 8006968:	45b4      	cmp	ip, r6
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	d136      	bne.n	80069de <_dtoa_r+0x6fe>
 8006970:	f7f9 fbfc 	bl	800016c <__adddf3>
 8006974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	f7fa f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8006980:	bb58      	cbnz	r0, 80069da <_dtoa_r+0x6fa>
 8006982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7fa f80d 	bl	80009a8 <__aeabi_dcmpeq>
 800698e:	b108      	cbz	r0, 8006994 <_dtoa_r+0x6b4>
 8006990:	07e3      	lsls	r3, r4, #31
 8006992:	d422      	bmi.n	80069da <_dtoa_r+0x6fa>
 8006994:	4651      	mov	r1, sl
 8006996:	4628      	mov	r0, r5
 8006998:	f000 fbc2 	bl	8007120 <_Bfree>
 800699c:	2300      	movs	r3, #0
 800699e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069a0:	703b      	strb	r3, [r7, #0]
 80069a2:	f10b 0301 	add.w	r3, fp, #1
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f43f ace6 	beq.w	800637c <_dtoa_r+0x9c>
 80069b0:	601f      	str	r7, [r3, #0]
 80069b2:	e4e3      	b.n	800637c <_dtoa_r+0x9c>
 80069b4:	4627      	mov	r7, r4
 80069b6:	463b      	mov	r3, r7
 80069b8:	461f      	mov	r7, r3
 80069ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069be:	2a39      	cmp	r2, #57	; 0x39
 80069c0:	d107      	bne.n	80069d2 <_dtoa_r+0x6f2>
 80069c2:	9a03      	ldr	r2, [sp, #12]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1f7      	bne.n	80069b8 <_dtoa_r+0x6d8>
 80069c8:	2230      	movs	r2, #48	; 0x30
 80069ca:	9903      	ldr	r1, [sp, #12]
 80069cc:	f108 0801 	add.w	r8, r8, #1
 80069d0:	700a      	strb	r2, [r1, #0]
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	3201      	adds	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e79e      	b.n	8006918 <_dtoa_r+0x638>
 80069da:	46d8      	mov	r8, fp
 80069dc:	e7eb      	b.n	80069b6 <_dtoa_r+0x6d6>
 80069de:	2200      	movs	r2, #0
 80069e0:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <_dtoa_r+0x8b8>)
 80069e2:	f7f9 fd79 	bl	80004d8 <__aeabi_dmul>
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4680      	mov	r8, r0
 80069ec:	4689      	mov	r9, r1
 80069ee:	f7f9 ffdb 	bl	80009a8 <__aeabi_dcmpeq>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d09b      	beq.n	800692e <_dtoa_r+0x64e>
 80069f6:	e7cd      	b.n	8006994 <_dtoa_r+0x6b4>
 80069f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	f000 80c4 	beq.w	8006b88 <_dtoa_r+0x8a8>
 8006a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a02:	2a01      	cmp	r2, #1
 8006a04:	f300 80a8 	bgt.w	8006b58 <_dtoa_r+0x878>
 8006a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	f000 80a0 	beq.w	8006b50 <_dtoa_r+0x870>
 8006a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a14:	464f      	mov	r7, r9
 8006a16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	441a      	add	r2, r3
 8006a1e:	4628      	mov	r0, r5
 8006a20:	4499      	add	r9, r3
 8006a22:	9209      	str	r2, [sp, #36]	; 0x24
 8006a24:	f000 fc32 	bl	800728c <__i2b>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	b15f      	cbz	r7, 8006a44 <_dtoa_r+0x764>
 8006a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd08      	ble.n	8006a44 <_dtoa_r+0x764>
 8006a32:	42bb      	cmp	r3, r7
 8006a34:	bfa8      	it	ge
 8006a36:	463b      	movge	r3, r7
 8006a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3a:	eba9 0903 	sub.w	r9, r9, r3
 8006a3e:	1aff      	subs	r7, r7, r3
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	9309      	str	r3, [sp, #36]	; 0x24
 8006a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a46:	b1f3      	cbz	r3, 8006a86 <_dtoa_r+0x7a6>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a0 	beq.w	8006b90 <_dtoa_r+0x8b0>
 8006a50:	2c00      	cmp	r4, #0
 8006a52:	dd10      	ble.n	8006a76 <_dtoa_r+0x796>
 8006a54:	4631      	mov	r1, r6
 8006a56:	4622      	mov	r2, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fcd5 	bl	8007408 <__pow5mult>
 8006a5e:	4652      	mov	r2, sl
 8006a60:	4601      	mov	r1, r0
 8006a62:	4606      	mov	r6, r0
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 fc27 	bl	80072b8 <__multiply>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4651      	mov	r1, sl
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fb56 	bl	8007120 <_Bfree>
 8006a74:	46c2      	mov	sl, r8
 8006a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a78:	1b1a      	subs	r2, r3, r4
 8006a7a:	d004      	beq.n	8006a86 <_dtoa_r+0x7a6>
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fcc2 	bl	8007408 <__pow5mult>
 8006a84:	4682      	mov	sl, r0
 8006a86:	2101      	movs	r1, #1
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fbff 	bl	800728c <__i2b>
 8006a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a90:	4604      	mov	r4, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f340 8082 	ble.w	8006b9c <_dtoa_r+0x8bc>
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 fcb3 	bl	8007408 <__pow5mult>
 8006aa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	dd7b      	ble.n	8006ba2 <_dtoa_r+0x8c2>
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ab4:	6918      	ldr	r0, [r3, #16]
 8006ab6:	f000 fb9b 	bl	80071f0 <__hi0bits>
 8006aba:	f1c0 0020 	rsb	r0, r0, #32
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	4418      	add	r0, r3
 8006ac2:	f010 001f 	ands.w	r0, r0, #31
 8006ac6:	f000 8092 	beq.w	8006bee <_dtoa_r+0x90e>
 8006aca:	f1c0 0320 	rsb	r3, r0, #32
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	f340 8085 	ble.w	8006bde <_dtoa_r+0x8fe>
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	f1c0 001c 	rsb	r0, r0, #28
 8006ada:	4403      	add	r3, r0
 8006adc:	4481      	add	r9, r0
 8006ade:	4407      	add	r7, r0
 8006ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae2:	f1b9 0f00 	cmp.w	r9, #0
 8006ae6:	dd05      	ble.n	8006af4 <_dtoa_r+0x814>
 8006ae8:	4651      	mov	r1, sl
 8006aea:	464a      	mov	r2, r9
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fce5 	bl	80074bc <__lshift>
 8006af2:	4682      	mov	sl, r0
 8006af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd05      	ble.n	8006b06 <_dtoa_r+0x826>
 8006afa:	4621      	mov	r1, r4
 8006afc:	461a      	mov	r2, r3
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fcdc 	bl	80074bc <__lshift>
 8006b04:	4604      	mov	r4, r0
 8006b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d072      	beq.n	8006bf2 <_dtoa_r+0x912>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4650      	mov	r0, sl
 8006b10:	f000 fd40 	bl	8007594 <__mcmp>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	da6c      	bge.n	8006bf2 <_dtoa_r+0x912>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fb20 	bl	8007164 <__multadd>
 8006b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b26:	4682      	mov	sl, r0
 8006b28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 81ac 	beq.w	8006e8a <_dtoa_r+0xbaa>
 8006b32:	2300      	movs	r3, #0
 8006b34:	4631      	mov	r1, r6
 8006b36:	220a      	movs	r2, #10
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fb13 	bl	8007164 <__multadd>
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	4606      	mov	r6, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f300 8093 	bgt.w	8006c6e <_dtoa_r+0x98e>
 8006b48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	dc59      	bgt.n	8006c02 <_dtoa_r+0x922>
 8006b4e:	e08e      	b.n	8006c6e <_dtoa_r+0x98e>
 8006b50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b56:	e75d      	b.n	8006a14 <_dtoa_r+0x734>
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	1e5c      	subs	r4, r3, #1
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	bfbf      	itttt	lt
 8006b62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b66:	1ae3      	sublt	r3, r4, r3
 8006b68:	18d2      	addlt	r2, r2, r3
 8006b6a:	bfa8      	it	ge
 8006b6c:	1b1c      	subge	r4, r3, r4
 8006b6e:	9b08      	ldr	r3, [sp, #32]
 8006b70:	bfbe      	ittt	lt
 8006b72:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b74:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b76:	2400      	movlt	r4, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bfb5      	itete	lt
 8006b7c:	eba9 0703 	sublt.w	r7, r9, r3
 8006b80:	464f      	movge	r7, r9
 8006b82:	2300      	movlt	r3, #0
 8006b84:	9b08      	ldrge	r3, [sp, #32]
 8006b86:	e747      	b.n	8006a18 <_dtoa_r+0x738>
 8006b88:	464f      	mov	r7, r9
 8006b8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b8e:	e74c      	b.n	8006a2a <_dtoa_r+0x74a>
 8006b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b92:	e773      	b.n	8006a7c <_dtoa_r+0x79c>
 8006b94:	3fe00000 	.word	0x3fe00000
 8006b98:	40240000 	.word	0x40240000
 8006b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	dc18      	bgt.n	8006bd4 <_dtoa_r+0x8f4>
 8006ba2:	9b04      	ldr	r3, [sp, #16]
 8006ba4:	b9b3      	cbnz	r3, 8006bd4 <_dtoa_r+0x8f4>
 8006ba6:	9b05      	ldr	r3, [sp, #20]
 8006ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bac:	b993      	cbnz	r3, 8006bd4 <_dtoa_r+0x8f4>
 8006bae:	9b05      	ldr	r3, [sp, #20]
 8006bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	051b      	lsls	r3, r3, #20
 8006bb8:	b17b      	cbz	r3, 8006bda <_dtoa_r+0x8fa>
 8006bba:	f04f 0801 	mov.w	r8, #1
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	f109 0901 	add.w	r9, r9, #1
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f af6f 	bne.w	8006aae <_dtoa_r+0x7ce>
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	e774      	b.n	8006abe <_dtoa_r+0x7de>
 8006bd4:	f04f 0800 	mov.w	r8, #0
 8006bd8:	e7f6      	b.n	8006bc8 <_dtoa_r+0x8e8>
 8006bda:	4698      	mov	r8, r3
 8006bdc:	e7f4      	b.n	8006bc8 <_dtoa_r+0x8e8>
 8006bde:	d080      	beq.n	8006ae2 <_dtoa_r+0x802>
 8006be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be2:	331c      	adds	r3, #28
 8006be4:	441a      	add	r2, r3
 8006be6:	4499      	add	r9, r3
 8006be8:	441f      	add	r7, r3
 8006bea:	9209      	str	r2, [sp, #36]	; 0x24
 8006bec:	e779      	b.n	8006ae2 <_dtoa_r+0x802>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	e7f6      	b.n	8006be0 <_dtoa_r+0x900>
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dc34      	bgt.n	8006c62 <_dtoa_r+0x982>
 8006bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	dd31      	ble.n	8006c62 <_dtoa_r+0x982>
 8006bfe:	9b08      	ldr	r3, [sp, #32]
 8006c00:	9306      	str	r3, [sp, #24]
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	b963      	cbnz	r3, 8006c20 <_dtoa_r+0x940>
 8006c06:	4621      	mov	r1, r4
 8006c08:	2205      	movs	r2, #5
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 faaa 	bl	8007164 <__multadd>
 8006c10:	4601      	mov	r1, r0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4650      	mov	r0, sl
 8006c16:	f000 fcbd 	bl	8007594 <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f73f adbf 	bgt.w	800679e <_dtoa_r+0x4be>
 8006c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c22:	9f03      	ldr	r7, [sp, #12]
 8006c24:	ea6f 0b03 	mvn.w	fp, r3
 8006c28:	f04f 0800 	mov.w	r8, #0
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 fa76 	bl	8007120 <_Bfree>
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	f43f aead 	beq.w	8006994 <_dtoa_r+0x6b4>
 8006c3a:	f1b8 0f00 	cmp.w	r8, #0
 8006c3e:	d005      	beq.n	8006c4c <_dtoa_r+0x96c>
 8006c40:	45b0      	cmp	r8, r6
 8006c42:	d003      	beq.n	8006c4c <_dtoa_r+0x96c>
 8006c44:	4641      	mov	r1, r8
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fa6a 	bl	8007120 <_Bfree>
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fa66 	bl	8007120 <_Bfree>
 8006c54:	e69e      	b.n	8006994 <_dtoa_r+0x6b4>
 8006c56:	2400      	movs	r4, #0
 8006c58:	4626      	mov	r6, r4
 8006c5a:	e7e1      	b.n	8006c20 <_dtoa_r+0x940>
 8006c5c:	46c3      	mov	fp, r8
 8006c5e:	4626      	mov	r6, r4
 8006c60:	e59d      	b.n	800679e <_dtoa_r+0x4be>
 8006c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80c8 	beq.w	8006dfa <_dtoa_r+0xb1a>
 8006c6a:	9b08      	ldr	r3, [sp, #32]
 8006c6c:	9306      	str	r3, [sp, #24]
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	dd05      	ble.n	8006c7e <_dtoa_r+0x99e>
 8006c72:	4631      	mov	r1, r6
 8006c74:	463a      	mov	r2, r7
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 fc20 	bl	80074bc <__lshift>
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	f1b8 0f00 	cmp.w	r8, #0
 8006c82:	d05b      	beq.n	8006d3c <_dtoa_r+0xa5c>
 8006c84:	4628      	mov	r0, r5
 8006c86:	6871      	ldr	r1, [r6, #4]
 8006c88:	f000 fa0a 	bl	80070a0 <_Balloc>
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	b928      	cbnz	r0, 8006c9c <_dtoa_r+0x9bc>
 8006c90:	4602      	mov	r2, r0
 8006c92:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c96:	4b81      	ldr	r3, [pc, #516]	; (8006e9c <_dtoa_r+0xbbc>)
 8006c98:	f7ff bb36 	b.w	8006308 <_dtoa_r+0x28>
 8006c9c:	6932      	ldr	r2, [r6, #16]
 8006c9e:	f106 010c 	add.w	r1, r6, #12
 8006ca2:	3202      	adds	r2, #2
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	300c      	adds	r0, #12
 8006ca8:	f000 ff9e 	bl	8007be8 <memcpy>
 8006cac:	2201      	movs	r2, #1
 8006cae:	4639      	mov	r1, r7
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 fc03 	bl	80074bc <__lshift>
 8006cb6:	46b0      	mov	r8, r6
 8006cb8:	4606      	mov	r6, r0
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	9a03      	ldr	r2, [sp, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	f7ff fa76 	bl	80061ca <quorem>
 8006cde:	4641      	mov	r1, r8
 8006ce0:	9006      	str	r0, [sp, #24]
 8006ce2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f000 fc54 	bl	8007594 <__mcmp>
 8006cec:	4632      	mov	r2, r6
 8006cee:	9009      	str	r0, [sp, #36]	; 0x24
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fc6a 	bl	80075cc <__mdiff>
 8006cf8:	68c2      	ldr	r2, [r0, #12]
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	bb02      	cbnz	r2, 8006d40 <_dtoa_r+0xa60>
 8006cfe:	4601      	mov	r1, r0
 8006d00:	4650      	mov	r0, sl
 8006d02:	f000 fc47 	bl	8007594 <__mcmp>
 8006d06:	4602      	mov	r2, r0
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	920c      	str	r2, [sp, #48]	; 0x30
 8006d0e:	f000 fa07 	bl	8007120 <_Bfree>
 8006d12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d16:	9f08      	ldr	r7, [sp, #32]
 8006d18:	ea43 0102 	orr.w	r1, r3, r2
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	4319      	orrs	r1, r3
 8006d20:	d110      	bne.n	8006d44 <_dtoa_r+0xa64>
 8006d22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d26:	d029      	beq.n	8006d7c <_dtoa_r+0xa9c>
 8006d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd02      	ble.n	8006d34 <_dtoa_r+0xa54>
 8006d2e:	9b06      	ldr	r3, [sp, #24]
 8006d30:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	f883 9000 	strb.w	r9, [r3]
 8006d3a:	e777      	b.n	8006c2c <_dtoa_r+0x94c>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	e7ba      	b.n	8006cb6 <_dtoa_r+0x9d6>
 8006d40:	2201      	movs	r2, #1
 8006d42:	e7e1      	b.n	8006d08 <_dtoa_r+0xa28>
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	db04      	blt.n	8006d54 <_dtoa_r+0xa74>
 8006d4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d50:	430b      	orrs	r3, r1
 8006d52:	d120      	bne.n	8006d96 <_dtoa_r+0xab6>
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	dded      	ble.n	8006d34 <_dtoa_r+0xa54>
 8006d58:	4651      	mov	r1, sl
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fbad 	bl	80074bc <__lshift>
 8006d62:	4621      	mov	r1, r4
 8006d64:	4682      	mov	sl, r0
 8006d66:	f000 fc15 	bl	8007594 <__mcmp>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dc03      	bgt.n	8006d76 <_dtoa_r+0xa96>
 8006d6e:	d1e1      	bne.n	8006d34 <_dtoa_r+0xa54>
 8006d70:	f019 0f01 	tst.w	r9, #1
 8006d74:	d0de      	beq.n	8006d34 <_dtoa_r+0xa54>
 8006d76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d7a:	d1d8      	bne.n	8006d2e <_dtoa_r+0xa4e>
 8006d7c:	2339      	movs	r3, #57	; 0x39
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	463b      	mov	r3, r7
 8006d84:	461f      	mov	r7, r3
 8006d86:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2a39      	cmp	r2, #57	; 0x39
 8006d8e:	d06b      	beq.n	8006e68 <_dtoa_r+0xb88>
 8006d90:	3201      	adds	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e74a      	b.n	8006c2c <_dtoa_r+0x94c>
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	dd07      	ble.n	8006daa <_dtoa_r+0xaca>
 8006d9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d9e:	d0ed      	beq.n	8006d7c <_dtoa_r+0xa9c>
 8006da0:	9a04      	ldr	r2, [sp, #16]
 8006da2:	f109 0301 	add.w	r3, r9, #1
 8006da6:	7013      	strb	r3, [r2, #0]
 8006da8:	e740      	b.n	8006c2c <_dtoa_r+0x94c>
 8006daa:	9b08      	ldr	r3, [sp, #32]
 8006dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dae:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d042      	beq.n	8006e3c <_dtoa_r+0xb5c>
 8006db6:	4651      	mov	r1, sl
 8006db8:	2300      	movs	r3, #0
 8006dba:	220a      	movs	r2, #10
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 f9d1 	bl	8007164 <__multadd>
 8006dc2:	45b0      	cmp	r8, r6
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	f04f 020a 	mov.w	r2, #10
 8006dce:	4641      	mov	r1, r8
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	d107      	bne.n	8006de4 <_dtoa_r+0xb04>
 8006dd4:	f000 f9c6 	bl	8007164 <__multadd>
 8006dd8:	4680      	mov	r8, r0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	9b08      	ldr	r3, [sp, #32]
 8006dde:	3301      	adds	r3, #1
 8006de0:	9308      	str	r3, [sp, #32]
 8006de2:	e775      	b.n	8006cd0 <_dtoa_r+0x9f0>
 8006de4:	f000 f9be 	bl	8007164 <__multadd>
 8006de8:	4631      	mov	r1, r6
 8006dea:	4680      	mov	r8, r0
 8006dec:	2300      	movs	r3, #0
 8006dee:	220a      	movs	r2, #10
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 f9b7 	bl	8007164 <__multadd>
 8006df6:	4606      	mov	r6, r0
 8006df8:	e7f0      	b.n	8006ddc <_dtoa_r+0xafc>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	9306      	str	r3, [sp, #24]
 8006dfe:	9f03      	ldr	r7, [sp, #12]
 8006e00:	4621      	mov	r1, r4
 8006e02:	4650      	mov	r0, sl
 8006e04:	f7ff f9e1 	bl	80061ca <quorem>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e0e:	f807 9b01 	strb.w	r9, [r7], #1
 8006e12:	1afa      	subs	r2, r7, r3
 8006e14:	9b06      	ldr	r3, [sp, #24]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	dd07      	ble.n	8006e2a <_dtoa_r+0xb4a>
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	220a      	movs	r2, #10
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f99f 	bl	8007164 <__multadd>
 8006e26:	4682      	mov	sl, r0
 8006e28:	e7ea      	b.n	8006e00 <_dtoa_r+0xb20>
 8006e2a:	9b06      	ldr	r3, [sp, #24]
 8006e2c:	f04f 0800 	mov.w	r8, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfcc      	ite	gt
 8006e34:	461f      	movgt	r7, r3
 8006e36:	2701      	movle	r7, #1
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	441f      	add	r7, r3
 8006e3c:	4651      	mov	r1, sl
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 fb3b 	bl	80074bc <__lshift>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4682      	mov	sl, r0
 8006e4a:	f000 fba3 	bl	8007594 <__mcmp>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	dc97      	bgt.n	8006d82 <_dtoa_r+0xaa2>
 8006e52:	d102      	bne.n	8006e5a <_dtoa_r+0xb7a>
 8006e54:	f019 0f01 	tst.w	r9, #1
 8006e58:	d193      	bne.n	8006d82 <_dtoa_r+0xaa2>
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	461f      	mov	r7, r3
 8006e5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e62:	2a30      	cmp	r2, #48	; 0x30
 8006e64:	d0fa      	beq.n	8006e5c <_dtoa_r+0xb7c>
 8006e66:	e6e1      	b.n	8006c2c <_dtoa_r+0x94c>
 8006e68:	9a03      	ldr	r2, [sp, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d18a      	bne.n	8006d84 <_dtoa_r+0xaa4>
 8006e6e:	2331      	movs	r3, #49	; 0x31
 8006e70:	f10b 0b01 	add.w	fp, fp, #1
 8006e74:	e797      	b.n	8006da6 <_dtoa_r+0xac6>
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <_dtoa_r+0xbc0>)
 8006e78:	f7ff ba9f 	b.w	80063ba <_dtoa_r+0xda>
 8006e7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f47f aa77 	bne.w	8006372 <_dtoa_r+0x92>
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <_dtoa_r+0xbc4>)
 8006e86:	f7ff ba98 	b.w	80063ba <_dtoa_r+0xda>
 8006e8a:	9b06      	ldr	r3, [sp, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dcb6      	bgt.n	8006dfe <_dtoa_r+0xb1e>
 8006e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	f73f aeb5 	bgt.w	8006c02 <_dtoa_r+0x922>
 8006e98:	e7b1      	b.n	8006dfe <_dtoa_r+0xb1e>
 8006e9a:	bf00      	nop
 8006e9c:	0800a046 	.word	0x0800a046
 8006ea0:	08009fa6 	.word	0x08009fa6
 8006ea4:	08009fca 	.word	0x08009fca

08006ea8 <_free_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d040      	beq.n	8006f32 <_free_r+0x8a>
 8006eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb4:	1f0c      	subs	r4, r1, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfb8      	it	lt
 8006eba:	18e4      	addlt	r4, r4, r3
 8006ebc:	f000 f8e4 	bl	8007088 <__malloc_lock>
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <_free_r+0x8c>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	b933      	cbnz	r3, 8006ed4 <_free_r+0x2c>
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	6014      	str	r4, [r2, #0]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed0:	f000 b8e0 	b.w	8007094 <__malloc_unlock>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d908      	bls.n	8006eea <_free_r+0x42>
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	1821      	adds	r1, r4, r0
 8006edc:	428b      	cmp	r3, r1
 8006ede:	bf01      	itttt	eq
 8006ee0:	6819      	ldreq	r1, [r3, #0]
 8006ee2:	685b      	ldreq	r3, [r3, #4]
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	e7ed      	b.n	8006ec6 <_free_r+0x1e>
 8006eea:	461a      	mov	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b10b      	cbz	r3, 8006ef4 <_free_r+0x4c>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d9fa      	bls.n	8006eea <_free_r+0x42>
 8006ef4:	6811      	ldr	r1, [r2, #0]
 8006ef6:	1850      	adds	r0, r2, r1
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d10b      	bne.n	8006f14 <_free_r+0x6c>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	4401      	add	r1, r0
 8006f00:	1850      	adds	r0, r2, r1
 8006f02:	4283      	cmp	r3, r0
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	d1e0      	bne.n	8006eca <_free_r+0x22>
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4408      	add	r0, r1
 8006f0e:	6010      	str	r0, [r2, #0]
 8006f10:	6053      	str	r3, [r2, #4]
 8006f12:	e7da      	b.n	8006eca <_free_r+0x22>
 8006f14:	d902      	bls.n	8006f1c <_free_r+0x74>
 8006f16:	230c      	movs	r3, #12
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	e7d6      	b.n	8006eca <_free_r+0x22>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6054      	str	r4, [r2, #4]
 8006f30:	e7cb      	b.n	8006eca <_free_r+0x22>
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	20001360 	.word	0x20001360

08006f38 <malloc>:
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <malloc+0xc>)
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f000 b823 	b.w	8006f88 <_malloc_r>
 8006f42:	bf00      	nop
 8006f44:	200000f8 	.word	0x200000f8

08006f48 <sbrk_aligned>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4e0e      	ldr	r6, [pc, #56]	; (8006f84 <sbrk_aligned+0x3c>)
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	6831      	ldr	r1, [r6, #0]
 8006f50:	4605      	mov	r5, r0
 8006f52:	b911      	cbnz	r1, 8006f5a <sbrk_aligned+0x12>
 8006f54:	f000 fe38 	bl	8007bc8 <_sbrk_r>
 8006f58:	6030      	str	r0, [r6, #0]
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 fe33 	bl	8007bc8 <_sbrk_r>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	d00a      	beq.n	8006f7c <sbrk_aligned+0x34>
 8006f66:	1cc4      	adds	r4, r0, #3
 8006f68:	f024 0403 	bic.w	r4, r4, #3
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d007      	beq.n	8006f80 <sbrk_aligned+0x38>
 8006f70:	1a21      	subs	r1, r4, r0
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 fe28 	bl	8007bc8 <_sbrk_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d101      	bne.n	8006f80 <sbrk_aligned+0x38>
 8006f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f80:	4620      	mov	r0, r4
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	20001364 	.word	0x20001364

08006f88 <_malloc_r>:
 8006f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	1ccd      	adds	r5, r1, #3
 8006f8e:	f025 0503 	bic.w	r5, r5, #3
 8006f92:	3508      	adds	r5, #8
 8006f94:	2d0c      	cmp	r5, #12
 8006f96:	bf38      	it	cc
 8006f98:	250c      	movcc	r5, #12
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	db01      	blt.n	8006fa4 <_malloc_r+0x1c>
 8006fa0:	42a9      	cmp	r1, r5
 8006fa2:	d905      	bls.n	8006fb0 <_malloc_r+0x28>
 8006fa4:	230c      	movs	r3, #12
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4630      	mov	r0, r6
 8006fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007084 <_malloc_r+0xfc>
 8006fb4:	f000 f868 	bl	8007088 <__malloc_lock>
 8006fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fbc:	461c      	mov	r4, r3
 8006fbe:	bb5c      	cbnz	r4, 8007018 <_malloc_r+0x90>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ffc0 	bl	8006f48 <sbrk_aligned>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	4604      	mov	r4, r0
 8006fcc:	d155      	bne.n	800707a <_malloc_r+0xf2>
 8006fce:	f8d8 4000 	ldr.w	r4, [r8]
 8006fd2:	4626      	mov	r6, r4
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	d145      	bne.n	8007064 <_malloc_r+0xdc>
 8006fd8:	2c00      	cmp	r4, #0
 8006fda:	d048      	beq.n	800706e <_malloc_r+0xe6>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	eb04 0903 	add.w	r9, r4, r3
 8006fe6:	f000 fdef 	bl	8007bc8 <_sbrk_r>
 8006fea:	4581      	cmp	r9, r0
 8006fec:	d13f      	bne.n	800706e <_malloc_r+0xe6>
 8006fee:	6821      	ldr	r1, [r4, #0]
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	1a6d      	subs	r5, r5, r1
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7ff ffa7 	bl	8006f48 <sbrk_aligned>
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d037      	beq.n	800706e <_malloc_r+0xe6>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	442b      	add	r3, r5
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	f8d8 3000 	ldr.w	r3, [r8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d038      	beq.n	800707e <_malloc_r+0xf6>
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	42a2      	cmp	r2, r4
 8007010:	d12b      	bne.n	800706a <_malloc_r+0xe2>
 8007012:	2200      	movs	r2, #0
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	e00f      	b.n	8007038 <_malloc_r+0xb0>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	1b52      	subs	r2, r2, r5
 800701c:	d41f      	bmi.n	800705e <_malloc_r+0xd6>
 800701e:	2a0b      	cmp	r2, #11
 8007020:	d917      	bls.n	8007052 <_malloc_r+0xca>
 8007022:	1961      	adds	r1, r4, r5
 8007024:	42a3      	cmp	r3, r4
 8007026:	6025      	str	r5, [r4, #0]
 8007028:	bf18      	it	ne
 800702a:	6059      	strne	r1, [r3, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	bf08      	it	eq
 8007030:	f8c8 1000 	streq.w	r1, [r8]
 8007034:	5162      	str	r2, [r4, r5]
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	4638      	mov	r0, r7
 800703a:	f104 060b 	add.w	r6, r4, #11
 800703e:	f000 f829 	bl	8007094 <__malloc_unlock>
 8007042:	f026 0607 	bic.w	r6, r6, #7
 8007046:	1d23      	adds	r3, r4, #4
 8007048:	1af2      	subs	r2, r6, r3
 800704a:	d0ae      	beq.n	8006faa <_malloc_r+0x22>
 800704c:	1b9b      	subs	r3, r3, r6
 800704e:	50a3      	str	r3, [r4, r2]
 8007050:	e7ab      	b.n	8006faa <_malloc_r+0x22>
 8007052:	42a3      	cmp	r3, r4
 8007054:	6862      	ldr	r2, [r4, #4]
 8007056:	d1dd      	bne.n	8007014 <_malloc_r+0x8c>
 8007058:	f8c8 2000 	str.w	r2, [r8]
 800705c:	e7ec      	b.n	8007038 <_malloc_r+0xb0>
 800705e:	4623      	mov	r3, r4
 8007060:	6864      	ldr	r4, [r4, #4]
 8007062:	e7ac      	b.n	8006fbe <_malloc_r+0x36>
 8007064:	4634      	mov	r4, r6
 8007066:	6876      	ldr	r6, [r6, #4]
 8007068:	e7b4      	b.n	8006fd4 <_malloc_r+0x4c>
 800706a:	4613      	mov	r3, r2
 800706c:	e7cc      	b.n	8007008 <_malloc_r+0x80>
 800706e:	230c      	movs	r3, #12
 8007070:	4638      	mov	r0, r7
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	f000 f80e 	bl	8007094 <__malloc_unlock>
 8007078:	e797      	b.n	8006faa <_malloc_r+0x22>
 800707a:	6025      	str	r5, [r4, #0]
 800707c:	e7dc      	b.n	8007038 <_malloc_r+0xb0>
 800707e:	605b      	str	r3, [r3, #4]
 8007080:	deff      	udf	#255	; 0xff
 8007082:	bf00      	nop
 8007084:	20001360 	.word	0x20001360

08007088 <__malloc_lock>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__malloc_lock+0x8>)
 800708a:	f7ff b88e 	b.w	80061aa <__retarget_lock_acquire_recursive>
 800708e:	bf00      	nop
 8007090:	2000135c 	.word	0x2000135c

08007094 <__malloc_unlock>:
 8007094:	4801      	ldr	r0, [pc, #4]	; (800709c <__malloc_unlock+0x8>)
 8007096:	f7ff b889 	b.w	80061ac <__retarget_lock_release_recursive>
 800709a:	bf00      	nop
 800709c:	2000135c 	.word	0x2000135c

080070a0 <_Balloc>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	69c6      	ldr	r6, [r0, #28]
 80070a4:	4604      	mov	r4, r0
 80070a6:	460d      	mov	r5, r1
 80070a8:	b976      	cbnz	r6, 80070c8 <_Balloc+0x28>
 80070aa:	2010      	movs	r0, #16
 80070ac:	f7ff ff44 	bl	8006f38 <malloc>
 80070b0:	4602      	mov	r2, r0
 80070b2:	61e0      	str	r0, [r4, #28]
 80070b4:	b920      	cbnz	r0, 80070c0 <_Balloc+0x20>
 80070b6:	216b      	movs	r1, #107	; 0x6b
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <_Balloc+0x78>)
 80070ba:	4818      	ldr	r0, [pc, #96]	; (800711c <_Balloc+0x7c>)
 80070bc:	f000 fda2 	bl	8007c04 <__assert_func>
 80070c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070c4:	6006      	str	r6, [r0, #0]
 80070c6:	60c6      	str	r6, [r0, #12]
 80070c8:	69e6      	ldr	r6, [r4, #28]
 80070ca:	68f3      	ldr	r3, [r6, #12]
 80070cc:	b183      	cbz	r3, 80070f0 <_Balloc+0x50>
 80070ce:	69e3      	ldr	r3, [r4, #28]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070d6:	b9b8      	cbnz	r0, 8007108 <_Balloc+0x68>
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f605 	lsl.w	r6, r1, r5
 80070de:	1d72      	adds	r2, r6, #5
 80070e0:	4620      	mov	r0, r4
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	f000 fdac 	bl	8007c40 <_calloc_r>
 80070e8:	b160      	cbz	r0, 8007104 <_Balloc+0x64>
 80070ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070ee:	e00e      	b.n	800710e <_Balloc+0x6e>
 80070f0:	2221      	movs	r2, #33	; 0x21
 80070f2:	2104      	movs	r1, #4
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 fda3 	bl	8007c40 <_calloc_r>
 80070fa:	69e3      	ldr	r3, [r4, #28]
 80070fc:	60f0      	str	r0, [r6, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <_Balloc+0x2e>
 8007104:	2000      	movs	r0, #0
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	6802      	ldr	r2, [r0, #0]
 800710a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800710e:	2300      	movs	r3, #0
 8007110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007114:	e7f7      	b.n	8007106 <_Balloc+0x66>
 8007116:	bf00      	nop
 8007118:	08009fd7 	.word	0x08009fd7
 800711c:	0800a057 	.word	0x0800a057

08007120 <_Bfree>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	69c6      	ldr	r6, [r0, #28]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b976      	cbnz	r6, 8007148 <_Bfree+0x28>
 800712a:	2010      	movs	r0, #16
 800712c:	f7ff ff04 	bl	8006f38 <malloc>
 8007130:	4602      	mov	r2, r0
 8007132:	61e8      	str	r0, [r5, #28]
 8007134:	b920      	cbnz	r0, 8007140 <_Bfree+0x20>
 8007136:	218f      	movs	r1, #143	; 0x8f
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <_Bfree+0x3c>)
 800713a:	4809      	ldr	r0, [pc, #36]	; (8007160 <_Bfree+0x40>)
 800713c:	f000 fd62 	bl	8007c04 <__assert_func>
 8007140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007144:	6006      	str	r6, [r0, #0]
 8007146:	60c6      	str	r6, [r0, #12]
 8007148:	b13c      	cbz	r4, 800715a <_Bfree+0x3a>
 800714a:	69eb      	ldr	r3, [r5, #28]
 800714c:	6862      	ldr	r2, [r4, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007154:	6021      	str	r1, [r4, #0]
 8007156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	08009fd7 	.word	0x08009fd7
 8007160:	0800a057 	.word	0x0800a057

08007164 <__multadd>:
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	4607      	mov	r7, r0
 800716a:	460c      	mov	r4, r1
 800716c:	461e      	mov	r6, r3
 800716e:	2000      	movs	r0, #0
 8007170:	690d      	ldr	r5, [r1, #16]
 8007172:	f101 0c14 	add.w	ip, r1, #20
 8007176:	f8dc 3000 	ldr.w	r3, [ip]
 800717a:	3001      	adds	r0, #1
 800717c:	b299      	uxth	r1, r3
 800717e:	fb02 6101 	mla	r1, r2, r1, r6
 8007182:	0c1e      	lsrs	r6, r3, #16
 8007184:	0c0b      	lsrs	r3, r1, #16
 8007186:	fb02 3306 	mla	r3, r2, r6, r3
 800718a:	b289      	uxth	r1, r1
 800718c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007190:	4285      	cmp	r5, r0
 8007192:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007196:	f84c 1b04 	str.w	r1, [ip], #4
 800719a:	dcec      	bgt.n	8007176 <__multadd+0x12>
 800719c:	b30e      	cbz	r6, 80071e2 <__multadd+0x7e>
 800719e:	68a3      	ldr	r3, [r4, #8]
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dc19      	bgt.n	80071d8 <__multadd+0x74>
 80071a4:	6861      	ldr	r1, [r4, #4]
 80071a6:	4638      	mov	r0, r7
 80071a8:	3101      	adds	r1, #1
 80071aa:	f7ff ff79 	bl	80070a0 <_Balloc>
 80071ae:	4680      	mov	r8, r0
 80071b0:	b928      	cbnz	r0, 80071be <__multadd+0x5a>
 80071b2:	4602      	mov	r2, r0
 80071b4:	21ba      	movs	r1, #186	; 0xba
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <__multadd+0x84>)
 80071b8:	480c      	ldr	r0, [pc, #48]	; (80071ec <__multadd+0x88>)
 80071ba:	f000 fd23 	bl	8007c04 <__assert_func>
 80071be:	6922      	ldr	r2, [r4, #16]
 80071c0:	f104 010c 	add.w	r1, r4, #12
 80071c4:	3202      	adds	r2, #2
 80071c6:	0092      	lsls	r2, r2, #2
 80071c8:	300c      	adds	r0, #12
 80071ca:	f000 fd0d 	bl	8007be8 <memcpy>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff ffa5 	bl	8007120 <_Bfree>
 80071d6:	4644      	mov	r4, r8
 80071d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071dc:	3501      	adds	r5, #1
 80071de:	615e      	str	r6, [r3, #20]
 80071e0:	6125      	str	r5, [r4, #16]
 80071e2:	4620      	mov	r0, r4
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	0800a046 	.word	0x0800a046
 80071ec:	0800a057 	.word	0x0800a057

080071f0 <__hi0bits>:
 80071f0:	0c02      	lsrs	r2, r0, #16
 80071f2:	0412      	lsls	r2, r2, #16
 80071f4:	4603      	mov	r3, r0
 80071f6:	b9ca      	cbnz	r2, 800722c <__hi0bits+0x3c>
 80071f8:	0403      	lsls	r3, r0, #16
 80071fa:	2010      	movs	r0, #16
 80071fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007200:	bf04      	itt	eq
 8007202:	021b      	lsleq	r3, r3, #8
 8007204:	3008      	addeq	r0, #8
 8007206:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800720a:	bf04      	itt	eq
 800720c:	011b      	lsleq	r3, r3, #4
 800720e:	3004      	addeq	r0, #4
 8007210:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007214:	bf04      	itt	eq
 8007216:	009b      	lsleq	r3, r3, #2
 8007218:	3002      	addeq	r0, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	db05      	blt.n	800722a <__hi0bits+0x3a>
 800721e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007222:	f100 0001 	add.w	r0, r0, #1
 8007226:	bf08      	it	eq
 8007228:	2020      	moveq	r0, #32
 800722a:	4770      	bx	lr
 800722c:	2000      	movs	r0, #0
 800722e:	e7e5      	b.n	80071fc <__hi0bits+0xc>

08007230 <__lo0bits>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	4602      	mov	r2, r0
 8007234:	f013 0007 	ands.w	r0, r3, #7
 8007238:	d00b      	beq.n	8007252 <__lo0bits+0x22>
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	d421      	bmi.n	8007282 <__lo0bits+0x52>
 800723e:	0798      	lsls	r0, r3, #30
 8007240:	bf49      	itett	mi
 8007242:	085b      	lsrmi	r3, r3, #1
 8007244:	089b      	lsrpl	r3, r3, #2
 8007246:	2001      	movmi	r0, #1
 8007248:	6013      	strmi	r3, [r2, #0]
 800724a:	bf5c      	itt	pl
 800724c:	2002      	movpl	r0, #2
 800724e:	6013      	strpl	r3, [r2, #0]
 8007250:	4770      	bx	lr
 8007252:	b299      	uxth	r1, r3
 8007254:	b909      	cbnz	r1, 800725a <__lo0bits+0x2a>
 8007256:	2010      	movs	r0, #16
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	b909      	cbnz	r1, 8007262 <__lo0bits+0x32>
 800725e:	3008      	adds	r0, #8
 8007260:	0a1b      	lsrs	r3, r3, #8
 8007262:	0719      	lsls	r1, r3, #28
 8007264:	bf04      	itt	eq
 8007266:	091b      	lsreq	r3, r3, #4
 8007268:	3004      	addeq	r0, #4
 800726a:	0799      	lsls	r1, r3, #30
 800726c:	bf04      	itt	eq
 800726e:	089b      	lsreq	r3, r3, #2
 8007270:	3002      	addeq	r0, #2
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	d403      	bmi.n	800727e <__lo0bits+0x4e>
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	f100 0001 	add.w	r0, r0, #1
 800727c:	d003      	beq.n	8007286 <__lo0bits+0x56>
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	4770      	bx	lr
 8007282:	2000      	movs	r0, #0
 8007284:	4770      	bx	lr
 8007286:	2020      	movs	r0, #32
 8007288:	4770      	bx	lr
	...

0800728c <__i2b>:
 800728c:	b510      	push	{r4, lr}
 800728e:	460c      	mov	r4, r1
 8007290:	2101      	movs	r1, #1
 8007292:	f7ff ff05 	bl	80070a0 <_Balloc>
 8007296:	4602      	mov	r2, r0
 8007298:	b928      	cbnz	r0, 80072a6 <__i2b+0x1a>
 800729a:	f240 1145 	movw	r1, #325	; 0x145
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <__i2b+0x24>)
 80072a0:	4804      	ldr	r0, [pc, #16]	; (80072b4 <__i2b+0x28>)
 80072a2:	f000 fcaf 	bl	8007c04 <__assert_func>
 80072a6:	2301      	movs	r3, #1
 80072a8:	6144      	str	r4, [r0, #20]
 80072aa:	6103      	str	r3, [r0, #16]
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	0800a046 	.word	0x0800a046
 80072b4:	0800a057 	.word	0x0800a057

080072b8 <__multiply>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	4691      	mov	r9, r2
 80072be:	690a      	ldr	r2, [r1, #16]
 80072c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072c4:	460c      	mov	r4, r1
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bfbe      	ittt	lt
 80072ca:	460b      	movlt	r3, r1
 80072cc:	464c      	movlt	r4, r9
 80072ce:	4699      	movlt	r9, r3
 80072d0:	6927      	ldr	r7, [r4, #16]
 80072d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	eb07 060a 	add.w	r6, r7, sl
 80072de:	42b3      	cmp	r3, r6
 80072e0:	b085      	sub	sp, #20
 80072e2:	bfb8      	it	lt
 80072e4:	3101      	addlt	r1, #1
 80072e6:	f7ff fedb 	bl	80070a0 <_Balloc>
 80072ea:	b930      	cbnz	r0, 80072fa <__multiply+0x42>
 80072ec:	4602      	mov	r2, r0
 80072ee:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80072f2:	4b43      	ldr	r3, [pc, #268]	; (8007400 <__multiply+0x148>)
 80072f4:	4843      	ldr	r0, [pc, #268]	; (8007404 <__multiply+0x14c>)
 80072f6:	f000 fc85 	bl	8007c04 <__assert_func>
 80072fa:	f100 0514 	add.w	r5, r0, #20
 80072fe:	462b      	mov	r3, r5
 8007300:	2200      	movs	r2, #0
 8007302:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007306:	4543      	cmp	r3, r8
 8007308:	d321      	bcc.n	800734e <__multiply+0x96>
 800730a:	f104 0314 	add.w	r3, r4, #20
 800730e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007312:	f109 0314 	add.w	r3, r9, #20
 8007316:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800731a:	9202      	str	r2, [sp, #8]
 800731c:	1b3a      	subs	r2, r7, r4
 800731e:	3a15      	subs	r2, #21
 8007320:	f022 0203 	bic.w	r2, r2, #3
 8007324:	3204      	adds	r2, #4
 8007326:	f104 0115 	add.w	r1, r4, #21
 800732a:	428f      	cmp	r7, r1
 800732c:	bf38      	it	cc
 800732e:	2204      	movcc	r2, #4
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9a02      	ldr	r2, [sp, #8]
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d80c      	bhi.n	8007354 <__multiply+0x9c>
 800733a:	2e00      	cmp	r6, #0
 800733c:	dd03      	ble.n	8007346 <__multiply+0x8e>
 800733e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007342:	2b00      	cmp	r3, #0
 8007344:	d05a      	beq.n	80073fc <__multiply+0x144>
 8007346:	6106      	str	r6, [r0, #16]
 8007348:	b005      	add	sp, #20
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	f843 2b04 	str.w	r2, [r3], #4
 8007352:	e7d8      	b.n	8007306 <__multiply+0x4e>
 8007354:	f8b3 a000 	ldrh.w	sl, [r3]
 8007358:	f1ba 0f00 	cmp.w	sl, #0
 800735c:	d023      	beq.n	80073a6 <__multiply+0xee>
 800735e:	46a9      	mov	r9, r5
 8007360:	f04f 0c00 	mov.w	ip, #0
 8007364:	f104 0e14 	add.w	lr, r4, #20
 8007368:	f85e 2b04 	ldr.w	r2, [lr], #4
 800736c:	f8d9 1000 	ldr.w	r1, [r9]
 8007370:	fa1f fb82 	uxth.w	fp, r2
 8007374:	b289      	uxth	r1, r1
 8007376:	fb0a 110b 	mla	r1, sl, fp, r1
 800737a:	4461      	add	r1, ip
 800737c:	f8d9 c000 	ldr.w	ip, [r9]
 8007380:	0c12      	lsrs	r2, r2, #16
 8007382:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007386:	fb0a c202 	mla	r2, sl, r2, ip
 800738a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800738e:	b289      	uxth	r1, r1
 8007390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007394:	4577      	cmp	r7, lr
 8007396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800739a:	f849 1b04 	str.w	r1, [r9], #4
 800739e:	d8e3      	bhi.n	8007368 <__multiply+0xb0>
 80073a0:	9a01      	ldr	r2, [sp, #4]
 80073a2:	f845 c002 	str.w	ip, [r5, r2]
 80073a6:	9a03      	ldr	r2, [sp, #12]
 80073a8:	3304      	adds	r3, #4
 80073aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073ae:	f1b9 0f00 	cmp.w	r9, #0
 80073b2:	d021      	beq.n	80073f8 <__multiply+0x140>
 80073b4:	46ae      	mov	lr, r5
 80073b6:	f04f 0a00 	mov.w	sl, #0
 80073ba:	6829      	ldr	r1, [r5, #0]
 80073bc:	f104 0c14 	add.w	ip, r4, #20
 80073c0:	f8bc b000 	ldrh.w	fp, [ip]
 80073c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073c8:	b289      	uxth	r1, r1
 80073ca:	fb09 220b 	mla	r2, r9, fp, r2
 80073ce:	4452      	add	r2, sl
 80073d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073d4:	f84e 1b04 	str.w	r1, [lr], #4
 80073d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073e0:	f8be 1000 	ldrh.w	r1, [lr]
 80073e4:	4567      	cmp	r7, ip
 80073e6:	fb09 110a 	mla	r1, r9, sl, r1
 80073ea:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073f2:	d8e5      	bhi.n	80073c0 <__multiply+0x108>
 80073f4:	9a01      	ldr	r2, [sp, #4]
 80073f6:	50a9      	str	r1, [r5, r2]
 80073f8:	3504      	adds	r5, #4
 80073fa:	e79a      	b.n	8007332 <__multiply+0x7a>
 80073fc:	3e01      	subs	r6, #1
 80073fe:	e79c      	b.n	800733a <__multiply+0x82>
 8007400:	0800a046 	.word	0x0800a046
 8007404:	0800a057 	.word	0x0800a057

08007408 <__pow5mult>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4615      	mov	r5, r2
 800740e:	f012 0203 	ands.w	r2, r2, #3
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	d007      	beq.n	8007428 <__pow5mult+0x20>
 8007418:	4c25      	ldr	r4, [pc, #148]	; (80074b0 <__pow5mult+0xa8>)
 800741a:	3a01      	subs	r2, #1
 800741c:	2300      	movs	r3, #0
 800741e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007422:	f7ff fe9f 	bl	8007164 <__multadd>
 8007426:	4607      	mov	r7, r0
 8007428:	10ad      	asrs	r5, r5, #2
 800742a:	d03d      	beq.n	80074a8 <__pow5mult+0xa0>
 800742c:	69f4      	ldr	r4, [r6, #28]
 800742e:	b97c      	cbnz	r4, 8007450 <__pow5mult+0x48>
 8007430:	2010      	movs	r0, #16
 8007432:	f7ff fd81 	bl	8006f38 <malloc>
 8007436:	4602      	mov	r2, r0
 8007438:	61f0      	str	r0, [r6, #28]
 800743a:	b928      	cbnz	r0, 8007448 <__pow5mult+0x40>
 800743c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <__pow5mult+0xac>)
 8007442:	481d      	ldr	r0, [pc, #116]	; (80074b8 <__pow5mult+0xb0>)
 8007444:	f000 fbde 	bl	8007c04 <__assert_func>
 8007448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800744c:	6004      	str	r4, [r0, #0]
 800744e:	60c4      	str	r4, [r0, #12]
 8007450:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007458:	b94c      	cbnz	r4, 800746e <__pow5mult+0x66>
 800745a:	f240 2171 	movw	r1, #625	; 0x271
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff14 	bl	800728c <__i2b>
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	f8c8 0008 	str.w	r0, [r8, #8]
 800746c:	6003      	str	r3, [r0, #0]
 800746e:	f04f 0900 	mov.w	r9, #0
 8007472:	07eb      	lsls	r3, r5, #31
 8007474:	d50a      	bpl.n	800748c <__pow5mult+0x84>
 8007476:	4639      	mov	r1, r7
 8007478:	4622      	mov	r2, r4
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ff1c 	bl	80072b8 <__multiply>
 8007480:	4680      	mov	r8, r0
 8007482:	4639      	mov	r1, r7
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff fe4b 	bl	8007120 <_Bfree>
 800748a:	4647      	mov	r7, r8
 800748c:	106d      	asrs	r5, r5, #1
 800748e:	d00b      	beq.n	80074a8 <__pow5mult+0xa0>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	b938      	cbnz	r0, 80074a4 <__pow5mult+0x9c>
 8007494:	4622      	mov	r2, r4
 8007496:	4621      	mov	r1, r4
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff ff0d 	bl	80072b8 <__multiply>
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	f8c0 9000 	str.w	r9, [r0]
 80074a4:	4604      	mov	r4, r0
 80074a6:	e7e4      	b.n	8007472 <__pow5mult+0x6a>
 80074a8:	4638      	mov	r0, r7
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	bf00      	nop
 80074b0:	0800a1a0 	.word	0x0800a1a0
 80074b4:	08009fd7 	.word	0x08009fd7
 80074b8:	0800a057 	.word	0x0800a057

080074bc <__lshift>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	4607      	mov	r7, r0
 80074c4:	4691      	mov	r9, r2
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6849      	ldr	r1, [r1, #4]
 80074ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074d4:	f108 0601 	add.w	r6, r8, #1
 80074d8:	42b3      	cmp	r3, r6
 80074da:	db0b      	blt.n	80074f4 <__lshift+0x38>
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff fddf 	bl	80070a0 <_Balloc>
 80074e2:	4605      	mov	r5, r0
 80074e4:	b948      	cbnz	r0, 80074fa <__lshift+0x3e>
 80074e6:	4602      	mov	r2, r0
 80074e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <__lshift+0xd0>)
 80074ee:	4828      	ldr	r0, [pc, #160]	; (8007590 <__lshift+0xd4>)
 80074f0:	f000 fb88 	bl	8007c04 <__assert_func>
 80074f4:	3101      	adds	r1, #1
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	e7ee      	b.n	80074d8 <__lshift+0x1c>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f100 0114 	add.w	r1, r0, #20
 8007500:	f100 0210 	add.w	r2, r0, #16
 8007504:	4618      	mov	r0, r3
 8007506:	4553      	cmp	r3, sl
 8007508:	db33      	blt.n	8007572 <__lshift+0xb6>
 800750a:	6920      	ldr	r0, [r4, #16]
 800750c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007510:	f104 0314 	add.w	r3, r4, #20
 8007514:	f019 091f 	ands.w	r9, r9, #31
 8007518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800751c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007520:	d02b      	beq.n	800757a <__lshift+0xbe>
 8007522:	468a      	mov	sl, r1
 8007524:	2200      	movs	r2, #0
 8007526:	f1c9 0e20 	rsb	lr, r9, #32
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	fa00 f009 	lsl.w	r0, r0, r9
 8007530:	4310      	orrs	r0, r2
 8007532:	f84a 0b04 	str.w	r0, [sl], #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	459c      	cmp	ip, r3
 800753c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007540:	d8f3      	bhi.n	800752a <__lshift+0x6e>
 8007542:	ebac 0304 	sub.w	r3, ip, r4
 8007546:	3b15      	subs	r3, #21
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	3304      	adds	r3, #4
 800754e:	f104 0015 	add.w	r0, r4, #21
 8007552:	4584      	cmp	ip, r0
 8007554:	bf38      	it	cc
 8007556:	2304      	movcc	r3, #4
 8007558:	50ca      	str	r2, [r1, r3]
 800755a:	b10a      	cbz	r2, 8007560 <__lshift+0xa4>
 800755c:	f108 0602 	add.w	r6, r8, #2
 8007560:	3e01      	subs	r6, #1
 8007562:	4638      	mov	r0, r7
 8007564:	4621      	mov	r1, r4
 8007566:	612e      	str	r6, [r5, #16]
 8007568:	f7ff fdda 	bl	8007120 <_Bfree>
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007572:	f842 0f04 	str.w	r0, [r2, #4]!
 8007576:	3301      	adds	r3, #1
 8007578:	e7c5      	b.n	8007506 <__lshift+0x4a>
 800757a:	3904      	subs	r1, #4
 800757c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007580:	459c      	cmp	ip, r3
 8007582:	f841 2f04 	str.w	r2, [r1, #4]!
 8007586:	d8f9      	bhi.n	800757c <__lshift+0xc0>
 8007588:	e7ea      	b.n	8007560 <__lshift+0xa4>
 800758a:	bf00      	nop
 800758c:	0800a046 	.word	0x0800a046
 8007590:	0800a057 	.word	0x0800a057

08007594 <__mcmp>:
 8007594:	4603      	mov	r3, r0
 8007596:	690a      	ldr	r2, [r1, #16]
 8007598:	6900      	ldr	r0, [r0, #16]
 800759a:	b530      	push	{r4, r5, lr}
 800759c:	1a80      	subs	r0, r0, r2
 800759e:	d10d      	bne.n	80075bc <__mcmp+0x28>
 80075a0:	3314      	adds	r3, #20
 80075a2:	3114      	adds	r1, #20
 80075a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075b4:	4295      	cmp	r5, r2
 80075b6:	d002      	beq.n	80075be <__mcmp+0x2a>
 80075b8:	d304      	bcc.n	80075c4 <__mcmp+0x30>
 80075ba:	2001      	movs	r0, #1
 80075bc:	bd30      	pop	{r4, r5, pc}
 80075be:	42a3      	cmp	r3, r4
 80075c0:	d3f4      	bcc.n	80075ac <__mcmp+0x18>
 80075c2:	e7fb      	b.n	80075bc <__mcmp+0x28>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e7f8      	b.n	80075bc <__mcmp+0x28>
	...

080075cc <__mdiff>:
 80075cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460d      	mov	r5, r1
 80075d2:	4607      	mov	r7, r0
 80075d4:	4611      	mov	r1, r2
 80075d6:	4628      	mov	r0, r5
 80075d8:	4614      	mov	r4, r2
 80075da:	f7ff ffdb 	bl	8007594 <__mcmp>
 80075de:	1e06      	subs	r6, r0, #0
 80075e0:	d111      	bne.n	8007606 <__mdiff+0x3a>
 80075e2:	4631      	mov	r1, r6
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff fd5b 	bl	80070a0 <_Balloc>
 80075ea:	4602      	mov	r2, r0
 80075ec:	b928      	cbnz	r0, 80075fa <__mdiff+0x2e>
 80075ee:	f240 2137 	movw	r1, #567	; 0x237
 80075f2:	4b3a      	ldr	r3, [pc, #232]	; (80076dc <__mdiff+0x110>)
 80075f4:	483a      	ldr	r0, [pc, #232]	; (80076e0 <__mdiff+0x114>)
 80075f6:	f000 fb05 	bl	8007c04 <__assert_func>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007600:	4610      	mov	r0, r2
 8007602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	bfa4      	itt	ge
 8007608:	4623      	movge	r3, r4
 800760a:	462c      	movge	r4, r5
 800760c:	4638      	mov	r0, r7
 800760e:	6861      	ldr	r1, [r4, #4]
 8007610:	bfa6      	itte	ge
 8007612:	461d      	movge	r5, r3
 8007614:	2600      	movge	r6, #0
 8007616:	2601      	movlt	r6, #1
 8007618:	f7ff fd42 	bl	80070a0 <_Balloc>
 800761c:	4602      	mov	r2, r0
 800761e:	b918      	cbnz	r0, 8007628 <__mdiff+0x5c>
 8007620:	f240 2145 	movw	r1, #581	; 0x245
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <__mdiff+0x110>)
 8007626:	e7e5      	b.n	80075f4 <__mdiff+0x28>
 8007628:	f102 0814 	add.w	r8, r2, #20
 800762c:	46c2      	mov	sl, r8
 800762e:	f04f 0c00 	mov.w	ip, #0
 8007632:	6927      	ldr	r7, [r4, #16]
 8007634:	60c6      	str	r6, [r0, #12]
 8007636:	692e      	ldr	r6, [r5, #16]
 8007638:	f104 0014 	add.w	r0, r4, #20
 800763c:	f105 0914 	add.w	r9, r5, #20
 8007640:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007648:	3410      	adds	r4, #16
 800764a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800764e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007652:	fa1f f18b 	uxth.w	r1, fp
 8007656:	4461      	add	r1, ip
 8007658:	fa1f fc83 	uxth.w	ip, r3
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	eba1 010c 	sub.w	r1, r1, ip
 8007662:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007666:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800766a:	b289      	uxth	r1, r1
 800766c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007670:	454e      	cmp	r6, r9
 8007672:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007676:	f84a 1b04 	str.w	r1, [sl], #4
 800767a:	d8e6      	bhi.n	800764a <__mdiff+0x7e>
 800767c:	1b73      	subs	r3, r6, r5
 800767e:	3b15      	subs	r3, #21
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	3515      	adds	r5, #21
 8007686:	3304      	adds	r3, #4
 8007688:	42ae      	cmp	r6, r5
 800768a:	bf38      	it	cc
 800768c:	2304      	movcc	r3, #4
 800768e:	4418      	add	r0, r3
 8007690:	4443      	add	r3, r8
 8007692:	461e      	mov	r6, r3
 8007694:	4605      	mov	r5, r0
 8007696:	4575      	cmp	r5, lr
 8007698:	d30e      	bcc.n	80076b8 <__mdiff+0xec>
 800769a:	f10e 0103 	add.w	r1, lr, #3
 800769e:	1a09      	subs	r1, r1, r0
 80076a0:	f021 0103 	bic.w	r1, r1, #3
 80076a4:	3803      	subs	r0, #3
 80076a6:	4586      	cmp	lr, r0
 80076a8:	bf38      	it	cc
 80076aa:	2100      	movcc	r1, #0
 80076ac:	440b      	add	r3, r1
 80076ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076b2:	b189      	cbz	r1, 80076d8 <__mdiff+0x10c>
 80076b4:	6117      	str	r7, [r2, #16]
 80076b6:	e7a3      	b.n	8007600 <__mdiff+0x34>
 80076b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80076bc:	fa1f f188 	uxth.w	r1, r8
 80076c0:	4461      	add	r1, ip
 80076c2:	140c      	asrs	r4, r1, #16
 80076c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076c8:	b289      	uxth	r1, r1
 80076ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076ce:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80076d2:	f846 1b04 	str.w	r1, [r6], #4
 80076d6:	e7de      	b.n	8007696 <__mdiff+0xca>
 80076d8:	3f01      	subs	r7, #1
 80076da:	e7e8      	b.n	80076ae <__mdiff+0xe2>
 80076dc:	0800a046 	.word	0x0800a046
 80076e0:	0800a057 	.word	0x0800a057

080076e4 <__d2b>:
 80076e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076e6:	2101      	movs	r1, #1
 80076e8:	4617      	mov	r7, r2
 80076ea:	461c      	mov	r4, r3
 80076ec:	9e08      	ldr	r6, [sp, #32]
 80076ee:	f7ff fcd7 	bl	80070a0 <_Balloc>
 80076f2:	4605      	mov	r5, r0
 80076f4:	b930      	cbnz	r0, 8007704 <__d2b+0x20>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 310f 	movw	r1, #783	; 0x30f
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <__d2b+0xa4>)
 80076fe:	4823      	ldr	r0, [pc, #140]	; (800778c <__d2b+0xa8>)
 8007700:	f000 fa80 	bl	8007c04 <__assert_func>
 8007704:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007708:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800770c:	bb24      	cbnz	r4, 8007758 <__d2b+0x74>
 800770e:	2f00      	cmp	r7, #0
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	d026      	beq.n	8007762 <__d2b+0x7e>
 8007714:	4668      	mov	r0, sp
 8007716:	9700      	str	r7, [sp, #0]
 8007718:	f7ff fd8a 	bl	8007230 <__lo0bits>
 800771c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007720:	b1e8      	cbz	r0, 800775e <__d2b+0x7a>
 8007722:	f1c0 0320 	rsb	r3, r0, #32
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	430b      	orrs	r3, r1
 800772c:	40c2      	lsrs	r2, r0
 800772e:	616b      	str	r3, [r5, #20]
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2102      	movne	r1, #2
 800773a:	2101      	moveq	r1, #1
 800773c:	61ab      	str	r3, [r5, #24]
 800773e:	6129      	str	r1, [r5, #16]
 8007740:	b1bc      	cbz	r4, 8007772 <__d2b+0x8e>
 8007742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007746:	4404      	add	r4, r0
 8007748:	6034      	str	r4, [r6, #0]
 800774a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007750:	6018      	str	r0, [r3, #0]
 8007752:	4628      	mov	r0, r5
 8007754:	b003      	add	sp, #12
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800775c:	e7d7      	b.n	800770e <__d2b+0x2a>
 800775e:	6169      	str	r1, [r5, #20]
 8007760:	e7e7      	b.n	8007732 <__d2b+0x4e>
 8007762:	a801      	add	r0, sp, #4
 8007764:	f7ff fd64 	bl	8007230 <__lo0bits>
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	2101      	movs	r1, #1
 800776c:	616b      	str	r3, [r5, #20]
 800776e:	3020      	adds	r0, #32
 8007770:	e7e5      	b.n	800773e <__d2b+0x5a>
 8007772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007776:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800777a:	6030      	str	r0, [r6, #0]
 800777c:	6918      	ldr	r0, [r3, #16]
 800777e:	f7ff fd37 	bl	80071f0 <__hi0bits>
 8007782:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007786:	e7e2      	b.n	800774e <__d2b+0x6a>
 8007788:	0800a046 	.word	0x0800a046
 800778c:	0800a057 	.word	0x0800a057

08007790 <__ssputs_r>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	461f      	mov	r7, r3
 8007796:	688e      	ldr	r6, [r1, #8]
 8007798:	4682      	mov	sl, r0
 800779a:	42be      	cmp	r6, r7
 800779c:	460c      	mov	r4, r1
 800779e:	4690      	mov	r8, r2
 80077a0:	680b      	ldr	r3, [r1, #0]
 80077a2:	d82c      	bhi.n	80077fe <__ssputs_r+0x6e>
 80077a4:	898a      	ldrh	r2, [r1, #12]
 80077a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077aa:	d026      	beq.n	80077fa <__ssputs_r+0x6a>
 80077ac:	6965      	ldr	r5, [r4, #20]
 80077ae:	6909      	ldr	r1, [r1, #16]
 80077b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b4:	eba3 0901 	sub.w	r9, r3, r1
 80077b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077bc:	1c7b      	adds	r3, r7, #1
 80077be:	444b      	add	r3, r9
 80077c0:	106d      	asrs	r5, r5, #1
 80077c2:	429d      	cmp	r5, r3
 80077c4:	bf38      	it	cc
 80077c6:	461d      	movcc	r5, r3
 80077c8:	0553      	lsls	r3, r2, #21
 80077ca:	d527      	bpl.n	800781c <__ssputs_r+0x8c>
 80077cc:	4629      	mov	r1, r5
 80077ce:	f7ff fbdb 	bl	8006f88 <_malloc_r>
 80077d2:	4606      	mov	r6, r0
 80077d4:	b360      	cbz	r0, 8007830 <__ssputs_r+0xa0>
 80077d6:	464a      	mov	r2, r9
 80077d8:	6921      	ldr	r1, [r4, #16]
 80077da:	f000 fa05 	bl	8007be8 <memcpy>
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	6126      	str	r6, [r4, #16]
 80077ec:	444e      	add	r6, r9
 80077ee:	6026      	str	r6, [r4, #0]
 80077f0:	463e      	mov	r6, r7
 80077f2:	6165      	str	r5, [r4, #20]
 80077f4:	eba5 0509 	sub.w	r5, r5, r9
 80077f8:	60a5      	str	r5, [r4, #8]
 80077fa:	42be      	cmp	r6, r7
 80077fc:	d900      	bls.n	8007800 <__ssputs_r+0x70>
 80077fe:	463e      	mov	r6, r7
 8007800:	4632      	mov	r2, r6
 8007802:	4641      	mov	r1, r8
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	f000 f9c5 	bl	8007b94 <memmove>
 800780a:	2000      	movs	r0, #0
 800780c:	68a3      	ldr	r3, [r4, #8]
 800780e:	1b9b      	subs	r3, r3, r6
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	4433      	add	r3, r6
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781c:	462a      	mov	r2, r5
 800781e:	f000 fa35 	bl	8007c8c <_realloc_r>
 8007822:	4606      	mov	r6, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	d1e0      	bne.n	80077ea <__ssputs_r+0x5a>
 8007828:	4650      	mov	r0, sl
 800782a:	6921      	ldr	r1, [r4, #16]
 800782c:	f7ff fb3c 	bl	8006ea8 <_free_r>
 8007830:	230c      	movs	r3, #12
 8007832:	f8ca 3000 	str.w	r3, [sl]
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	e7e9      	b.n	8007818 <__ssputs_r+0x88>

08007844 <_svfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4698      	mov	r8, r3
 800784a:	898b      	ldrh	r3, [r1, #12]
 800784c:	4607      	mov	r7, r0
 800784e:	061b      	lsls	r3, r3, #24
 8007850:	460d      	mov	r5, r1
 8007852:	4614      	mov	r4, r2
 8007854:	b09d      	sub	sp, #116	; 0x74
 8007856:	d50e      	bpl.n	8007876 <_svfiprintf_r+0x32>
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b963      	cbnz	r3, 8007876 <_svfiprintf_r+0x32>
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	f7ff fb93 	bl	8006f88 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	6128      	str	r0, [r5, #16]
 8007866:	b920      	cbnz	r0, 8007872 <_svfiprintf_r+0x2e>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e0d0      	b.n	8007a14 <_svfiprintf_r+0x1d0>
 8007872:	2340      	movs	r3, #64	; 0x40
 8007874:	616b      	str	r3, [r5, #20]
 8007876:	2300      	movs	r3, #0
 8007878:	9309      	str	r3, [sp, #36]	; 0x24
 800787a:	2320      	movs	r3, #32
 800787c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007880:	2330      	movs	r3, #48	; 0x30
 8007882:	f04f 0901 	mov.w	r9, #1
 8007886:	f8cd 800c 	str.w	r8, [sp, #12]
 800788a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007a2c <_svfiprintf_r+0x1e8>
 800788e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007892:	4623      	mov	r3, r4
 8007894:	469a      	mov	sl, r3
 8007896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789a:	b10a      	cbz	r2, 80078a0 <_svfiprintf_r+0x5c>
 800789c:	2a25      	cmp	r2, #37	; 0x25
 800789e:	d1f9      	bne.n	8007894 <_svfiprintf_r+0x50>
 80078a0:	ebba 0b04 	subs.w	fp, sl, r4
 80078a4:	d00b      	beq.n	80078be <_svfiprintf_r+0x7a>
 80078a6:	465b      	mov	r3, fp
 80078a8:	4622      	mov	r2, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff ff6f 	bl	8007790 <__ssputs_r>
 80078b2:	3001      	adds	r0, #1
 80078b4:	f000 80a9 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	445a      	add	r2, fp
 80078bc:	9209      	str	r2, [sp, #36]	; 0x24
 80078be:	f89a 3000 	ldrb.w	r3, [sl]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80a1 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078c8:	2300      	movs	r3, #0
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d2:	f10a 0a01 	add.w	sl, sl, #1
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	9307      	str	r3, [sp, #28]
 80078da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078de:	931a      	str	r3, [sp, #104]	; 0x68
 80078e0:	4654      	mov	r4, sl
 80078e2:	2205      	movs	r2, #5
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	4850      	ldr	r0, [pc, #320]	; (8007a2c <_svfiprintf_r+0x1e8>)
 80078ea:	f7fe fc60 	bl	80061ae <memchr>
 80078ee:	9a04      	ldr	r2, [sp, #16]
 80078f0:	b9d8      	cbnz	r0, 800792a <_svfiprintf_r+0xe6>
 80078f2:	06d0      	lsls	r0, r2, #27
 80078f4:	bf44      	itt	mi
 80078f6:	2320      	movmi	r3, #32
 80078f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fc:	0711      	lsls	r1, r2, #28
 80078fe:	bf44      	itt	mi
 8007900:	232b      	movmi	r3, #43	; 0x2b
 8007902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d015      	beq.n	800793a <_svfiprintf_r+0xf6>
 800790e:	4654      	mov	r4, sl
 8007910:	2000      	movs	r0, #0
 8007912:	f04f 0c0a 	mov.w	ip, #10
 8007916:	9a07      	ldr	r2, [sp, #28]
 8007918:	4621      	mov	r1, r4
 800791a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791e:	3b30      	subs	r3, #48	; 0x30
 8007920:	2b09      	cmp	r3, #9
 8007922:	d94d      	bls.n	80079c0 <_svfiprintf_r+0x17c>
 8007924:	b1b0      	cbz	r0, 8007954 <_svfiprintf_r+0x110>
 8007926:	9207      	str	r2, [sp, #28]
 8007928:	e014      	b.n	8007954 <_svfiprintf_r+0x110>
 800792a:	eba0 0308 	sub.w	r3, r0, r8
 800792e:	fa09 f303 	lsl.w	r3, r9, r3
 8007932:	4313      	orrs	r3, r2
 8007934:	46a2      	mov	sl, r4
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	e7d2      	b.n	80078e0 <_svfiprintf_r+0x9c>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	1d19      	adds	r1, r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	9103      	str	r1, [sp, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfbb      	ittet	lt
 8007946:	425b      	neglt	r3, r3
 8007948:	f042 0202 	orrlt.w	r2, r2, #2
 800794c:	9307      	strge	r3, [sp, #28]
 800794e:	9307      	strlt	r3, [sp, #28]
 8007950:	bfb8      	it	lt
 8007952:	9204      	strlt	r2, [sp, #16]
 8007954:	7823      	ldrb	r3, [r4, #0]
 8007956:	2b2e      	cmp	r3, #46	; 0x2e
 8007958:	d10c      	bne.n	8007974 <_svfiprintf_r+0x130>
 800795a:	7863      	ldrb	r3, [r4, #1]
 800795c:	2b2a      	cmp	r3, #42	; 0x2a
 800795e:	d134      	bne.n	80079ca <_svfiprintf_r+0x186>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	3402      	adds	r4, #2
 8007964:	1d1a      	adds	r2, r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	9203      	str	r2, [sp, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfb8      	it	lt
 800796e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007a30 <_svfiprintf_r+0x1ec>
 8007978:	2203      	movs	r2, #3
 800797a:	4650      	mov	r0, sl
 800797c:	7821      	ldrb	r1, [r4, #0]
 800797e:	f7fe fc16 	bl	80061ae <memchr>
 8007982:	b138      	cbz	r0, 8007994 <_svfiprintf_r+0x150>
 8007984:	2240      	movs	r2, #64	; 0x40
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	eba0 000a 	sub.w	r0, r0, sl
 800798c:	4082      	lsls	r2, r0
 800798e:	4313      	orrs	r3, r2
 8007990:	3401      	adds	r4, #1
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	2206      	movs	r2, #6
 800799a:	4826      	ldr	r0, [pc, #152]	; (8007a34 <_svfiprintf_r+0x1f0>)
 800799c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a0:	f7fe fc05 	bl	80061ae <memchr>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d038      	beq.n	8007a1a <_svfiprintf_r+0x1d6>
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <_svfiprintf_r+0x1f4>)
 80079aa:	bb1b      	cbnz	r3, 80079f4 <_svfiprintf_r+0x1b0>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	3307      	adds	r3, #7
 80079b0:	f023 0307 	bic.w	r3, r3, #7
 80079b4:	3308      	adds	r3, #8
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	4433      	add	r3, r6
 80079bc:	9309      	str	r3, [sp, #36]	; 0x24
 80079be:	e768      	b.n	8007892 <_svfiprintf_r+0x4e>
 80079c0:	460c      	mov	r4, r1
 80079c2:	2001      	movs	r0, #1
 80079c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c8:	e7a6      	b.n	8007918 <_svfiprintf_r+0xd4>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f04f 0c0a 	mov.w	ip, #10
 80079d0:	4619      	mov	r1, r3
 80079d2:	3401      	adds	r4, #1
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	4620      	mov	r0, r4
 80079d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079dc:	3a30      	subs	r2, #48	; 0x30
 80079de:	2a09      	cmp	r2, #9
 80079e0:	d903      	bls.n	80079ea <_svfiprintf_r+0x1a6>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0c6      	beq.n	8007974 <_svfiprintf_r+0x130>
 80079e6:	9105      	str	r1, [sp, #20]
 80079e8:	e7c4      	b.n	8007974 <_svfiprintf_r+0x130>
 80079ea:	4604      	mov	r4, r0
 80079ec:	2301      	movs	r3, #1
 80079ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f2:	e7f0      	b.n	80079d6 <_svfiprintf_r+0x192>
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	462a      	mov	r2, r5
 80079fa:	4638      	mov	r0, r7
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <_svfiprintf_r+0x1f8>)
 80079fe:	a904      	add	r1, sp, #16
 8007a00:	f7fd fe6e 	bl	80056e0 <_printf_float>
 8007a04:	1c42      	adds	r2, r0, #1
 8007a06:	4606      	mov	r6, r0
 8007a08:	d1d6      	bne.n	80079b8 <_svfiprintf_r+0x174>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	065b      	lsls	r3, r3, #25
 8007a0e:	f53f af2d 	bmi.w	800786c <_svfiprintf_r+0x28>
 8007a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a14:	b01d      	add	sp, #116	; 0x74
 8007a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1a:	ab03      	add	r3, sp, #12
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4638      	mov	r0, r7
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_svfiprintf_r+0x1f8>)
 8007a24:	a904      	add	r1, sp, #16
 8007a26:	f7fe f8fb 	bl	8005c20 <_printf_i>
 8007a2a:	e7eb      	b.n	8007a04 <_svfiprintf_r+0x1c0>
 8007a2c:	0800a1ac 	.word	0x0800a1ac
 8007a30:	0800a1b2 	.word	0x0800a1b2
 8007a34:	0800a1b6 	.word	0x0800a1b6
 8007a38:	080056e1 	.word	0x080056e1
 8007a3c:	08007791 	.word	0x08007791

08007a40 <__sflush_r>:
 8007a40:	898a      	ldrh	r2, [r1, #12]
 8007a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a44:	4605      	mov	r5, r0
 8007a46:	0710      	lsls	r0, r2, #28
 8007a48:	460c      	mov	r4, r1
 8007a4a:	d457      	bmi.n	8007afc <__sflush_r+0xbc>
 8007a4c:	684b      	ldr	r3, [r1, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dc04      	bgt.n	8007a5c <__sflush_r+0x1c>
 8007a52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dc01      	bgt.n	8007a5c <__sflush_r+0x1c>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d0fa      	beq.n	8007a58 <__sflush_r+0x18>
 8007a62:	2300      	movs	r3, #0
 8007a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a68:	682f      	ldr	r7, [r5, #0]
 8007a6a:	6a21      	ldr	r1, [r4, #32]
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	d032      	beq.n	8007ad6 <__sflush_r+0x96>
 8007a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	075a      	lsls	r2, r3, #29
 8007a76:	d505      	bpl.n	8007a84 <__sflush_r+0x44>
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	1ac0      	subs	r0, r0, r3
 8007a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a7e:	b10b      	cbz	r3, 8007a84 <__sflush_r+0x44>
 8007a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a82:	1ac0      	subs	r0, r0, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	4602      	mov	r2, r0
 8007a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	6a21      	ldr	r1, [r4, #32]
 8007a8e:	47b0      	blx	r6
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	d106      	bne.n	8007aa4 <__sflush_r+0x64>
 8007a96:	6829      	ldr	r1, [r5, #0]
 8007a98:	291d      	cmp	r1, #29
 8007a9a:	d82b      	bhi.n	8007af4 <__sflush_r+0xb4>
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <__sflush_r+0x100>)
 8007a9e:	410a      	asrs	r2, r1
 8007aa0:	07d6      	lsls	r6, r2, #31
 8007aa2:	d427      	bmi.n	8007af4 <__sflush_r+0xb4>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	6062      	str	r2, [r4, #4]
 8007aa8:	6922      	ldr	r2, [r4, #16]
 8007aaa:	04d9      	lsls	r1, r3, #19
 8007aac:	6022      	str	r2, [r4, #0]
 8007aae:	d504      	bpl.n	8007aba <__sflush_r+0x7a>
 8007ab0:	1c42      	adds	r2, r0, #1
 8007ab2:	d101      	bne.n	8007ab8 <__sflush_r+0x78>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b903      	cbnz	r3, 8007aba <__sflush_r+0x7a>
 8007ab8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007abc:	602f      	str	r7, [r5, #0]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d0ca      	beq.n	8007a58 <__sflush_r+0x18>
 8007ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	d002      	beq.n	8007ad0 <__sflush_r+0x90>
 8007aca:	4628      	mov	r0, r5
 8007acc:	f7ff f9ec 	bl	8006ea8 <_free_r>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ad4:	e7c1      	b.n	8007a5a <__sflush_r+0x1a>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b0      	blx	r6
 8007adc:	1c41      	adds	r1, r0, #1
 8007ade:	d1c8      	bne.n	8007a72 <__sflush_r+0x32>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0c5      	beq.n	8007a72 <__sflush_r+0x32>
 8007ae6:	2b1d      	cmp	r3, #29
 8007ae8:	d001      	beq.n	8007aee <__sflush_r+0xae>
 8007aea:	2b16      	cmp	r3, #22
 8007aec:	d101      	bne.n	8007af2 <__sflush_r+0xb2>
 8007aee:	602f      	str	r7, [r5, #0]
 8007af0:	e7b2      	b.n	8007a58 <__sflush_r+0x18>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	e7ae      	b.n	8007a5a <__sflush_r+0x1a>
 8007afc:	690f      	ldr	r7, [r1, #16]
 8007afe:	2f00      	cmp	r7, #0
 8007b00:	d0aa      	beq.n	8007a58 <__sflush_r+0x18>
 8007b02:	0793      	lsls	r3, r2, #30
 8007b04:	bf18      	it	ne
 8007b06:	2300      	movne	r3, #0
 8007b08:	680e      	ldr	r6, [r1, #0]
 8007b0a:	bf08      	it	eq
 8007b0c:	694b      	ldreq	r3, [r1, #20]
 8007b0e:	1bf6      	subs	r6, r6, r7
 8007b10:	600f      	str	r7, [r1, #0]
 8007b12:	608b      	str	r3, [r1, #8]
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	dd9f      	ble.n	8007a58 <__sflush_r+0x18>
 8007b18:	4633      	mov	r3, r6
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	6a21      	ldr	r1, [r4, #32]
 8007b20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b24:	47e0      	blx	ip
 8007b26:	2800      	cmp	r0, #0
 8007b28:	dc06      	bgt.n	8007b38 <__sflush_r+0xf8>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	e790      	b.n	8007a5a <__sflush_r+0x1a>
 8007b38:	4407      	add	r7, r0
 8007b3a:	1a36      	subs	r6, r6, r0
 8007b3c:	e7ea      	b.n	8007b14 <__sflush_r+0xd4>
 8007b3e:	bf00      	nop
 8007b40:	dfbffffe 	.word	0xdfbffffe

08007b44 <_fflush_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	690b      	ldr	r3, [r1, #16]
 8007b48:	4605      	mov	r5, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	b913      	cbnz	r3, 8007b54 <_fflush_r+0x10>
 8007b4e:	2500      	movs	r5, #0
 8007b50:	4628      	mov	r0, r5
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	b118      	cbz	r0, 8007b5e <_fflush_r+0x1a>
 8007b56:	6a03      	ldr	r3, [r0, #32]
 8007b58:	b90b      	cbnz	r3, 8007b5e <_fflush_r+0x1a>
 8007b5a:	f7fe fa0f 	bl	8005f7c <__sinit>
 8007b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0f3      	beq.n	8007b4e <_fflush_r+0xa>
 8007b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b68:	07d0      	lsls	r0, r2, #31
 8007b6a:	d404      	bmi.n	8007b76 <_fflush_r+0x32>
 8007b6c:	0599      	lsls	r1, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_fflush_r+0x32>
 8007b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b72:	f7fe fb1a 	bl	80061aa <__retarget_lock_acquire_recursive>
 8007b76:	4628      	mov	r0, r5
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7ff ff61 	bl	8007a40 <__sflush_r>
 8007b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b80:	4605      	mov	r5, r0
 8007b82:	07da      	lsls	r2, r3, #31
 8007b84:	d4e4      	bmi.n	8007b50 <_fflush_r+0xc>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	059b      	lsls	r3, r3, #22
 8007b8a:	d4e1      	bmi.n	8007b50 <_fflush_r+0xc>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8e:	f7fe fb0d 	bl	80061ac <__retarget_lock_release_recursive>
 8007b92:	e7dd      	b.n	8007b50 <_fflush_r+0xc>

08007b94 <memmove>:
 8007b94:	4288      	cmp	r0, r1
 8007b96:	b510      	push	{r4, lr}
 8007b98:	eb01 0402 	add.w	r4, r1, r2
 8007b9c:	d902      	bls.n	8007ba4 <memmove+0x10>
 8007b9e:	4284      	cmp	r4, r0
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	d807      	bhi.n	8007bb4 <memmove+0x20>
 8007ba4:	1e43      	subs	r3, r0, #1
 8007ba6:	42a1      	cmp	r1, r4
 8007ba8:	d008      	beq.n	8007bbc <memmove+0x28>
 8007baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb2:	e7f8      	b.n	8007ba6 <memmove+0x12>
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	4402      	add	r2, r0
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d100      	bne.n	8007bbe <memmove+0x2a>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc6:	e7f7      	b.n	8007bb8 <memmove+0x24>

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4d05      	ldr	r5, [pc, #20]	; (8007be4 <_sbrk_r+0x1c>)
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7f9 ffae 	bl	8001b34 <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20001358 	.word	0x20001358

08007be8 <memcpy>:
 8007be8:	440a      	add	r2, r1
 8007bea:	4291      	cmp	r1, r2
 8007bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf0:	d100      	bne.n	8007bf4 <memcpy+0xc>
 8007bf2:	4770      	bx	lr
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfa:	4291      	cmp	r1, r2
 8007bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c00:	d1f9      	bne.n	8007bf6 <memcpy+0xe>
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <__assert_func>:
 8007c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c06:	4614      	mov	r4, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <__assert_func+0x2c>)
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68d8      	ldr	r0, [r3, #12]
 8007c12:	b14c      	cbz	r4, 8007c28 <__assert_func+0x24>
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <__assert_func+0x30>)
 8007c16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c1a:	9100      	str	r1, [sp, #0]
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	4906      	ldr	r1, [pc, #24]	; (8007c38 <__assert_func+0x34>)
 8007c20:	f000 f870 	bl	8007d04 <fiprintf>
 8007c24:	f000 f880 	bl	8007d28 <abort>
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <__assert_func+0x38>)
 8007c2a:	461c      	mov	r4, r3
 8007c2c:	e7f3      	b.n	8007c16 <__assert_func+0x12>
 8007c2e:	bf00      	nop
 8007c30:	200000f8 	.word	0x200000f8
 8007c34:	0800a1c7 	.word	0x0800a1c7
 8007c38:	0800a1d4 	.word	0x0800a1d4
 8007c3c:	0800a202 	.word	0x0800a202

08007c40 <_calloc_r>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	fba1 5402 	umull	r5, r4, r1, r2
 8007c46:	b934      	cbnz	r4, 8007c56 <_calloc_r+0x16>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7ff f99d 	bl	8006f88 <_malloc_r>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	b928      	cbnz	r0, 8007c5e <_calloc_r+0x1e>
 8007c52:	4630      	mov	r0, r6
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	220c      	movs	r2, #12
 8007c58:	2600      	movs	r6, #0
 8007c5a:	6002      	str	r2, [r0, #0]
 8007c5c:	e7f9      	b.n	8007c52 <_calloc_r+0x12>
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4621      	mov	r1, r4
 8007c62:	f7fe fa24 	bl	80060ae <memset>
 8007c66:	e7f4      	b.n	8007c52 <_calloc_r+0x12>

08007c68 <__ascii_mbtowc>:
 8007c68:	b082      	sub	sp, #8
 8007c6a:	b901      	cbnz	r1, 8007c6e <__ascii_mbtowc+0x6>
 8007c6c:	a901      	add	r1, sp, #4
 8007c6e:	b142      	cbz	r2, 8007c82 <__ascii_mbtowc+0x1a>
 8007c70:	b14b      	cbz	r3, 8007c86 <__ascii_mbtowc+0x1e>
 8007c72:	7813      	ldrb	r3, [r2, #0]
 8007c74:	600b      	str	r3, [r1, #0]
 8007c76:	7812      	ldrb	r2, [r2, #0]
 8007c78:	1e10      	subs	r0, r2, #0
 8007c7a:	bf18      	it	ne
 8007c7c:	2001      	movne	r0, #1
 8007c7e:	b002      	add	sp, #8
 8007c80:	4770      	bx	lr
 8007c82:	4610      	mov	r0, r2
 8007c84:	e7fb      	b.n	8007c7e <__ascii_mbtowc+0x16>
 8007c86:	f06f 0001 	mvn.w	r0, #1
 8007c8a:	e7f8      	b.n	8007c7e <__ascii_mbtowc+0x16>

08007c8c <_realloc_r>:
 8007c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c90:	4680      	mov	r8, r0
 8007c92:	4614      	mov	r4, r2
 8007c94:	460e      	mov	r6, r1
 8007c96:	b921      	cbnz	r1, 8007ca2 <_realloc_r+0x16>
 8007c98:	4611      	mov	r1, r2
 8007c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	f7ff b973 	b.w	8006f88 <_malloc_r>
 8007ca2:	b92a      	cbnz	r2, 8007cb0 <_realloc_r+0x24>
 8007ca4:	f7ff f900 	bl	8006ea8 <_free_r>
 8007ca8:	4625      	mov	r5, r4
 8007caa:	4628      	mov	r0, r5
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	f000 f841 	bl	8007d36 <_malloc_usable_size_r>
 8007cb4:	4284      	cmp	r4, r0
 8007cb6:	4607      	mov	r7, r0
 8007cb8:	d802      	bhi.n	8007cc0 <_realloc_r+0x34>
 8007cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cbe:	d812      	bhi.n	8007ce6 <_realloc_r+0x5a>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	f7ff f960 	bl	8006f88 <_malloc_r>
 8007cc8:	4605      	mov	r5, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d0ed      	beq.n	8007caa <_realloc_r+0x1e>
 8007cce:	42bc      	cmp	r4, r7
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	bf28      	it	cs
 8007cd6:	463a      	movcs	r2, r7
 8007cd8:	f7ff ff86 	bl	8007be8 <memcpy>
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f7ff f8e2 	bl	8006ea8 <_free_r>
 8007ce4:	e7e1      	b.n	8007caa <_realloc_r+0x1e>
 8007ce6:	4635      	mov	r5, r6
 8007ce8:	e7df      	b.n	8007caa <_realloc_r+0x1e>

08007cea <__ascii_wctomb>:
 8007cea:	4603      	mov	r3, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	b141      	cbz	r1, 8007d02 <__ascii_wctomb+0x18>
 8007cf0:	2aff      	cmp	r2, #255	; 0xff
 8007cf2:	d904      	bls.n	8007cfe <__ascii_wctomb+0x14>
 8007cf4:	228a      	movs	r2, #138	; 0x8a
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	4770      	bx	lr
 8007cfe:	2001      	movs	r0, #1
 8007d00:	700a      	strb	r2, [r1, #0]
 8007d02:	4770      	bx	lr

08007d04 <fiprintf>:
 8007d04:	b40e      	push	{r1, r2, r3}
 8007d06:	b503      	push	{r0, r1, lr}
 8007d08:	4601      	mov	r1, r0
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	4805      	ldr	r0, [pc, #20]	; (8007d24 <fiprintf+0x20>)
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	f000 f83d 	bl	8007d94 <_vfiprintf_r>
 8007d1a:	b002      	add	sp, #8
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	200000f8 	.word	0x200000f8

08007d28 <abort>:
 8007d28:	2006      	movs	r0, #6
 8007d2a:	b508      	push	{r3, lr}
 8007d2c:	f000 fa0a 	bl	8008144 <raise>
 8007d30:	2001      	movs	r0, #1
 8007d32:	f7f9 fe8c 	bl	8001a4e <_exit>

08007d36 <_malloc_usable_size_r>:
 8007d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3a:	1f18      	subs	r0, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfbc      	itt	lt
 8007d40:	580b      	ldrlt	r3, [r1, r0]
 8007d42:	18c0      	addlt	r0, r0, r3
 8007d44:	4770      	bx	lr

08007d46 <__sfputc_r>:
 8007d46:	6893      	ldr	r3, [r2, #8]
 8007d48:	b410      	push	{r4}
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	6093      	str	r3, [r2, #8]
 8007d50:	da07      	bge.n	8007d62 <__sfputc_r+0x1c>
 8007d52:	6994      	ldr	r4, [r2, #24]
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	db01      	blt.n	8007d5c <__sfputc_r+0x16>
 8007d58:	290a      	cmp	r1, #10
 8007d5a:	d102      	bne.n	8007d62 <__sfputc_r+0x1c>
 8007d5c:	bc10      	pop	{r4}
 8007d5e:	f000 b933 	b.w	8007fc8 <__swbuf_r>
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	1c58      	adds	r0, r3, #1
 8007d66:	6010      	str	r0, [r2, #0]
 8007d68:	7019      	strb	r1, [r3, #0]
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	bc10      	pop	{r4}
 8007d6e:	4770      	bx	lr

08007d70 <__sfputs_r>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	4606      	mov	r6, r0
 8007d74:	460f      	mov	r7, r1
 8007d76:	4614      	mov	r4, r2
 8007d78:	18d5      	adds	r5, r2, r3
 8007d7a:	42ac      	cmp	r4, r5
 8007d7c:	d101      	bne.n	8007d82 <__sfputs_r+0x12>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e007      	b.n	8007d92 <__sfputs_r+0x22>
 8007d82:	463a      	mov	r2, r7
 8007d84:	4630      	mov	r0, r6
 8007d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8a:	f7ff ffdc 	bl	8007d46 <__sfputc_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d1f3      	bne.n	8007d7a <__sfputs_r+0xa>
 8007d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d94 <_vfiprintf_r>:
 8007d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d98:	460d      	mov	r5, r1
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	4698      	mov	r8, r3
 8007d9e:	4606      	mov	r6, r0
 8007da0:	b09d      	sub	sp, #116	; 0x74
 8007da2:	b118      	cbz	r0, 8007dac <_vfiprintf_r+0x18>
 8007da4:	6a03      	ldr	r3, [r0, #32]
 8007da6:	b90b      	cbnz	r3, 8007dac <_vfiprintf_r+0x18>
 8007da8:	f7fe f8e8 	bl	8005f7c <__sinit>
 8007dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dae:	07d9      	lsls	r1, r3, #31
 8007db0:	d405      	bmi.n	8007dbe <_vfiprintf_r+0x2a>
 8007db2:	89ab      	ldrh	r3, [r5, #12]
 8007db4:	059a      	lsls	r2, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_vfiprintf_r+0x2a>
 8007db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dba:	f7fe f9f6 	bl	80061aa <__retarget_lock_acquire_recursive>
 8007dbe:	89ab      	ldrh	r3, [r5, #12]
 8007dc0:	071b      	lsls	r3, r3, #28
 8007dc2:	d501      	bpl.n	8007dc8 <_vfiprintf_r+0x34>
 8007dc4:	692b      	ldr	r3, [r5, #16]
 8007dc6:	b99b      	cbnz	r3, 8007df0 <_vfiprintf_r+0x5c>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f000 f93a 	bl	8008044 <__swsetup_r>
 8007dd0:	b170      	cbz	r0, 8007df0 <_vfiprintf_r+0x5c>
 8007dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd4:	07dc      	lsls	r4, r3, #31
 8007dd6:	d504      	bpl.n	8007de2 <_vfiprintf_r+0x4e>
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ddc:	b01d      	add	sp, #116	; 0x74
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	0598      	lsls	r0, r3, #22
 8007de6:	d4f7      	bmi.n	8007dd8 <_vfiprintf_r+0x44>
 8007de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dea:	f7fe f9df 	bl	80061ac <__retarget_lock_release_recursive>
 8007dee:	e7f3      	b.n	8007dd8 <_vfiprintf_r+0x44>
 8007df0:	2300      	movs	r3, #0
 8007df2:	9309      	str	r3, [sp, #36]	; 0x24
 8007df4:	2320      	movs	r3, #32
 8007df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dfa:	2330      	movs	r3, #48	; 0x30
 8007dfc:	f04f 0901 	mov.w	r9, #1
 8007e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007fb4 <_vfiprintf_r+0x220>
 8007e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	469a      	mov	sl, r3
 8007e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e14:	b10a      	cbz	r2, 8007e1a <_vfiprintf_r+0x86>
 8007e16:	2a25      	cmp	r2, #37	; 0x25
 8007e18:	d1f9      	bne.n	8007e0e <_vfiprintf_r+0x7a>
 8007e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e1e:	d00b      	beq.n	8007e38 <_vfiprintf_r+0xa4>
 8007e20:	465b      	mov	r3, fp
 8007e22:	4622      	mov	r2, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7ff ffa2 	bl	8007d70 <__sfputs_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f000 80a9 	beq.w	8007f84 <_vfiprintf_r+0x1f0>
 8007e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e34:	445a      	add	r2, fp
 8007e36:	9209      	str	r2, [sp, #36]	; 0x24
 8007e38:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80a1 	beq.w	8007f84 <_vfiprintf_r+0x1f0>
 8007e42:	2300      	movs	r3, #0
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295
 8007e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4c:	f10a 0a01 	add.w	sl, sl, #1
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e58:	931a      	str	r3, [sp, #104]	; 0x68
 8007e5a:	4654      	mov	r4, sl
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	4854      	ldr	r0, [pc, #336]	; (8007fb4 <_vfiprintf_r+0x220>)
 8007e64:	f7fe f9a3 	bl	80061ae <memchr>
 8007e68:	9a04      	ldr	r2, [sp, #16]
 8007e6a:	b9d8      	cbnz	r0, 8007ea4 <_vfiprintf_r+0x110>
 8007e6c:	06d1      	lsls	r1, r2, #27
 8007e6e:	bf44      	itt	mi
 8007e70:	2320      	movmi	r3, #32
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e76:	0713      	lsls	r3, r2, #28
 8007e78:	bf44      	itt	mi
 8007e7a:	232b      	movmi	r3, #43	; 0x2b
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e80:	f89a 3000 	ldrb.w	r3, [sl]
 8007e84:	2b2a      	cmp	r3, #42	; 0x2a
 8007e86:	d015      	beq.n	8007eb4 <_vfiprintf_r+0x120>
 8007e88:	4654      	mov	r4, sl
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f04f 0c0a 	mov.w	ip, #10
 8007e90:	9a07      	ldr	r2, [sp, #28]
 8007e92:	4621      	mov	r1, r4
 8007e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e98:	3b30      	subs	r3, #48	; 0x30
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d94d      	bls.n	8007f3a <_vfiprintf_r+0x1a6>
 8007e9e:	b1b0      	cbz	r0, 8007ece <_vfiprintf_r+0x13a>
 8007ea0:	9207      	str	r2, [sp, #28]
 8007ea2:	e014      	b.n	8007ece <_vfiprintf_r+0x13a>
 8007ea4:	eba0 0308 	sub.w	r3, r0, r8
 8007ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	46a2      	mov	sl, r4
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	e7d2      	b.n	8007e5a <_vfiprintf_r+0xc6>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	1d19      	adds	r1, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	9103      	str	r1, [sp, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bfbb      	ittet	lt
 8007ec0:	425b      	neglt	r3, r3
 8007ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec6:	9307      	strge	r3, [sp, #28]
 8007ec8:	9307      	strlt	r3, [sp, #28]
 8007eca:	bfb8      	it	lt
 8007ecc:	9204      	strlt	r2, [sp, #16]
 8007ece:	7823      	ldrb	r3, [r4, #0]
 8007ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed2:	d10c      	bne.n	8007eee <_vfiprintf_r+0x15a>
 8007ed4:	7863      	ldrb	r3, [r4, #1]
 8007ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed8:	d134      	bne.n	8007f44 <_vfiprintf_r+0x1b0>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	3402      	adds	r4, #2
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	9203      	str	r2, [sp, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bfb8      	it	lt
 8007ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fb8 <_vfiprintf_r+0x224>
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	7821      	ldrb	r1, [r4, #0]
 8007ef8:	f7fe f959 	bl	80061ae <memchr>
 8007efc:	b138      	cbz	r0, 8007f0e <_vfiprintf_r+0x17a>
 8007efe:	2240      	movs	r2, #64	; 0x40
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	eba0 000a 	sub.w	r0, r0, sl
 8007f06:	4082      	lsls	r2, r0
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f12:	2206      	movs	r2, #6
 8007f14:	4829      	ldr	r0, [pc, #164]	; (8007fbc <_vfiprintf_r+0x228>)
 8007f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f1a:	f7fe f948 	bl	80061ae <memchr>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d03f      	beq.n	8007fa2 <_vfiprintf_r+0x20e>
 8007f22:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <_vfiprintf_r+0x22c>)
 8007f24:	bb1b      	cbnz	r3, 8007f6e <_vfiprintf_r+0x1da>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	3307      	adds	r3, #7
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	3308      	adds	r3, #8
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f34:	443b      	add	r3, r7
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	e768      	b.n	8007e0c <_vfiprintf_r+0x78>
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f42:	e7a6      	b.n	8007e92 <_vfiprintf_r+0xfe>
 8007f44:	2300      	movs	r3, #0
 8007f46:	f04f 0c0a 	mov.w	ip, #10
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	3401      	adds	r4, #1
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f56:	3a30      	subs	r2, #48	; 0x30
 8007f58:	2a09      	cmp	r2, #9
 8007f5a:	d903      	bls.n	8007f64 <_vfiprintf_r+0x1d0>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0c6      	beq.n	8007eee <_vfiprintf_r+0x15a>
 8007f60:	9105      	str	r1, [sp, #20]
 8007f62:	e7c4      	b.n	8007eee <_vfiprintf_r+0x15a>
 8007f64:	4604      	mov	r4, r0
 8007f66:	2301      	movs	r3, #1
 8007f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f6c:	e7f0      	b.n	8007f50 <_vfiprintf_r+0x1bc>
 8007f6e:	ab03      	add	r3, sp, #12
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	462a      	mov	r2, r5
 8007f74:	4630      	mov	r0, r6
 8007f76:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <_vfiprintf_r+0x230>)
 8007f78:	a904      	add	r1, sp, #16
 8007f7a:	f7fd fbb1 	bl	80056e0 <_printf_float>
 8007f7e:	4607      	mov	r7, r0
 8007f80:	1c78      	adds	r0, r7, #1
 8007f82:	d1d6      	bne.n	8007f32 <_vfiprintf_r+0x19e>
 8007f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f86:	07d9      	lsls	r1, r3, #31
 8007f88:	d405      	bmi.n	8007f96 <_vfiprintf_r+0x202>
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	059a      	lsls	r2, r3, #22
 8007f8e:	d402      	bmi.n	8007f96 <_vfiprintf_r+0x202>
 8007f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f92:	f7fe f90b 	bl	80061ac <__retarget_lock_release_recursive>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	065b      	lsls	r3, r3, #25
 8007f9a:	f53f af1d 	bmi.w	8007dd8 <_vfiprintf_r+0x44>
 8007f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fa0:	e71c      	b.n	8007ddc <_vfiprintf_r+0x48>
 8007fa2:	ab03      	add	r3, sp, #12
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <_vfiprintf_r+0x230>)
 8007fac:	a904      	add	r1, sp, #16
 8007fae:	f7fd fe37 	bl	8005c20 <_printf_i>
 8007fb2:	e7e4      	b.n	8007f7e <_vfiprintf_r+0x1ea>
 8007fb4:	0800a1ac 	.word	0x0800a1ac
 8007fb8:	0800a1b2 	.word	0x0800a1b2
 8007fbc:	0800a1b6 	.word	0x0800a1b6
 8007fc0:	080056e1 	.word	0x080056e1
 8007fc4:	08007d71 	.word	0x08007d71

08007fc8 <__swbuf_r>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	460e      	mov	r6, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	4605      	mov	r5, r0
 8007fd0:	b118      	cbz	r0, 8007fda <__swbuf_r+0x12>
 8007fd2:	6a03      	ldr	r3, [r0, #32]
 8007fd4:	b90b      	cbnz	r3, 8007fda <__swbuf_r+0x12>
 8007fd6:	f7fd ffd1 	bl	8005f7c <__sinit>
 8007fda:	69a3      	ldr	r3, [r4, #24]
 8007fdc:	60a3      	str	r3, [r4, #8]
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	071a      	lsls	r2, r3, #28
 8007fe2:	d525      	bpl.n	8008030 <__swbuf_r+0x68>
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	b31b      	cbz	r3, 8008030 <__swbuf_r+0x68>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	6922      	ldr	r2, [r4, #16]
 8007fec:	b2f6      	uxtb	r6, r6
 8007fee:	1a98      	subs	r0, r3, r2
 8007ff0:	6963      	ldr	r3, [r4, #20]
 8007ff2:	4637      	mov	r7, r6
 8007ff4:	4283      	cmp	r3, r0
 8007ff6:	dc04      	bgt.n	8008002 <__swbuf_r+0x3a>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7ff fda2 	bl	8007b44 <_fflush_r>
 8008000:	b9e0      	cbnz	r0, 800803c <__swbuf_r+0x74>
 8008002:	68a3      	ldr	r3, [r4, #8]
 8008004:	3b01      	subs	r3, #1
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	6022      	str	r2, [r4, #0]
 800800e:	701e      	strb	r6, [r3, #0]
 8008010:	6962      	ldr	r2, [r4, #20]
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	d004      	beq.n	8008022 <__swbuf_r+0x5a>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	07db      	lsls	r3, r3, #31
 800801c:	d506      	bpl.n	800802c <__swbuf_r+0x64>
 800801e:	2e0a      	cmp	r6, #10
 8008020:	d104      	bne.n	800802c <__swbuf_r+0x64>
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f7ff fd8d 	bl	8007b44 <_fflush_r>
 800802a:	b938      	cbnz	r0, 800803c <__swbuf_r+0x74>
 800802c:	4638      	mov	r0, r7
 800802e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f806 	bl	8008044 <__swsetup_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d0d5      	beq.n	8007fe8 <__swbuf_r+0x20>
 800803c:	f04f 37ff 	mov.w	r7, #4294967295
 8008040:	e7f4      	b.n	800802c <__swbuf_r+0x64>
	...

08008044 <__swsetup_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4b2a      	ldr	r3, [pc, #168]	; (80080f0 <__swsetup_r+0xac>)
 8008048:	4605      	mov	r5, r0
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	460c      	mov	r4, r1
 800804e:	b118      	cbz	r0, 8008058 <__swsetup_r+0x14>
 8008050:	6a03      	ldr	r3, [r0, #32]
 8008052:	b90b      	cbnz	r3, 8008058 <__swsetup_r+0x14>
 8008054:	f7fd ff92 	bl	8005f7c <__sinit>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800805e:	0718      	lsls	r0, r3, #28
 8008060:	d422      	bmi.n	80080a8 <__swsetup_r+0x64>
 8008062:	06d9      	lsls	r1, r3, #27
 8008064:	d407      	bmi.n	8008076 <__swsetup_r+0x32>
 8008066:	2309      	movs	r3, #9
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800806e:	f04f 30ff 	mov.w	r0, #4294967295
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	e034      	b.n	80080e0 <__swsetup_r+0x9c>
 8008076:	0758      	lsls	r0, r3, #29
 8008078:	d512      	bpl.n	80080a0 <__swsetup_r+0x5c>
 800807a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807c:	b141      	cbz	r1, 8008090 <__swsetup_r+0x4c>
 800807e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008082:	4299      	cmp	r1, r3
 8008084:	d002      	beq.n	800808c <__swsetup_r+0x48>
 8008086:	4628      	mov	r0, r5
 8008088:	f7fe ff0e 	bl	8006ea8 <_free_r>
 800808c:	2300      	movs	r3, #0
 800808e:	6363      	str	r3, [r4, #52]	; 0x34
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	2300      	movs	r3, #0
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f043 0308 	orr.w	r3, r3, #8
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b94b      	cbnz	r3, 80080c0 <__swsetup_r+0x7c>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b6:	d003      	beq.n	80080c0 <__swsetup_r+0x7c>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f883 	bl	80081c6 <__smakebuf_r>
 80080c0:	89a0      	ldrh	r0, [r4, #12]
 80080c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080c6:	f010 0301 	ands.w	r3, r0, #1
 80080ca:	d00a      	beq.n	80080e2 <__swsetup_r+0x9e>
 80080cc:	2300      	movs	r3, #0
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	6963      	ldr	r3, [r4, #20]
 80080d2:	425b      	negs	r3, r3
 80080d4:	61a3      	str	r3, [r4, #24]
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	b943      	cbnz	r3, 80080ec <__swsetup_r+0xa8>
 80080da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080de:	d1c4      	bne.n	800806a <__swsetup_r+0x26>
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
 80080e2:	0781      	lsls	r1, r0, #30
 80080e4:	bf58      	it	pl
 80080e6:	6963      	ldrpl	r3, [r4, #20]
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	e7f4      	b.n	80080d6 <__swsetup_r+0x92>
 80080ec:	2000      	movs	r0, #0
 80080ee:	e7f7      	b.n	80080e0 <__swsetup_r+0x9c>
 80080f0:	200000f8 	.word	0x200000f8

080080f4 <_raise_r>:
 80080f4:	291f      	cmp	r1, #31
 80080f6:	b538      	push	{r3, r4, r5, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	d904      	bls.n	8008108 <_raise_r+0x14>
 80080fe:	2316      	movs	r3, #22
 8008100:	6003      	str	r3, [r0, #0]
 8008102:	f04f 30ff 	mov.w	r0, #4294967295
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800810a:	b112      	cbz	r2, 8008112 <_raise_r+0x1e>
 800810c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008110:	b94b      	cbnz	r3, 8008126 <_raise_r+0x32>
 8008112:	4620      	mov	r0, r4
 8008114:	f000 f830 	bl	8008178 <_getpid_r>
 8008118:	462a      	mov	r2, r5
 800811a:	4601      	mov	r1, r0
 800811c:	4620      	mov	r0, r4
 800811e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008122:	f000 b817 	b.w	8008154 <_kill_r>
 8008126:	2b01      	cmp	r3, #1
 8008128:	d00a      	beq.n	8008140 <_raise_r+0x4c>
 800812a:	1c59      	adds	r1, r3, #1
 800812c:	d103      	bne.n	8008136 <_raise_r+0x42>
 800812e:	2316      	movs	r3, #22
 8008130:	6003      	str	r3, [r0, #0]
 8008132:	2001      	movs	r0, #1
 8008134:	e7e7      	b.n	8008106 <_raise_r+0x12>
 8008136:	2400      	movs	r4, #0
 8008138:	4628      	mov	r0, r5
 800813a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800813e:	4798      	blx	r3
 8008140:	2000      	movs	r0, #0
 8008142:	e7e0      	b.n	8008106 <_raise_r+0x12>

08008144 <raise>:
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <raise+0xc>)
 8008146:	4601      	mov	r1, r0
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	f7ff bfd3 	b.w	80080f4 <_raise_r>
 800814e:	bf00      	nop
 8008150:	200000f8 	.word	0x200000f8

08008154 <_kill_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	2300      	movs	r3, #0
 8008158:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_kill_r+0x20>)
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	4611      	mov	r1, r2
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	f7f9 fc64 	bl	8001a2e <_kill>
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d102      	bne.n	8008170 <_kill_r+0x1c>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	b103      	cbz	r3, 8008170 <_kill_r+0x1c>
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	20001358 	.word	0x20001358

08008178 <_getpid_r>:
 8008178:	f7f9 bc52 	b.w	8001a20 <_getpid>

0800817c <__swhatbuf_r>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	460c      	mov	r4, r1
 8008180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008184:	4615      	mov	r5, r2
 8008186:	2900      	cmp	r1, #0
 8008188:	461e      	mov	r6, r3
 800818a:	b096      	sub	sp, #88	; 0x58
 800818c:	da0c      	bge.n	80081a8 <__swhatbuf_r+0x2c>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	2100      	movs	r1, #0
 8008192:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008196:	bf0c      	ite	eq
 8008198:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800819c:	2340      	movne	r3, #64	; 0x40
 800819e:	2000      	movs	r0, #0
 80081a0:	6031      	str	r1, [r6, #0]
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	b016      	add	sp, #88	; 0x58
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	466a      	mov	r2, sp
 80081aa:	f000 f849 	bl	8008240 <_fstat_r>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	dbed      	blt.n	800818e <__swhatbuf_r+0x12>
 80081b2:	9901      	ldr	r1, [sp, #4]
 80081b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081bc:	4259      	negs	r1, r3
 80081be:	4159      	adcs	r1, r3
 80081c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c4:	e7eb      	b.n	800819e <__swhatbuf_r+0x22>

080081c6 <__smakebuf_r>:
 80081c6:	898b      	ldrh	r3, [r1, #12]
 80081c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ca:	079d      	lsls	r5, r3, #30
 80081cc:	4606      	mov	r6, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	d507      	bpl.n	80081e2 <__smakebuf_r+0x1c>
 80081d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	6123      	str	r3, [r4, #16]
 80081da:	2301      	movs	r3, #1
 80081dc:	6163      	str	r3, [r4, #20]
 80081de:	b002      	add	sp, #8
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	466a      	mov	r2, sp
 80081e4:	ab01      	add	r3, sp, #4
 80081e6:	f7ff ffc9 	bl	800817c <__swhatbuf_r>
 80081ea:	9900      	ldr	r1, [sp, #0]
 80081ec:	4605      	mov	r5, r0
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7fe feca 	bl	8006f88 <_malloc_r>
 80081f4:	b948      	cbnz	r0, 800820a <__smakebuf_r+0x44>
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	059a      	lsls	r2, r3, #22
 80081fc:	d4ef      	bmi.n	80081de <__smakebuf_r+0x18>
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	e7e3      	b.n	80081d2 <__smakebuf_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	6020      	str	r0, [r4, #0]
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	6120      	str	r0, [r4, #16]
 8008218:	6163      	str	r3, [r4, #20]
 800821a:	9b01      	ldr	r3, [sp, #4]
 800821c:	b15b      	cbz	r3, 8008236 <__smakebuf_r+0x70>
 800821e:	4630      	mov	r0, r6
 8008220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008224:	f000 f81e 	bl	8008264 <_isatty_r>
 8008228:	b128      	cbz	r0, 8008236 <__smakebuf_r+0x70>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	431d      	orrs	r5, r3
 800823a:	81a5      	strh	r5, [r4, #12]
 800823c:	e7cf      	b.n	80081de <__smakebuf_r+0x18>
	...

08008240 <_fstat_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	2300      	movs	r3, #0
 8008244:	4d06      	ldr	r5, [pc, #24]	; (8008260 <_fstat_r+0x20>)
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f7f9 fc4c 	bl	8001aea <_fstat>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d102      	bne.n	800825c <_fstat_r+0x1c>
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	b103      	cbz	r3, 800825c <_fstat_r+0x1c>
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	bf00      	nop
 8008260:	20001358 	.word	0x20001358

08008264 <_isatty_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	2300      	movs	r3, #0
 8008268:	4d05      	ldr	r5, [pc, #20]	; (8008280 <_isatty_r+0x1c>)
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	602b      	str	r3, [r5, #0]
 8008270:	f7f9 fc4a 	bl	8001b08 <_isatty>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_isatty_r+0x1a>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_isatty_r+0x1a>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	20001358 	.word	0x20001358

08008284 <atan2>:
 8008284:	f000 ba8c 	b.w	80087a0 <__ieee754_atan2>

08008288 <sqrt>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	4606      	mov	r6, r0
 800828c:	460f      	mov	r7, r1
 800828e:	f000 f9ad 	bl	80085ec <__ieee754_sqrt>
 8008292:	4632      	mov	r2, r6
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	463b      	mov	r3, r7
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f8 fbb5 	bl	8000a0c <__aeabi_dcmpun>
 80082a2:	b990      	cbnz	r0, 80082ca <sqrt+0x42>
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fb86 	bl	80009bc <__aeabi_dcmplt>
 80082b0:	b158      	cbz	r0, 80082ca <sqrt+0x42>
 80082b2:	f7fd ff4f 	bl	8006154 <__errno>
 80082b6:	2321      	movs	r3, #33	; 0x21
 80082b8:	2200      	movs	r2, #0
 80082ba:	6003      	str	r3, [r0, #0]
 80082bc:	2300      	movs	r3, #0
 80082be:	4610      	mov	r0, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7f8 fa33 	bl	800072c <__aeabi_ddiv>
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	4620      	mov	r0, r4
 80082cc:	4629      	mov	r1, r5
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082d0 <atan>:
 80082d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	4bb6      	ldr	r3, [pc, #728]	; (80085b0 <atan+0x2e0>)
 80082d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80082da:	429e      	cmp	r6, r3
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	468b      	mov	fp, r1
 80082e2:	dd17      	ble.n	8008314 <atan+0x44>
 80082e4:	4bb3      	ldr	r3, [pc, #716]	; (80085b4 <atan+0x2e4>)
 80082e6:	429e      	cmp	r6, r3
 80082e8:	dc01      	bgt.n	80082ee <atan+0x1e>
 80082ea:	d109      	bne.n	8008300 <atan+0x30>
 80082ec:	b140      	cbz	r0, 8008300 <atan+0x30>
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f7 ff39 	bl	800016c <__adddf3>
 80082fa:	4604      	mov	r4, r0
 80082fc:	460d      	mov	r5, r1
 80082fe:	e005      	b.n	800830c <atan+0x3c>
 8008300:	f1bb 0f00 	cmp.w	fp, #0
 8008304:	4cac      	ldr	r4, [pc, #688]	; (80085b8 <atan+0x2e8>)
 8008306:	f300 8121 	bgt.w	800854c <atan+0x27c>
 800830a:	4dac      	ldr	r5, [pc, #688]	; (80085bc <atan+0x2ec>)
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	4baa      	ldr	r3, [pc, #680]	; (80085c0 <atan+0x2f0>)
 8008316:	429e      	cmp	r6, r3
 8008318:	dc11      	bgt.n	800833e <atan+0x6e>
 800831a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800831e:	429e      	cmp	r6, r3
 8008320:	dc0a      	bgt.n	8008338 <atan+0x68>
 8008322:	a38b      	add	r3, pc, #556	; (adr r3, 8008550 <atan+0x280>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f7 ff20 	bl	800016c <__adddf3>
 800832c:	2200      	movs	r2, #0
 800832e:	4ba5      	ldr	r3, [pc, #660]	; (80085c4 <atan+0x2f4>)
 8008330:	f7f8 fb62 	bl	80009f8 <__aeabi_dcmpgt>
 8008334:	2800      	cmp	r0, #0
 8008336:	d1e9      	bne.n	800830c <atan+0x3c>
 8008338:	f04f 3aff 	mov.w	sl, #4294967295
 800833c:	e027      	b.n	800838e <atan+0xbe>
 800833e:	f000 f951 	bl	80085e4 <fabs>
 8008342:	4ba1      	ldr	r3, [pc, #644]	; (80085c8 <atan+0x2f8>)
 8008344:	4604      	mov	r4, r0
 8008346:	429e      	cmp	r6, r3
 8008348:	460d      	mov	r5, r1
 800834a:	f300 80b8 	bgt.w	80084be <atan+0x1ee>
 800834e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008352:	429e      	cmp	r6, r3
 8008354:	f300 809c 	bgt.w	8008490 <atan+0x1c0>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	f7f7 ff06 	bl	800016c <__adddf3>
 8008360:	2200      	movs	r2, #0
 8008362:	4b98      	ldr	r3, [pc, #608]	; (80085c4 <atan+0x2f4>)
 8008364:	f7f7 ff00 	bl	8000168 <__aeabi_dsub>
 8008368:	2200      	movs	r2, #0
 800836a:	4606      	mov	r6, r0
 800836c:	460f      	mov	r7, r1
 800836e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	f7f7 fef9 	bl	800016c <__adddf3>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 f9d3 	bl	800072c <__aeabi_ddiv>
 8008386:	f04f 0a00 	mov.w	sl, #0
 800838a:	4604      	mov	r4, r0
 800838c:	460d      	mov	r5, r1
 800838e:	4622      	mov	r2, r4
 8008390:	462b      	mov	r3, r5
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 f89f 	bl	80004d8 <__aeabi_dmul>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4680      	mov	r8, r0
 80083a0:	4689      	mov	r9, r1
 80083a2:	f7f8 f899 	bl	80004d8 <__aeabi_dmul>
 80083a6:	a36c      	add	r3, pc, #432	; (adr r3, 8008558 <atan+0x288>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	f7f8 f892 	bl	80004d8 <__aeabi_dmul>
 80083b4:	a36a      	add	r3, pc, #424	; (adr r3, 8008560 <atan+0x290>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f7f7 fed7 	bl	800016c <__adddf3>
 80083be:	4632      	mov	r2, r6
 80083c0:	463b      	mov	r3, r7
 80083c2:	f7f8 f889 	bl	80004d8 <__aeabi_dmul>
 80083c6:	a368      	add	r3, pc, #416	; (adr r3, 8008568 <atan+0x298>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 fece 	bl	800016c <__adddf3>
 80083d0:	4632      	mov	r2, r6
 80083d2:	463b      	mov	r3, r7
 80083d4:	f7f8 f880 	bl	80004d8 <__aeabi_dmul>
 80083d8:	a365      	add	r3, pc, #404	; (adr r3, 8008570 <atan+0x2a0>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f7 fec5 	bl	800016c <__adddf3>
 80083e2:	4632      	mov	r2, r6
 80083e4:	463b      	mov	r3, r7
 80083e6:	f7f8 f877 	bl	80004d8 <__aeabi_dmul>
 80083ea:	a363      	add	r3, pc, #396	; (adr r3, 8008578 <atan+0x2a8>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f7 febc 	bl	800016c <__adddf3>
 80083f4:	4632      	mov	r2, r6
 80083f6:	463b      	mov	r3, r7
 80083f8:	f7f8 f86e 	bl	80004d8 <__aeabi_dmul>
 80083fc:	a360      	add	r3, pc, #384	; (adr r3, 8008580 <atan+0x2b0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 feb3 	bl	800016c <__adddf3>
 8008406:	4642      	mov	r2, r8
 8008408:	464b      	mov	r3, r9
 800840a:	f7f8 f865 	bl	80004d8 <__aeabi_dmul>
 800840e:	a35e      	add	r3, pc, #376	; (adr r3, 8008588 <atan+0x2b8>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	4680      	mov	r8, r0
 8008416:	4689      	mov	r9, r1
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 f85c 	bl	80004d8 <__aeabi_dmul>
 8008420:	a35b      	add	r3, pc, #364	; (adr r3, 8008590 <atan+0x2c0>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 fe9f 	bl	8000168 <__aeabi_dsub>
 800842a:	4632      	mov	r2, r6
 800842c:	463b      	mov	r3, r7
 800842e:	f7f8 f853 	bl	80004d8 <__aeabi_dmul>
 8008432:	a359      	add	r3, pc, #356	; (adr r3, 8008598 <atan+0x2c8>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 fe96 	bl	8000168 <__aeabi_dsub>
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	f7f8 f84a 	bl	80004d8 <__aeabi_dmul>
 8008444:	a356      	add	r3, pc, #344	; (adr r3, 80085a0 <atan+0x2d0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 fe8d 	bl	8000168 <__aeabi_dsub>
 800844e:	4632      	mov	r2, r6
 8008450:	463b      	mov	r3, r7
 8008452:	f7f8 f841 	bl	80004d8 <__aeabi_dmul>
 8008456:	a354      	add	r3, pc, #336	; (adr r3, 80085a8 <atan+0x2d8>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f7 fe84 	bl	8000168 <__aeabi_dsub>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f8 f838 	bl	80004d8 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4640      	mov	r0, r8
 800846e:	4649      	mov	r1, r9
 8008470:	f7f7 fe7c 	bl	800016c <__adddf3>
 8008474:	4622      	mov	r2, r4
 8008476:	462b      	mov	r3, r5
 8008478:	f7f8 f82e 	bl	80004d8 <__aeabi_dmul>
 800847c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	d144      	bne.n	8008510 <atan+0x240>
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f7 fe6d 	bl	8000168 <__aeabi_dsub>
 800848e:	e734      	b.n	80082fa <atan+0x2a>
 8008490:	2200      	movs	r2, #0
 8008492:	4b4c      	ldr	r3, [pc, #304]	; (80085c4 <atan+0x2f4>)
 8008494:	f7f7 fe68 	bl	8000168 <__aeabi_dsub>
 8008498:	2200      	movs	r2, #0
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	4b48      	ldr	r3, [pc, #288]	; (80085c4 <atan+0x2f4>)
 80084a4:	f7f7 fe62 	bl	800016c <__adddf3>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 f93c 	bl	800072c <__aeabi_ddiv>
 80084b4:	f04f 0a01 	mov.w	sl, #1
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	e767      	b.n	800838e <atan+0xbe>
 80084be:	4b43      	ldr	r3, [pc, #268]	; (80085cc <atan+0x2fc>)
 80084c0:	429e      	cmp	r6, r3
 80084c2:	da1a      	bge.n	80084fa <atan+0x22a>
 80084c4:	2200      	movs	r2, #0
 80084c6:	4b42      	ldr	r3, [pc, #264]	; (80085d0 <atan+0x300>)
 80084c8:	f7f7 fe4e 	bl	8000168 <__aeabi_dsub>
 80084cc:	2200      	movs	r2, #0
 80084ce:	4606      	mov	r6, r0
 80084d0:	460f      	mov	r7, r1
 80084d2:	4620      	mov	r0, r4
 80084d4:	4629      	mov	r1, r5
 80084d6:	4b3e      	ldr	r3, [pc, #248]	; (80085d0 <atan+0x300>)
 80084d8:	f7f7 fffe 	bl	80004d8 <__aeabi_dmul>
 80084dc:	2200      	movs	r2, #0
 80084de:	4b39      	ldr	r3, [pc, #228]	; (80085c4 <atan+0x2f4>)
 80084e0:	f7f7 fe44 	bl	800016c <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f8 f91e 	bl	800072c <__aeabi_ddiv>
 80084f0:	f04f 0a02 	mov.w	sl, #2
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	e749      	b.n	800838e <atan+0xbe>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	2000      	movs	r0, #0
 8008500:	4934      	ldr	r1, [pc, #208]	; (80085d4 <atan+0x304>)
 8008502:	f7f8 f913 	bl	800072c <__aeabi_ddiv>
 8008506:	f04f 0a03 	mov.w	sl, #3
 800850a:	4604      	mov	r4, r0
 800850c:	460d      	mov	r5, r1
 800850e:	e73e      	b.n	800838e <atan+0xbe>
 8008510:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <atan+0x308>)
 8008512:	4e32      	ldr	r6, [pc, #200]	; (80085dc <atan+0x30c>)
 8008514:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f7f7 fe24 	bl	8000168 <__aeabi_dsub>
 8008520:	4622      	mov	r2, r4
 8008522:	462b      	mov	r3, r5
 8008524:	f7f7 fe20 	bl	8000168 <__aeabi_dsub>
 8008528:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008534:	f7f7 fe18 	bl	8000168 <__aeabi_dsub>
 8008538:	f1bb 0f00 	cmp.w	fp, #0
 800853c:	4604      	mov	r4, r0
 800853e:	460d      	mov	r5, r1
 8008540:	f6bf aee4 	bge.w	800830c <atan+0x3c>
 8008544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008548:	461d      	mov	r5, r3
 800854a:	e6df      	b.n	800830c <atan+0x3c>
 800854c:	4d24      	ldr	r5, [pc, #144]	; (80085e0 <atan+0x310>)
 800854e:	e6dd      	b.n	800830c <atan+0x3c>
 8008550:	8800759c 	.word	0x8800759c
 8008554:	7e37e43c 	.word	0x7e37e43c
 8008558:	e322da11 	.word	0xe322da11
 800855c:	3f90ad3a 	.word	0x3f90ad3a
 8008560:	24760deb 	.word	0x24760deb
 8008564:	3fa97b4b 	.word	0x3fa97b4b
 8008568:	a0d03d51 	.word	0xa0d03d51
 800856c:	3fb10d66 	.word	0x3fb10d66
 8008570:	c54c206e 	.word	0xc54c206e
 8008574:	3fb745cd 	.word	0x3fb745cd
 8008578:	920083ff 	.word	0x920083ff
 800857c:	3fc24924 	.word	0x3fc24924
 8008580:	5555550d 	.word	0x5555550d
 8008584:	3fd55555 	.word	0x3fd55555
 8008588:	2c6a6c2f 	.word	0x2c6a6c2f
 800858c:	bfa2b444 	.word	0xbfa2b444
 8008590:	52defd9a 	.word	0x52defd9a
 8008594:	3fadde2d 	.word	0x3fadde2d
 8008598:	af749a6d 	.word	0xaf749a6d
 800859c:	3fb3b0f2 	.word	0x3fb3b0f2
 80085a0:	fe231671 	.word	0xfe231671
 80085a4:	3fbc71c6 	.word	0x3fbc71c6
 80085a8:	9998ebc4 	.word	0x9998ebc4
 80085ac:	3fc99999 	.word	0x3fc99999
 80085b0:	440fffff 	.word	0x440fffff
 80085b4:	7ff00000 	.word	0x7ff00000
 80085b8:	54442d18 	.word	0x54442d18
 80085bc:	bff921fb 	.word	0xbff921fb
 80085c0:	3fdbffff 	.word	0x3fdbffff
 80085c4:	3ff00000 	.word	0x3ff00000
 80085c8:	3ff2ffff 	.word	0x3ff2ffff
 80085cc:	40038000 	.word	0x40038000
 80085d0:	3ff80000 	.word	0x3ff80000
 80085d4:	bff00000 	.word	0xbff00000
 80085d8:	0800a328 	.word	0x0800a328
 80085dc:	0800a308 	.word	0x0800a308
 80085e0:	3ff921fb 	.word	0x3ff921fb

080085e4 <fabs>:
 80085e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085e8:	4619      	mov	r1, r3
 80085ea:	4770      	bx	lr

080085ec <__ieee754_sqrt>:
 80085ec:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008790 <__ieee754_sqrt+0x1a4>
 80085f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80085f8:	460b      	mov	r3, r1
 80085fa:	4606      	mov	r6, r0
 80085fc:	460d      	mov	r5, r1
 80085fe:	460a      	mov	r2, r1
 8008600:	4604      	mov	r4, r0
 8008602:	d10e      	bne.n	8008622 <__ieee754_sqrt+0x36>
 8008604:	4602      	mov	r2, r0
 8008606:	f7f7 ff67 	bl	80004d8 <__aeabi_dmul>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4630      	mov	r0, r6
 8008610:	4629      	mov	r1, r5
 8008612:	f7f7 fdab 	bl	800016c <__adddf3>
 8008616:	4606      	mov	r6, r0
 8008618:	460d      	mov	r5, r1
 800861a:	4630      	mov	r0, r6
 800861c:	4629      	mov	r1, r5
 800861e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	2900      	cmp	r1, #0
 8008624:	dc0d      	bgt.n	8008642 <__ieee754_sqrt+0x56>
 8008626:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800862a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800862e:	d0f4      	beq.n	800861a <__ieee754_sqrt+0x2e>
 8008630:	b139      	cbz	r1, 8008642 <__ieee754_sqrt+0x56>
 8008632:	4602      	mov	r2, r0
 8008634:	f7f7 fd98 	bl	8000168 <__aeabi_dsub>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	f7f8 f876 	bl	800072c <__aeabi_ddiv>
 8008640:	e7e9      	b.n	8008616 <__ieee754_sqrt+0x2a>
 8008642:	1512      	asrs	r2, r2, #20
 8008644:	f000 8089 	beq.w	800875a <__ieee754_sqrt+0x16e>
 8008648:	2500      	movs	r5, #0
 800864a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800864e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008656:	07d2      	lsls	r2, r2, #31
 8008658:	bf5c      	itt	pl
 800865a:	005b      	lslpl	r3, r3, #1
 800865c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008660:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008664:	bf58      	it	pl
 8008666:	0064      	lslpl	r4, r4, #1
 8008668:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800866c:	0062      	lsls	r2, r4, #1
 800866e:	2016      	movs	r0, #22
 8008670:	4629      	mov	r1, r5
 8008672:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8008676:	1076      	asrs	r6, r6, #1
 8008678:	190f      	adds	r7, r1, r4
 800867a:	429f      	cmp	r7, r3
 800867c:	bfde      	ittt	le
 800867e:	1bdb      	suble	r3, r3, r7
 8008680:	1939      	addle	r1, r7, r4
 8008682:	192d      	addle	r5, r5, r4
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	3801      	subs	r0, #1
 8008688:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800868c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008690:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008694:	d1f0      	bne.n	8008678 <__ieee754_sqrt+0x8c>
 8008696:	4604      	mov	r4, r0
 8008698:	2720      	movs	r7, #32
 800869a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800869e:	428b      	cmp	r3, r1
 80086a0:	eb0c 0e00 	add.w	lr, ip, r0
 80086a4:	dc02      	bgt.n	80086ac <__ieee754_sqrt+0xc0>
 80086a6:	d113      	bne.n	80086d0 <__ieee754_sqrt+0xe4>
 80086a8:	4596      	cmp	lr, r2
 80086aa:	d811      	bhi.n	80086d0 <__ieee754_sqrt+0xe4>
 80086ac:	f1be 0f00 	cmp.w	lr, #0
 80086b0:	eb0e 000c 	add.w	r0, lr, ip
 80086b4:	da56      	bge.n	8008764 <__ieee754_sqrt+0x178>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	db54      	blt.n	8008764 <__ieee754_sqrt+0x178>
 80086ba:	f101 0801 	add.w	r8, r1, #1
 80086be:	1a5b      	subs	r3, r3, r1
 80086c0:	4641      	mov	r1, r8
 80086c2:	4596      	cmp	lr, r2
 80086c4:	bf88      	it	hi
 80086c6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80086ca:	eba2 020e 	sub.w	r2, r2, lr
 80086ce:	4464      	add	r4, ip
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	3f01      	subs	r7, #1
 80086d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80086d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80086dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80086e0:	d1dd      	bne.n	800869e <__ieee754_sqrt+0xb2>
 80086e2:	4313      	orrs	r3, r2
 80086e4:	d01b      	beq.n	800871e <__ieee754_sqrt+0x132>
 80086e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008794 <__ieee754_sqrt+0x1a8>
 80086ea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008798 <__ieee754_sqrt+0x1ac>
 80086ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80086f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80086f6:	f7f7 fd37 	bl	8000168 <__aeabi_dsub>
 80086fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	f7f8 f963 	bl	80009d0 <__aeabi_dcmple>
 800870a:	b140      	cbz	r0, 800871e <__ieee754_sqrt+0x132>
 800870c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008710:	e9db 2300 	ldrd	r2, r3, [fp]
 8008714:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008718:	d126      	bne.n	8008768 <__ieee754_sqrt+0x17c>
 800871a:	463c      	mov	r4, r7
 800871c:	3501      	adds	r5, #1
 800871e:	106b      	asrs	r3, r5, #1
 8008720:	0864      	lsrs	r4, r4, #1
 8008722:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008726:	07ea      	lsls	r2, r5, #31
 8008728:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800872c:	bf48      	it	mi
 800872e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008732:	4620      	mov	r0, r4
 8008734:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008738:	e76d      	b.n	8008616 <__ieee754_sqrt+0x2a>
 800873a:	0ae3      	lsrs	r3, r4, #11
 800873c:	3915      	subs	r1, #21
 800873e:	0564      	lsls	r4, r4, #21
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0fa      	beq.n	800873a <__ieee754_sqrt+0x14e>
 8008744:	02d8      	lsls	r0, r3, #11
 8008746:	d50a      	bpl.n	800875e <__ieee754_sqrt+0x172>
 8008748:	f1c2 0020 	rsb	r0, r2, #32
 800874c:	fa24 f000 	lsr.w	r0, r4, r0
 8008750:	1e55      	subs	r5, r2, #1
 8008752:	4094      	lsls	r4, r2
 8008754:	4303      	orrs	r3, r0
 8008756:	1b4a      	subs	r2, r1, r5
 8008758:	e776      	b.n	8008648 <__ieee754_sqrt+0x5c>
 800875a:	4611      	mov	r1, r2
 800875c:	e7f0      	b.n	8008740 <__ieee754_sqrt+0x154>
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	3201      	adds	r2, #1
 8008762:	e7ef      	b.n	8008744 <__ieee754_sqrt+0x158>
 8008764:	4688      	mov	r8, r1
 8008766:	e7aa      	b.n	80086be <__ieee754_sqrt+0xd2>
 8008768:	f7f7 fd00 	bl	800016c <__adddf3>
 800876c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f920 	bl	80009bc <__aeabi_dcmplt>
 800877c:	b120      	cbz	r0, 8008788 <__ieee754_sqrt+0x19c>
 800877e:	1ca1      	adds	r1, r4, #2
 8008780:	bf08      	it	eq
 8008782:	3501      	addeq	r5, #1
 8008784:	3402      	adds	r4, #2
 8008786:	e7ca      	b.n	800871e <__ieee754_sqrt+0x132>
 8008788:	3401      	adds	r4, #1
 800878a:	f024 0401 	bic.w	r4, r4, #1
 800878e:	e7c6      	b.n	800871e <__ieee754_sqrt+0x132>
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	20000268 	.word	0x20000268
 8008798:	20000270 	.word	0x20000270
 800879c:	00000000 	.word	0x00000000

080087a0 <__ieee754_atan2>:
 80087a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4617      	mov	r7, r2
 80087a6:	4692      	mov	sl, r2
 80087a8:	4699      	mov	r9, r3
 80087aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087ae:	427b      	negs	r3, r7
 80087b0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008930 <__ieee754_atan2+0x190>
 80087b4:	433b      	orrs	r3, r7
 80087b6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80087ba:	4543      	cmp	r3, r8
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	d809      	bhi.n	80087d6 <__ieee754_atan2+0x36>
 80087c2:	4246      	negs	r6, r0
 80087c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087c8:	4306      	orrs	r6, r0
 80087ca:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80087ce:	4546      	cmp	r6, r8
 80087d0:	468e      	mov	lr, r1
 80087d2:	4683      	mov	fp, r0
 80087d4:	d908      	bls.n	80087e8 <__ieee754_atan2+0x48>
 80087d6:	4652      	mov	r2, sl
 80087d8:	464b      	mov	r3, r9
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 fcc5 	bl	800016c <__adddf3>
 80087e2:	4604      	mov	r4, r0
 80087e4:	460d      	mov	r5, r1
 80087e6:	e019      	b.n	800881c <__ieee754_atan2+0x7c>
 80087e8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80087ec:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80087f0:	433e      	orrs	r6, r7
 80087f2:	d103      	bne.n	80087fc <__ieee754_atan2+0x5c>
 80087f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	f7ff bd6a 	b.w	80082d0 <atan>
 80087fc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008800:	f006 0602 	and.w	r6, r6, #2
 8008804:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008808:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800880c:	d10a      	bne.n	8008824 <__ieee754_atan2+0x84>
 800880e:	2e02      	cmp	r6, #2
 8008810:	d067      	beq.n	80088e2 <__ieee754_atan2+0x142>
 8008812:	2e03      	cmp	r6, #3
 8008814:	d102      	bne.n	800881c <__ieee754_atan2+0x7c>
 8008816:	a53a      	add	r5, pc, #232	; (adr r5, 8008900 <__ieee754_atan2+0x160>)
 8008818:	e9d5 4500 	ldrd	r4, r5, [r5]
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	4317      	orrs	r7, r2
 8008826:	d106      	bne.n	8008836 <__ieee754_atan2+0x96>
 8008828:	f1be 0f00 	cmp.w	lr, #0
 800882c:	da64      	bge.n	80088f8 <__ieee754_atan2+0x158>
 800882e:	a536      	add	r5, pc, #216	; (adr r5, 8008908 <__ieee754_atan2+0x168>)
 8008830:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008834:	e7f2      	b.n	800881c <__ieee754_atan2+0x7c>
 8008836:	4542      	cmp	r2, r8
 8008838:	d10f      	bne.n	800885a <__ieee754_atan2+0xba>
 800883a:	4293      	cmp	r3, r2
 800883c:	f106 36ff 	add.w	r6, r6, #4294967295
 8008840:	d107      	bne.n	8008852 <__ieee754_atan2+0xb2>
 8008842:	2e02      	cmp	r6, #2
 8008844:	d851      	bhi.n	80088ea <__ieee754_atan2+0x14a>
 8008846:	4b3b      	ldr	r3, [pc, #236]	; (8008934 <__ieee754_atan2+0x194>)
 8008848:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800884c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008850:	e7e4      	b.n	800881c <__ieee754_atan2+0x7c>
 8008852:	2e02      	cmp	r6, #2
 8008854:	d84d      	bhi.n	80088f2 <__ieee754_atan2+0x152>
 8008856:	4b38      	ldr	r3, [pc, #224]	; (8008938 <__ieee754_atan2+0x198>)
 8008858:	e7f6      	b.n	8008848 <__ieee754_atan2+0xa8>
 800885a:	4543      	cmp	r3, r8
 800885c:	d0e4      	beq.n	8008828 <__ieee754_atan2+0x88>
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008864:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008868:	da21      	bge.n	80088ae <__ieee754_atan2+0x10e>
 800886a:	f1b9 0f00 	cmp.w	r9, #0
 800886e:	da01      	bge.n	8008874 <__ieee754_atan2+0xd4>
 8008870:	323c      	adds	r2, #60	; 0x3c
 8008872:	db20      	blt.n	80088b6 <__ieee754_atan2+0x116>
 8008874:	4652      	mov	r2, sl
 8008876:	464b      	mov	r3, r9
 8008878:	4620      	mov	r0, r4
 800887a:	4629      	mov	r1, r5
 800887c:	f7f7 ff56 	bl	800072c <__aeabi_ddiv>
 8008880:	f7ff feb0 	bl	80085e4 <fabs>
 8008884:	f7ff fd24 	bl	80082d0 <atan>
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	2e01      	cmp	r6, #1
 800888e:	d015      	beq.n	80088bc <__ieee754_atan2+0x11c>
 8008890:	2e02      	cmp	r6, #2
 8008892:	d017      	beq.n	80088c4 <__ieee754_atan2+0x124>
 8008894:	2e00      	cmp	r6, #0
 8008896:	d0c1      	beq.n	800881c <__ieee754_atan2+0x7c>
 8008898:	a31d      	add	r3, pc, #116	; (adr r3, 8008910 <__ieee754_atan2+0x170>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 fc61 	bl	8000168 <__aeabi_dsub>
 80088a6:	a31c      	add	r3, pc, #112	; (adr r3, 8008918 <__ieee754_atan2+0x178>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	e016      	b.n	80088dc <__ieee754_atan2+0x13c>
 80088ae:	a51c      	add	r5, pc, #112	; (adr r5, 8008920 <__ieee754_atan2+0x180>)
 80088b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088b4:	e7ea      	b.n	800888c <__ieee754_atan2+0xec>
 80088b6:	2400      	movs	r4, #0
 80088b8:	2500      	movs	r5, #0
 80088ba:	e7e7      	b.n	800888c <__ieee754_atan2+0xec>
 80088bc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80088c0:	461d      	mov	r5, r3
 80088c2:	e7ab      	b.n	800881c <__ieee754_atan2+0x7c>
 80088c4:	a312      	add	r3, pc, #72	; (adr r3, 8008910 <__ieee754_atan2+0x170>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fc4b 	bl	8000168 <__aeabi_dsub>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	a110      	add	r1, pc, #64	; (adr r1, 8008918 <__ieee754_atan2+0x178>)
 80088d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088dc:	f7f7 fc44 	bl	8000168 <__aeabi_dsub>
 80088e0:	e77f      	b.n	80087e2 <__ieee754_atan2+0x42>
 80088e2:	a50d      	add	r5, pc, #52	; (adr r5, 8008918 <__ieee754_atan2+0x178>)
 80088e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088e8:	e798      	b.n	800881c <__ieee754_atan2+0x7c>
 80088ea:	a50f      	add	r5, pc, #60	; (adr r5, 8008928 <__ieee754_atan2+0x188>)
 80088ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088f0:	e794      	b.n	800881c <__ieee754_atan2+0x7c>
 80088f2:	2400      	movs	r4, #0
 80088f4:	2500      	movs	r5, #0
 80088f6:	e791      	b.n	800881c <__ieee754_atan2+0x7c>
 80088f8:	a509      	add	r5, pc, #36	; (adr r5, 8008920 <__ieee754_atan2+0x180>)
 80088fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088fe:	e78d      	b.n	800881c <__ieee754_atan2+0x7c>
 8008900:	54442d18 	.word	0x54442d18
 8008904:	c00921fb 	.word	0xc00921fb
 8008908:	54442d18 	.word	0x54442d18
 800890c:	bff921fb 	.word	0xbff921fb
 8008910:	33145c07 	.word	0x33145c07
 8008914:	3ca1a626 	.word	0x3ca1a626
 8008918:	54442d18 	.word	0x54442d18
 800891c:	400921fb 	.word	0x400921fb
 8008920:	54442d18 	.word	0x54442d18
 8008924:	3ff921fb 	.word	0x3ff921fb
 8008928:	54442d18 	.word	0x54442d18
 800892c:	3fe921fb 	.word	0x3fe921fb
 8008930:	7ff00000 	.word	0x7ff00000
 8008934:	0800a348 	.word	0x0800a348
 8008938:	0800a360 	.word	0x0800a360

0800893c <_init>:
 800893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893e:	bf00      	nop
 8008940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008942:	bc08      	pop	{r3}
 8008944:	469e      	mov	lr, r3
 8008946:	4770      	bx	lr

08008948 <_fini>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr
